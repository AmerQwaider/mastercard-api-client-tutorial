/* 
 * MDES for Merchants
 *
 * The MDES APIs are designed as RPC style stateless web services where each API endpoint represents an operation to be performed.  All request and response payloads are sent in the JSON (JavaScript Object Notation) data-interchange format. Each endpoint in the API specifies the HTTP Method used to access it. All strings in request and response objects are to be UTF-8 encoded.  Each API URI includes the major and minor version of API that it conforms to.  This will allow multiple concurrent versions of the API to be deployed simultaneously. <br> __Authentication__ Mastercard uses OAuth 1.0a with body hash extension for authenticating the API clients. This requires every request that you send to  Mastercard to be signed with an RSA private key. A private-public RSA key pair must be generated consisting of: <br> 1 . A private key for the OAuth signature for API requests. It is recommended to keep the private key in a password-protected or hardware keystore. <br> 2. A public key is shared with Mastercard during the project setup process through either a certificate signing request (CSR) or the API Key Generator. Mastercard will use the public key to verify the OAuth signature that is provided on every API call.<br>  An OAUTH1.0a signer library is available on [GitHub](https://github.com/Mastercard/oauth1-signer-java) <br>  __Encryption__<br>  All communications between Issuer web service and the Mastercard gateway is encrypted using TLS. <br> __Additional Encryption of Sensitive Data__ In addition to the OAuth authentication, when using MDES Digital Enablement Service, any PCI sensitive and all account holder Personally Identifiable Information (PII) data must be encrypted. This requirement applies to the API fields containing encryptedData. Sensitive data is encrypted using a symmetric session (one-time-use) key. The symmetric session key is then wrapped with an RSA Public Key supplied by Mastercard during API setup phase (the Customer Encryption Key). <br>  Java Client Encryption Library available on [GitHub](https://github.com/Mastercard/client-encryption-java) 
 *
 * The version of the OpenAPI document: 1.2.9
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Mastercard.Developer.DigitalEnablement.Client.Client.OpenAPIDateConverter;

namespace Mastercard.Developer.DigitalEnablement.Client.Model
{
    /// <summary>
    /// GetDigitalAssetsResponseSchema
    /// </summary>
    [DataContract]
    public partial class GetDigitalAssetsResponseSchema :  IEquatable<GetDigitalAssetsResponseSchema>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetDigitalAssetsResponseSchema" /> class.
        /// </summary>
        /// <param name="responseId">Unique identifier for the response. .</param>
        /// <param name="responseHost">The host that originated the request. Future calls in the same conversation may be routed to this host. .</param>
        /// <param name="brandLogoAssetId">The MasterCard or Maestro brand logo associated with this card. Provided as an Asset ID – use the Get Asset API to retrieve the actual asset. Always returned in Product Configuration object &lt;br&gt;    __Max Length: 64__&lt;br&gt; __Required: Yes__ .</param>
        /// <param name="issuerLogoAssetId">The logo of the issuing bank. Provided as an Asset ID – use the Get Asset API to retrieve the actual asset. Always returned in Product Configuration object &lt;br&gt;     __Max Length:64__&lt;br&gt; __Required: Yes__ .</param>
        /// <param name="isCoBranded">Whether the product is co-branded. Must be either true (this is a co-branded product) or false (this is not a co-branded product). Always returned in Product Configuration object &lt;br&gt;    __Max Length:5__&lt;br&gt; __Required: Yes__ .</param>
        /// <param name="coBrandName">Textual name of the co-brand partner. Required if CoBranded is true, not present otherwise.  &lt;br&gt;   __Max Length:128__&lt;br&gt; __Required: Conditional – required if isCoBranded &#x3D; \&quot;true\&quot;. Not present otherwise__ .</param>
        /// <param name="coBrandLogoAssetId">The co-brand logo (if any) for this product. Provided as an Asset ID – use the Get Asset API to retrieve the actual asset. &lt;br&gt;   __Max Length:64__&lt;br&gt; __Required: No__ .</param>
        /// <param name="cardBackgroundCombinedAssetId">The card image used to represent the digital card in the wallet. This ‘combined’ option contains the MasterCard, bank and any co- brand logos.  Provided as an Asset ID – use the Get Asset API to retrieve the actual asset.     __Max Length:64__&lt;br&gt; __Required: Conditional – either CardBackgroundCombined or CardBackground will be provided__ .</param>
        /// <param name="cardBackgroundAssetId">The card image used to represent the digital card in the wallet. This ‘non-combined’ option does not contain the MasterCard, bank, or co-brand logos. Provided as an Asset ID – use the Get Asset API to retrieve the actual asset. &lt;br&gt;     __Max Length:64__&lt;br&gt; __Required: Conditional – either CardBackgroundCombined or CardBackground will be provided__ .</param>
        /// <param name="iconAssetId">The icon representing the primary brand(s) associated with this product. Provided as an Asset ID – use the Get Asset API to retrieve the actual asset. Always returned in Product Configuration object&lt;br&gt;    __Max Length:64__&lt;br&gt; __Required: Yes__ .</param>
        /// <param name="foregroundColor">Foreground color, used to overlay text on top of the card image. Always returned in Product Configuration object&lt;br&gt;    __Max Length:6__ Hexadecimal RGB color format (case-insensitive).&lt;br&gt; __Required: Yes__ .</param>
        /// <param name="issuerName">Name of the issuing bank. Always returned in Product Configuration object &lt;br&gt;    __Max Length:64__&lt;br&gt; __Required: Yes__ .</param>
        /// <param name="shortDescription">A short description for this product. Always returned in Product Configuration object  &lt;br&gt;   __Max Length:128__&lt;br&gt; __Required: Yes__ .</param>
        /// <param name="longDescription">A long description for this product.  &lt;br&gt;   __Max Length:256__&lt;br&gt; __Required: No__ .</param>
        public GetDigitalAssetsResponseSchema(string responseId = default(string), string responseHost = default(string), string brandLogoAssetId = default(string), string issuerLogoAssetId = default(string), string isCoBranded = default(string), string coBrandName = default(string), string coBrandLogoAssetId = default(string), string cardBackgroundCombinedAssetId = default(string), string cardBackgroundAssetId = default(string), string iconAssetId = default(string), string foregroundColor = default(string), string issuerName = default(string), string shortDescription = default(string), string longDescription = default(string))
        {
            this.ResponseId = responseId;
            this.ResponseHost = responseHost;
            this.BrandLogoAssetId = brandLogoAssetId;
            this.IssuerLogoAssetId = issuerLogoAssetId;
            this.IsCoBranded = isCoBranded;
            this.CoBrandName = coBrandName;
            this.CoBrandLogoAssetId = coBrandLogoAssetId;
            this.CardBackgroundCombinedAssetId = cardBackgroundCombinedAssetId;
            this.CardBackgroundAssetId = cardBackgroundAssetId;
            this.IconAssetId = iconAssetId;
            this.ForegroundColor = foregroundColor;
            this.IssuerName = issuerName;
            this.ShortDescription = shortDescription;
            this.LongDescription = longDescription;
        }
        
        /// <summary>
        /// Unique identifier for the response. 
        /// </summary>
        /// <value>Unique identifier for the response. </value>
        [DataMember(Name="responseId", EmitDefaultValue=false)]
        public string ResponseId { get; set; }

        /// <summary>
        /// The host that originated the request. Future calls in the same conversation may be routed to this host. 
        /// </summary>
        /// <value>The host that originated the request. Future calls in the same conversation may be routed to this host. </value>
        [DataMember(Name="responseHost", EmitDefaultValue=false)]
        public string ResponseHost { get; set; }

        /// <summary>
        /// The MasterCard or Maestro brand logo associated with this card. Provided as an Asset ID – use the Get Asset API to retrieve the actual asset. Always returned in Product Configuration object &lt;br&gt;    __Max Length: 64__&lt;br&gt; __Required: Yes__ 
        /// </summary>
        /// <value>The MasterCard or Maestro brand logo associated with this card. Provided as an Asset ID – use the Get Asset API to retrieve the actual asset. Always returned in Product Configuration object &lt;br&gt;    __Max Length: 64__&lt;br&gt; __Required: Yes__ </value>
        [DataMember(Name="brandLogoAssetId", EmitDefaultValue=false)]
        public string BrandLogoAssetId { get; set; }

        /// <summary>
        /// The logo of the issuing bank. Provided as an Asset ID – use the Get Asset API to retrieve the actual asset. Always returned in Product Configuration object &lt;br&gt;     __Max Length:64__&lt;br&gt; __Required: Yes__ 
        /// </summary>
        /// <value>The logo of the issuing bank. Provided as an Asset ID – use the Get Asset API to retrieve the actual asset. Always returned in Product Configuration object &lt;br&gt;     __Max Length:64__&lt;br&gt; __Required: Yes__ </value>
        [DataMember(Name="issuerLogoAssetId", EmitDefaultValue=false)]
        public string IssuerLogoAssetId { get; set; }

        /// <summary>
        /// Whether the product is co-branded. Must be either true (this is a co-branded product) or false (this is not a co-branded product). Always returned in Product Configuration object &lt;br&gt;    __Max Length:5__&lt;br&gt; __Required: Yes__ 
        /// </summary>
        /// <value>Whether the product is co-branded. Must be either true (this is a co-branded product) or false (this is not a co-branded product). Always returned in Product Configuration object &lt;br&gt;    __Max Length:5__&lt;br&gt; __Required: Yes__ </value>
        [DataMember(Name="isCoBranded", EmitDefaultValue=false)]
        public string IsCoBranded { get; set; }

        /// <summary>
        /// Textual name of the co-brand partner. Required if CoBranded is true, not present otherwise.  &lt;br&gt;   __Max Length:128__&lt;br&gt; __Required: Conditional – required if isCoBranded &#x3D; \&quot;true\&quot;. Not present otherwise__ 
        /// </summary>
        /// <value>Textual name of the co-brand partner. Required if CoBranded is true, not present otherwise.  &lt;br&gt;   __Max Length:128__&lt;br&gt; __Required: Conditional – required if isCoBranded &#x3D; \&quot;true\&quot;. Not present otherwise__ </value>
        [DataMember(Name="coBrandName", EmitDefaultValue=false)]
        public string CoBrandName { get; set; }

        /// <summary>
        /// The co-brand logo (if any) for this product. Provided as an Asset ID – use the Get Asset API to retrieve the actual asset. &lt;br&gt;   __Max Length:64__&lt;br&gt; __Required: No__ 
        /// </summary>
        /// <value>The co-brand logo (if any) for this product. Provided as an Asset ID – use the Get Asset API to retrieve the actual asset. &lt;br&gt;   __Max Length:64__&lt;br&gt; __Required: No__ </value>
        [DataMember(Name="coBrandLogoAssetId", EmitDefaultValue=false)]
        public string CoBrandLogoAssetId { get; set; }

        /// <summary>
        /// The card image used to represent the digital card in the wallet. This ‘combined’ option contains the MasterCard, bank and any co- brand logos.  Provided as an Asset ID – use the Get Asset API to retrieve the actual asset.     __Max Length:64__&lt;br&gt; __Required: Conditional – either CardBackgroundCombined or CardBackground will be provided__ 
        /// </summary>
        /// <value>The card image used to represent the digital card in the wallet. This ‘combined’ option contains the MasterCard, bank and any co- brand logos.  Provided as an Asset ID – use the Get Asset API to retrieve the actual asset.     __Max Length:64__&lt;br&gt; __Required: Conditional – either CardBackgroundCombined or CardBackground will be provided__ </value>
        [DataMember(Name="cardBackgroundCombinedAssetId", EmitDefaultValue=false)]
        public string CardBackgroundCombinedAssetId { get; set; }

        /// <summary>
        /// The card image used to represent the digital card in the wallet. This ‘non-combined’ option does not contain the MasterCard, bank, or co-brand logos. Provided as an Asset ID – use the Get Asset API to retrieve the actual asset. &lt;br&gt;     __Max Length:64__&lt;br&gt; __Required: Conditional – either CardBackgroundCombined or CardBackground will be provided__ 
        /// </summary>
        /// <value>The card image used to represent the digital card in the wallet. This ‘non-combined’ option does not contain the MasterCard, bank, or co-brand logos. Provided as an Asset ID – use the Get Asset API to retrieve the actual asset. &lt;br&gt;     __Max Length:64__&lt;br&gt; __Required: Conditional – either CardBackgroundCombined or CardBackground will be provided__ </value>
        [DataMember(Name="cardBackgroundAssetId", EmitDefaultValue=false)]
        public string CardBackgroundAssetId { get; set; }

        /// <summary>
        /// The icon representing the primary brand(s) associated with this product. Provided as an Asset ID – use the Get Asset API to retrieve the actual asset. Always returned in Product Configuration object&lt;br&gt;    __Max Length:64__&lt;br&gt; __Required: Yes__ 
        /// </summary>
        /// <value>The icon representing the primary brand(s) associated with this product. Provided as an Asset ID – use the Get Asset API to retrieve the actual asset. Always returned in Product Configuration object&lt;br&gt;    __Max Length:64__&lt;br&gt; __Required: Yes__ </value>
        [DataMember(Name="iconAssetId", EmitDefaultValue=false)]
        public string IconAssetId { get; set; }

        /// <summary>
        /// Foreground color, used to overlay text on top of the card image. Always returned in Product Configuration object&lt;br&gt;    __Max Length:6__ Hexadecimal RGB color format (case-insensitive).&lt;br&gt; __Required: Yes__ 
        /// </summary>
        /// <value>Foreground color, used to overlay text on top of the card image. Always returned in Product Configuration object&lt;br&gt;    __Max Length:6__ Hexadecimal RGB color format (case-insensitive).&lt;br&gt; __Required: Yes__ </value>
        [DataMember(Name="foregroundColor", EmitDefaultValue=false)]
        public string ForegroundColor { get; set; }

        /// <summary>
        /// Name of the issuing bank. Always returned in Product Configuration object &lt;br&gt;    __Max Length:64__&lt;br&gt; __Required: Yes__ 
        /// </summary>
        /// <value>Name of the issuing bank. Always returned in Product Configuration object &lt;br&gt;    __Max Length:64__&lt;br&gt; __Required: Yes__ </value>
        [DataMember(Name="issuerName", EmitDefaultValue=false)]
        public string IssuerName { get; set; }

        /// <summary>
        /// A short description for this product. Always returned in Product Configuration object  &lt;br&gt;   __Max Length:128__&lt;br&gt; __Required: Yes__ 
        /// </summary>
        /// <value>A short description for this product. Always returned in Product Configuration object  &lt;br&gt;   __Max Length:128__&lt;br&gt; __Required: Yes__ </value>
        [DataMember(Name="shortDescription", EmitDefaultValue=false)]
        public string ShortDescription { get; set; }

        /// <summary>
        /// A long description for this product.  &lt;br&gt;   __Max Length:256__&lt;br&gt; __Required: No__ 
        /// </summary>
        /// <value>A long description for this product.  &lt;br&gt;   __Max Length:256__&lt;br&gt; __Required: No__ </value>
        [DataMember(Name="longDescription", EmitDefaultValue=false)]
        public string LongDescription { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetDigitalAssetsResponseSchema {\n");
            sb.Append("  ResponseId: ").Append(ResponseId).Append("\n");
            sb.Append("  ResponseHost: ").Append(ResponseHost).Append("\n");
            sb.Append("  BrandLogoAssetId: ").Append(BrandLogoAssetId).Append("\n");
            sb.Append("  IssuerLogoAssetId: ").Append(IssuerLogoAssetId).Append("\n");
            sb.Append("  IsCoBranded: ").Append(IsCoBranded).Append("\n");
            sb.Append("  CoBrandName: ").Append(CoBrandName).Append("\n");
            sb.Append("  CoBrandLogoAssetId: ").Append(CoBrandLogoAssetId).Append("\n");
            sb.Append("  CardBackgroundCombinedAssetId: ").Append(CardBackgroundCombinedAssetId).Append("\n");
            sb.Append("  CardBackgroundAssetId: ").Append(CardBackgroundAssetId).Append("\n");
            sb.Append("  IconAssetId: ").Append(IconAssetId).Append("\n");
            sb.Append("  ForegroundColor: ").Append(ForegroundColor).Append("\n");
            sb.Append("  IssuerName: ").Append(IssuerName).Append("\n");
            sb.Append("  ShortDescription: ").Append(ShortDescription).Append("\n");
            sb.Append("  LongDescription: ").Append(LongDescription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetDigitalAssetsResponseSchema);
        }

        /// <summary>
        /// Returns true if GetDigitalAssetsResponseSchema instances are equal
        /// </summary>
        /// <param name="input">Instance of GetDigitalAssetsResponseSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetDigitalAssetsResponseSchema input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ResponseId == input.ResponseId ||
                    (this.ResponseId != null &&
                    this.ResponseId.Equals(input.ResponseId))
                ) && 
                (
                    this.ResponseHost == input.ResponseHost ||
                    (this.ResponseHost != null &&
                    this.ResponseHost.Equals(input.ResponseHost))
                ) && 
                (
                    this.BrandLogoAssetId == input.BrandLogoAssetId ||
                    (this.BrandLogoAssetId != null &&
                    this.BrandLogoAssetId.Equals(input.BrandLogoAssetId))
                ) && 
                (
                    this.IssuerLogoAssetId == input.IssuerLogoAssetId ||
                    (this.IssuerLogoAssetId != null &&
                    this.IssuerLogoAssetId.Equals(input.IssuerLogoAssetId))
                ) && 
                (
                    this.IsCoBranded == input.IsCoBranded ||
                    (this.IsCoBranded != null &&
                    this.IsCoBranded.Equals(input.IsCoBranded))
                ) && 
                (
                    this.CoBrandName == input.CoBrandName ||
                    (this.CoBrandName != null &&
                    this.CoBrandName.Equals(input.CoBrandName))
                ) && 
                (
                    this.CoBrandLogoAssetId == input.CoBrandLogoAssetId ||
                    (this.CoBrandLogoAssetId != null &&
                    this.CoBrandLogoAssetId.Equals(input.CoBrandLogoAssetId))
                ) && 
                (
                    this.CardBackgroundCombinedAssetId == input.CardBackgroundCombinedAssetId ||
                    (this.CardBackgroundCombinedAssetId != null &&
                    this.CardBackgroundCombinedAssetId.Equals(input.CardBackgroundCombinedAssetId))
                ) && 
                (
                    this.CardBackgroundAssetId == input.CardBackgroundAssetId ||
                    (this.CardBackgroundAssetId != null &&
                    this.CardBackgroundAssetId.Equals(input.CardBackgroundAssetId))
                ) && 
                (
                    this.IconAssetId == input.IconAssetId ||
                    (this.IconAssetId != null &&
                    this.IconAssetId.Equals(input.IconAssetId))
                ) && 
                (
                    this.ForegroundColor == input.ForegroundColor ||
                    (this.ForegroundColor != null &&
                    this.ForegroundColor.Equals(input.ForegroundColor))
                ) && 
                (
                    this.IssuerName == input.IssuerName ||
                    (this.IssuerName != null &&
                    this.IssuerName.Equals(input.IssuerName))
                ) && 
                (
                    this.ShortDescription == input.ShortDescription ||
                    (this.ShortDescription != null &&
                    this.ShortDescription.Equals(input.ShortDescription))
                ) && 
                (
                    this.LongDescription == input.LongDescription ||
                    (this.LongDescription != null &&
                    this.LongDescription.Equals(input.LongDescription))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ResponseId != null)
                    hashCode = hashCode * 59 + this.ResponseId.GetHashCode();
                if (this.ResponseHost != null)
                    hashCode = hashCode * 59 + this.ResponseHost.GetHashCode();
                if (this.BrandLogoAssetId != null)
                    hashCode = hashCode * 59 + this.BrandLogoAssetId.GetHashCode();
                if (this.IssuerLogoAssetId != null)
                    hashCode = hashCode * 59 + this.IssuerLogoAssetId.GetHashCode();
                if (this.IsCoBranded != null)
                    hashCode = hashCode * 59 + this.IsCoBranded.GetHashCode();
                if (this.CoBrandName != null)
                    hashCode = hashCode * 59 + this.CoBrandName.GetHashCode();
                if (this.CoBrandLogoAssetId != null)
                    hashCode = hashCode * 59 + this.CoBrandLogoAssetId.GetHashCode();
                if (this.CardBackgroundCombinedAssetId != null)
                    hashCode = hashCode * 59 + this.CardBackgroundCombinedAssetId.GetHashCode();
                if (this.CardBackgroundAssetId != null)
                    hashCode = hashCode * 59 + this.CardBackgroundAssetId.GetHashCode();
                if (this.IconAssetId != null)
                    hashCode = hashCode * 59 + this.IconAssetId.GetHashCode();
                if (this.ForegroundColor != null)
                    hashCode = hashCode * 59 + this.ForegroundColor.GetHashCode();
                if (this.IssuerName != null)
                    hashCode = hashCode * 59 + this.IssuerName.GetHashCode();
                if (this.ShortDescription != null)
                    hashCode = hashCode * 59 + this.ShortDescription.GetHashCode();
                if (this.LongDescription != null)
                    hashCode = hashCode * 59 + this.LongDescription.GetHashCode();
                return hashCode;
            }
        }
    }

}
