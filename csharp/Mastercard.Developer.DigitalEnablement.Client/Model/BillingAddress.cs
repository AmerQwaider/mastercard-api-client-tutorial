/* 
 * MDES for Merchants
 *
 * The MDES APIs are designed as RPC style stateless web services where each API endpoint represents an operation to be performed.  All request and response payloads are sent in the JSON (JavaScript Object Notation) data-interchange format. Each endpoint in the API specifies the HTTP Method used to access it. All strings in request and response objects are to be UTF-8 encoded.  Each API URI includes the major and minor version of API that it conforms to.  This will allow multiple concurrent versions of the API to be deployed simultaneously.  
 *
 * The version of the OpenAPI document: 1.2.7
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Mastercard.Developer.DigitalEnablement.Client.Client.OpenAPIDateConverter;

namespace Mastercard.Developer.DigitalEnablement.Client.Model
{
    /// <summary>
    /// BillingAddress
    /// </summary>
    [DataContract]
    public partial class BillingAddress :  IEquatable<BillingAddress>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BillingAddress" /> class.
        /// </summary>
        /// <param name="line1">__(OPTIONAL)__&lt;br&gt; The first line of the street address for the billing address.&lt;br&gt; __Max Length:64__ .</param>
        /// <param name="line2">__(OPTIONAL)__ The second line of the street address for the billing address.&lt;br&gt; __Max Length:64__ .</param>
        /// <param name="city">__(OPTIONAL)__&lt;br&gt; The city of the billing address.&lt;br&gt; __Max Length:32__ .</param>
        /// <param name="countrySubdivision">__(OPTIONAL)__&lt;br&gt; The state or country subdivision of the billing address.&lt;br&gt; __Max Length:12__ .</param>
        /// <param name="postalCode">__(OPTIONAL)__&lt;br&gt; The postal of code of the billing address.&lt;br&gt; __Max Length:16__ .</param>
        /// <param name="country">__(OPTIONAL)__ The country of the billing address. &lt;br&gt; __Max Length:3__ .</param>
        public BillingAddress(string line1 = default(string), string line2 = default(string), string city = default(string), string countrySubdivision = default(string), string postalCode = default(string), string country = default(string))
        {
            this.Line1 = line1;
            this.Line2 = line2;
            this.City = city;
            this.CountrySubdivision = countrySubdivision;
            this.PostalCode = postalCode;
            this.Country = country;
        }
        
        /// <summary>
        /// __(OPTIONAL)__&lt;br&gt; The first line of the street address for the billing address.&lt;br&gt; __Max Length:64__ 
        /// </summary>
        /// <value>__(OPTIONAL)__&lt;br&gt; The first line of the street address for the billing address.&lt;br&gt; __Max Length:64__ </value>
        [DataMember(Name="line1", EmitDefaultValue=false)]
        public string Line1 { get; set; }

        /// <summary>
        /// __(OPTIONAL)__ The second line of the street address for the billing address.&lt;br&gt; __Max Length:64__ 
        /// </summary>
        /// <value>__(OPTIONAL)__ The second line of the street address for the billing address.&lt;br&gt; __Max Length:64__ </value>
        [DataMember(Name="line2", EmitDefaultValue=false)]
        public string Line2 { get; set; }

        /// <summary>
        /// __(OPTIONAL)__&lt;br&gt; The city of the billing address.&lt;br&gt; __Max Length:32__ 
        /// </summary>
        /// <value>__(OPTIONAL)__&lt;br&gt; The city of the billing address.&lt;br&gt; __Max Length:32__ </value>
        [DataMember(Name="city", EmitDefaultValue=false)]
        public string City { get; set; }

        /// <summary>
        /// __(OPTIONAL)__&lt;br&gt; The state or country subdivision of the billing address.&lt;br&gt; __Max Length:12__ 
        /// </summary>
        /// <value>__(OPTIONAL)__&lt;br&gt; The state or country subdivision of the billing address.&lt;br&gt; __Max Length:12__ </value>
        [DataMember(Name="countrySubdivision", EmitDefaultValue=false)]
        public string CountrySubdivision { get; set; }

        /// <summary>
        /// __(OPTIONAL)__&lt;br&gt; The postal of code of the billing address.&lt;br&gt; __Max Length:16__ 
        /// </summary>
        /// <value>__(OPTIONAL)__&lt;br&gt; The postal of code of the billing address.&lt;br&gt; __Max Length:16__ </value>
        [DataMember(Name="postalCode", EmitDefaultValue=false)]
        public string PostalCode { get; set; }

        /// <summary>
        /// __(OPTIONAL)__ The country of the billing address. &lt;br&gt; __Max Length:3__ 
        /// </summary>
        /// <value>__(OPTIONAL)__ The country of the billing address. &lt;br&gt; __Max Length:3__ </value>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BillingAddress {\n");
            sb.Append("  Line1: ").Append(Line1).Append("\n");
            sb.Append("  Line2: ").Append(Line2).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  CountrySubdivision: ").Append(CountrySubdivision).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BillingAddress);
        }

        /// <summary>
        /// Returns true if BillingAddress instances are equal
        /// </summary>
        /// <param name="input">Instance of BillingAddress to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BillingAddress input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Line1 == input.Line1 ||
                    (this.Line1 != null &&
                    this.Line1.Equals(input.Line1))
                ) && 
                (
                    this.Line2 == input.Line2 ||
                    (this.Line2 != null &&
                    this.Line2.Equals(input.Line2))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.CountrySubdivision == input.CountrySubdivision ||
                    (this.CountrySubdivision != null &&
                    this.CountrySubdivision.Equals(input.CountrySubdivision))
                ) && 
                (
                    this.PostalCode == input.PostalCode ||
                    (this.PostalCode != null &&
                    this.PostalCode.Equals(input.PostalCode))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Line1 != null)
                    hashCode = hashCode * 59 + this.Line1.GetHashCode();
                if (this.Line2 != null)
                    hashCode = hashCode * 59 + this.Line2.GetHashCode();
                if (this.City != null)
                    hashCode = hashCode * 59 + this.City.GetHashCode();
                if (this.CountrySubdivision != null)
                    hashCode = hashCode * 59 + this.CountrySubdivision.GetHashCode();
                if (this.PostalCode != null)
                    hashCode = hashCode * 59 + this.PostalCode.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                return hashCode;
            }
        }
    }

}
