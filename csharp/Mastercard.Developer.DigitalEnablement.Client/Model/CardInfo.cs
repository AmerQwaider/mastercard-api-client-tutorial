/* 
 * MDES for Merchants
 *
 * The MDES APIs are designed as RPC style stateless web services where each API endpoint represents an operation to be performed.  All request and response payloads are sent in the JSON (JavaScript Object Notation) data-interchange format. Each endpoint in the API specifies the HTTP Method used to access it. All strings in request and response objects are to be UTF-8 encoded.  Each API URI includes the major and minor version of API that it conforms to.  This will allow multiple concurrent versions of the API to be deployed simultaneously.  
 *
 * The version of the OpenAPI document: 1.2.7
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Mastercard.Developer.DigitalEnablement.Client.Client.OpenAPIDateConverter;

namespace Mastercard.Developer.DigitalEnablement.Client.Model
{
    /// <summary>
    /// CardInfo
    /// </summary>
    [DataContract]
    public partial class CardInfo :  IEquatable<CardInfo>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CardInfo" /> class.
        /// </summary>
        /// <param name="panUniqueReference"> __(CONDITIONAL)__ &lt;br&gt;  For repeat digitizations, the unique reference allocated to the Primary Account Number. When supplied, the tokenUniqueReferenceForPanInfo, accountNumber, expiryMonth and expiryYear must be omitted from CardInfoData.   Only allowed if  tokenUniqueReferenceForPanInfo is not present and encrypted data does not contain the account information. &lt;br&gt; __Max Length:64__ .</param>
        /// <param name="tokenUniqueReferenceForPanInfo"> __(CONDITIONAL)__&lt;br&gt;  For repeat digitizations, the unique reference allocated to the token will be used to retrieve the account number and expiration date. When supplied, the panUniqueReference, accountNumber, expiryMonth and expiryYear must be omitted from CardInfoData.    Only allowed if panUniqueReference is not present and encrypted data does not contain the account information. &lt;br&gt; __Max Length:64__ .</param>
        /// <param name="publicKeyFingerprint">The fingerprint of the public key used to encrypt the ephemeral AES key. Required if encryptedData is present.&lt;br&gt;     __Max Length:64__ Hex-encoded data (case-insensitive). .</param>
        /// <param name="encryptedKey">One-time use AES key encrypted by the MasterCard public key (as identified by &#39;publicKeyFingerprint&#39;) using the OAEP or RSA Encryption Standard PKCS #1 v1.5  (depending on the value of &#39;oaepHashingAlgorithm&#39;. Requirement is for a 128-bit key (with 256-bit key supported as an option). Required if encrypted data is present. &lt;br&gt;   __Max Length:512__ Hex-encoded data (case-insensitive).\&quot; .</param>
        /// <param name="oaepHashingAlgorithm">Hashing algorithm used with the OAEP scheme. Must be either SHA256 or SHA512.     __Max Length:6__ .</param>
        /// <param name="iv">It is recommended to supply a random initialization vector when encrypting the data using the one-time use AES key. Must be exactly 16 bytes (32 character hex string) to match the block size. Hex-encoded data (case-insensitive).  &lt;br&gt;__Max Length:32__ .</param>
        /// <param name="encryptedData">encryptedData.</param>
        public CardInfo(string panUniqueReference = default(string), string tokenUniqueReferenceForPanInfo = default(string), string publicKeyFingerprint = default(string), string encryptedKey = default(string), string oaepHashingAlgorithm = default(string), string iv = default(string), CardInfoData encryptedData = default(CardInfoData))
        {
            this.PanUniqueReference = panUniqueReference;
            this.TokenUniqueReferenceForPanInfo = tokenUniqueReferenceForPanInfo;
            this.PublicKeyFingerprint = publicKeyFingerprint;
            this.EncryptedKey = encryptedKey;
            this.OaepHashingAlgorithm = oaepHashingAlgorithm;
            this.Iv = iv;
            this.EncryptedData = encryptedData;
        }
        
        /// <summary>
        ///  __(CONDITIONAL)__ &lt;br&gt;  For repeat digitizations, the unique reference allocated to the Primary Account Number. When supplied, the tokenUniqueReferenceForPanInfo, accountNumber, expiryMonth and expiryYear must be omitted from CardInfoData.   Only allowed if  tokenUniqueReferenceForPanInfo is not present and encrypted data does not contain the account information. &lt;br&gt; __Max Length:64__ 
        /// </summary>
        /// <value> __(CONDITIONAL)__ &lt;br&gt;  For repeat digitizations, the unique reference allocated to the Primary Account Number. When supplied, the tokenUniqueReferenceForPanInfo, accountNumber, expiryMonth and expiryYear must be omitted from CardInfoData.   Only allowed if  tokenUniqueReferenceForPanInfo is not present and encrypted data does not contain the account information. &lt;br&gt; __Max Length:64__ </value>
        [DataMember(Name="panUniqueReference", EmitDefaultValue=false)]
        public string PanUniqueReference { get; set; }

        /// <summary>
        ///  __(CONDITIONAL)__&lt;br&gt;  For repeat digitizations, the unique reference allocated to the token will be used to retrieve the account number and expiration date. When supplied, the panUniqueReference, accountNumber, expiryMonth and expiryYear must be omitted from CardInfoData.    Only allowed if panUniqueReference is not present and encrypted data does not contain the account information. &lt;br&gt; __Max Length:64__ 
        /// </summary>
        /// <value> __(CONDITIONAL)__&lt;br&gt;  For repeat digitizations, the unique reference allocated to the token will be used to retrieve the account number and expiration date. When supplied, the panUniqueReference, accountNumber, expiryMonth and expiryYear must be omitted from CardInfoData.    Only allowed if panUniqueReference is not present and encrypted data does not contain the account information. &lt;br&gt; __Max Length:64__ </value>
        [DataMember(Name="tokenUniqueReferenceForPanInfo", EmitDefaultValue=false)]
        public string TokenUniqueReferenceForPanInfo { get; set; }

        /// <summary>
        /// The fingerprint of the public key used to encrypt the ephemeral AES key. Required if encryptedData is present.&lt;br&gt;     __Max Length:64__ Hex-encoded data (case-insensitive). 
        /// </summary>
        /// <value>The fingerprint of the public key used to encrypt the ephemeral AES key. Required if encryptedData is present.&lt;br&gt;     __Max Length:64__ Hex-encoded data (case-insensitive). </value>
        [DataMember(Name="publicKeyFingerprint", EmitDefaultValue=false)]
        public string PublicKeyFingerprint { get; set; }

        /// <summary>
        /// One-time use AES key encrypted by the MasterCard public key (as identified by &#39;publicKeyFingerprint&#39;) using the OAEP or RSA Encryption Standard PKCS #1 v1.5  (depending on the value of &#39;oaepHashingAlgorithm&#39;. Requirement is for a 128-bit key (with 256-bit key supported as an option). Required if encrypted data is present. &lt;br&gt;   __Max Length:512__ Hex-encoded data (case-insensitive).\&quot; 
        /// </summary>
        /// <value>One-time use AES key encrypted by the MasterCard public key (as identified by &#39;publicKeyFingerprint&#39;) using the OAEP or RSA Encryption Standard PKCS #1 v1.5  (depending on the value of &#39;oaepHashingAlgorithm&#39;. Requirement is for a 128-bit key (with 256-bit key supported as an option). Required if encrypted data is present. &lt;br&gt;   __Max Length:512__ Hex-encoded data (case-insensitive).\&quot; </value>
        [DataMember(Name="encryptedKey", EmitDefaultValue=false)]
        public string EncryptedKey { get; set; }

        /// <summary>
        /// Hashing algorithm used with the OAEP scheme. Must be either SHA256 or SHA512.     __Max Length:6__ 
        /// </summary>
        /// <value>Hashing algorithm used with the OAEP scheme. Must be either SHA256 or SHA512.     __Max Length:6__ </value>
        [DataMember(Name="oaepHashingAlgorithm", EmitDefaultValue=false)]
        public string OaepHashingAlgorithm { get; set; }

        /// <summary>
        /// It is recommended to supply a random initialization vector when encrypting the data using the one-time use AES key. Must be exactly 16 bytes (32 character hex string) to match the block size. Hex-encoded data (case-insensitive).  &lt;br&gt;__Max Length:32__ 
        /// </summary>
        /// <value>It is recommended to supply a random initialization vector when encrypting the data using the one-time use AES key. Must be exactly 16 bytes (32 character hex string) to match the block size. Hex-encoded data (case-insensitive).  &lt;br&gt;__Max Length:32__ </value>
        [DataMember(Name="iv", EmitDefaultValue=false)]
        public string Iv { get; set; }

        /// <summary>
        /// Gets or Sets EncryptedData
        /// </summary>
        [DataMember(Name="encryptedData", EmitDefaultValue=false)]
        public CardInfoData EncryptedData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CardInfo {\n");
            sb.Append("  PanUniqueReference: ").Append(PanUniqueReference).Append("\n");
            sb.Append("  TokenUniqueReferenceForPanInfo: ").Append(TokenUniqueReferenceForPanInfo).Append("\n");
            sb.Append("  PublicKeyFingerprint: ").Append(PublicKeyFingerprint).Append("\n");
            sb.Append("  EncryptedKey: ").Append(EncryptedKey).Append("\n");
            sb.Append("  OaepHashingAlgorithm: ").Append(OaepHashingAlgorithm).Append("\n");
            sb.Append("  Iv: ").Append(Iv).Append("\n");
            sb.Append("  EncryptedData: ").Append(EncryptedData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CardInfo);
        }

        /// <summary>
        /// Returns true if CardInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of CardInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CardInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PanUniqueReference == input.PanUniqueReference ||
                    (this.PanUniqueReference != null &&
                    this.PanUniqueReference.Equals(input.PanUniqueReference))
                ) && 
                (
                    this.TokenUniqueReferenceForPanInfo == input.TokenUniqueReferenceForPanInfo ||
                    (this.TokenUniqueReferenceForPanInfo != null &&
                    this.TokenUniqueReferenceForPanInfo.Equals(input.TokenUniqueReferenceForPanInfo))
                ) && 
                (
                    this.PublicKeyFingerprint == input.PublicKeyFingerprint ||
                    (this.PublicKeyFingerprint != null &&
                    this.PublicKeyFingerprint.Equals(input.PublicKeyFingerprint))
                ) && 
                (
                    this.EncryptedKey == input.EncryptedKey ||
                    (this.EncryptedKey != null &&
                    this.EncryptedKey.Equals(input.EncryptedKey))
                ) && 
                (
                    this.OaepHashingAlgorithm == input.OaepHashingAlgorithm ||
                    (this.OaepHashingAlgorithm != null &&
                    this.OaepHashingAlgorithm.Equals(input.OaepHashingAlgorithm))
                ) && 
                (
                    this.Iv == input.Iv ||
                    (this.Iv != null &&
                    this.Iv.Equals(input.Iv))
                ) && 
                (
                    this.EncryptedData == input.EncryptedData ||
                    (this.EncryptedData != null &&
                    this.EncryptedData.Equals(input.EncryptedData))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PanUniqueReference != null)
                    hashCode = hashCode * 59 + this.PanUniqueReference.GetHashCode();
                if (this.TokenUniqueReferenceForPanInfo != null)
                    hashCode = hashCode * 59 + this.TokenUniqueReferenceForPanInfo.GetHashCode();
                if (this.PublicKeyFingerprint != null)
                    hashCode = hashCode * 59 + this.PublicKeyFingerprint.GetHashCode();
                if (this.EncryptedKey != null)
                    hashCode = hashCode * 59 + this.EncryptedKey.GetHashCode();
                if (this.OaepHashingAlgorithm != null)
                    hashCode = hashCode * 59 + this.OaepHashingAlgorithm.GetHashCode();
                if (this.Iv != null)
                    hashCode = hashCode * 59 + this.Iv.GetHashCode();
                if (this.EncryptedData != null)
                    hashCode = hashCode * 59 + this.EncryptedData.GetHashCode();
                return hashCode;
            }
        }
    }

}
