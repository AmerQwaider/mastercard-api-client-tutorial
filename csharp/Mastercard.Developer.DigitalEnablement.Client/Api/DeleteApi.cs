/* 
 * MDES for Merchants
 *
 * The MDES APIs are designed as RPC style stateless web services where each API endpoint represents an operation to be performed.  All request and response payloads are sent in the JSON (JavaScript Object Notation) data-interchange format. Each endpoint in the API specifies the HTTP Method used to access it. All strings in request and response objects are to be UTF-8 encoded.  Each API URI includes the major and minor version of API that it conforms to.  This will allow multiple concurrent versions of the API to be deployed simultaneously.  
 *
 * The version of the OpenAPI document: 1.2.7
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Mastercard.Developer.DigitalEnablement.Client.Client;
using Mastercard.Developer.DigitalEnablement.Client.Model;

namespace Mastercard.Developer.DigitalEnablement.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDeleteApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Used to delete one or more Tokens. The API is limited to 10 Tokens per request.
        /// </summary>
        /// <remarks>
        /// This API is used to delete one or more Tokens.  The API is limited to 10 Tokens per request. MDES will coordinate the deactivation of the Tokens and notify any relevant parties that the Tokens have now been deactivated. 
        /// </remarks>
        /// <exception cref="Mastercard.Developer.DigitalEnablement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteRequestSchema">Contains the details of the request message.  (optional)</param>
        /// <returns>DeleteResponseSchema</returns>
        DeleteResponseSchema DeleteDigitization (DeleteRequestSchema deleteRequestSchema = null);

        /// <summary>
        /// Used to delete one or more Tokens. The API is limited to 10 Tokens per request.
        /// </summary>
        /// <remarks>
        /// This API is used to delete one or more Tokens.  The API is limited to 10 Tokens per request. MDES will coordinate the deactivation of the Tokens and notify any relevant parties that the Tokens have now been deactivated. 
        /// </remarks>
        /// <exception cref="Mastercard.Developer.DigitalEnablement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteRequestSchema">Contains the details of the request message.  (optional)</param>
        /// <returns>ApiResponse of DeleteResponseSchema</returns>
        ApiResponse<DeleteResponseSchema> DeleteDigitizationWithHttpInfo (DeleteRequestSchema deleteRequestSchema = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Used to delete one or more Tokens. The API is limited to 10 Tokens per request.
        /// </summary>
        /// <remarks>
        /// This API is used to delete one or more Tokens.  The API is limited to 10 Tokens per request. MDES will coordinate the deactivation of the Tokens and notify any relevant parties that the Tokens have now been deactivated. 
        /// </remarks>
        /// <exception cref="Mastercard.Developer.DigitalEnablement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteRequestSchema">Contains the details of the request message.  (optional)</param>
        /// <returns>Task of DeleteResponseSchema</returns>
        System.Threading.Tasks.Task<DeleteResponseSchema> DeleteDigitizationAsync (DeleteRequestSchema deleteRequestSchema = null);

        /// <summary>
        /// Used to delete one or more Tokens. The API is limited to 10 Tokens per request.
        /// </summary>
        /// <remarks>
        /// This API is used to delete one or more Tokens.  The API is limited to 10 Tokens per request. MDES will coordinate the deactivation of the Tokens and notify any relevant parties that the Tokens have now been deactivated. 
        /// </remarks>
        /// <exception cref="Mastercard.Developer.DigitalEnablement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteRequestSchema">Contains the details of the request message.  (optional)</param>
        /// <returns>Task of ApiResponse (DeleteResponseSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteResponseSchema>> DeleteDigitizationAsyncWithHttpInfo (DeleteRequestSchema deleteRequestSchema = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DeleteApi : IDeleteApi
    {
        private Mastercard.Developer.DigitalEnablement.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DeleteApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DeleteApi(String basePath)
        {
            this.Configuration = new Mastercard.Developer.DigitalEnablement.Client.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Mastercard.Developer.DigitalEnablement.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeleteApi"/> class
        /// </summary>
        /// <returns></returns>
        public DeleteApi()
        {
            this.Configuration = Mastercard.Developer.DigitalEnablement.Client.Client.Configuration.Default;

            ExceptionFactory = Mastercard.Developer.DigitalEnablement.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeleteApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DeleteApi(Mastercard.Developer.DigitalEnablement.Client.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Mastercard.Developer.DigitalEnablement.Client.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Mastercard.Developer.DigitalEnablement.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Mastercard.Developer.DigitalEnablement.Client.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Mastercard.Developer.DigitalEnablement.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Used to delete one or more Tokens. The API is limited to 10 Tokens per request. This API is used to delete one or more Tokens.  The API is limited to 10 Tokens per request. MDES will coordinate the deactivation of the Tokens and notify any relevant parties that the Tokens have now been deactivated. 
        /// </summary>
        /// <exception cref="Mastercard.Developer.DigitalEnablement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteRequestSchema">Contains the details of the request message.  (optional)</param>
        /// <returns>DeleteResponseSchema</returns>
        public DeleteResponseSchema DeleteDigitization (DeleteRequestSchema deleteRequestSchema = null)
        {
             ApiResponse<DeleteResponseSchema> localVarResponse = DeleteDigitizationWithHttpInfo(deleteRequestSchema);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Used to delete one or more Tokens. The API is limited to 10 Tokens per request. This API is used to delete one or more Tokens.  The API is limited to 10 Tokens per request. MDES will coordinate the deactivation of the Tokens and notify any relevant parties that the Tokens have now been deactivated. 
        /// </summary>
        /// <exception cref="Mastercard.Developer.DigitalEnablement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteRequestSchema">Contains the details of the request message.  (optional)</param>
        /// <returns>ApiResponse of DeleteResponseSchema</returns>
        public ApiResponse< DeleteResponseSchema > DeleteDigitizationWithHttpInfo (DeleteRequestSchema deleteRequestSchema = null)
        {

            var localVarPath = "./digitization/static/1/0/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deleteRequestSchema != null && deleteRequestSchema.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteRequestSchema); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteRequestSchema; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDigitization", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteResponseSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (DeleteResponseSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteResponseSchema)));
        }

        /// <summary>
        /// Used to delete one or more Tokens. The API is limited to 10 Tokens per request. This API is used to delete one or more Tokens.  The API is limited to 10 Tokens per request. MDES will coordinate the deactivation of the Tokens and notify any relevant parties that the Tokens have now been deactivated. 
        /// </summary>
        /// <exception cref="Mastercard.Developer.DigitalEnablement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteRequestSchema">Contains the details of the request message.  (optional)</param>
        /// <returns>Task of DeleteResponseSchema</returns>
        public async System.Threading.Tasks.Task<DeleteResponseSchema> DeleteDigitizationAsync (DeleteRequestSchema deleteRequestSchema = null)
        {
             ApiResponse<DeleteResponseSchema> localVarResponse = await DeleteDigitizationAsyncWithHttpInfo(deleteRequestSchema);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Used to delete one or more Tokens. The API is limited to 10 Tokens per request. This API is used to delete one or more Tokens.  The API is limited to 10 Tokens per request. MDES will coordinate the deactivation of the Tokens and notify any relevant parties that the Tokens have now been deactivated. 
        /// </summary>
        /// <exception cref="Mastercard.Developer.DigitalEnablement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteRequestSchema">Contains the details of the request message.  (optional)</param>
        /// <returns>Task of ApiResponse (DeleteResponseSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeleteResponseSchema>> DeleteDigitizationAsyncWithHttpInfo (DeleteRequestSchema deleteRequestSchema = null)
        {

            var localVarPath = "./digitization/static/1/0/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deleteRequestSchema != null && deleteRequestSchema.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteRequestSchema); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteRequestSchema; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDigitization", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteResponseSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (DeleteResponseSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteResponseSchema)));
        }

    }
}
