# coding: utf-8

"""
    MDES for Merchants

    The MDES APIs are designed as RPC style stateless web services where each API endpoint represents an operation to be performed.  All request and response payloads are sent in the JSON (JavaScript Object Notation) data-interchange format. Each endpoint in the API specifies the HTTP Method used to access it. All strings in request and response objects are to be UTF-8 encoded.  Each API URI includes the major and minor version of API that it conforms to.  This will allow multiple concurrent versions of the API to be deployed simultaneously.    # noqa: E501

    The version of the OpenAPI document: 1.2.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class AuthenticationMethods(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'type': 'str',
        'value': 'str'
    }

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'value': 'value'
    }

    def __init__(self, id=None, type=None, value=None):  # noqa: E501
        """AuthenticationMethods - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._type = None
        self._value = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if value is not None:
            self.value = value

    @property
    def id(self):
        """Gets the id of this AuthenticationMethods.  # noqa: E501

        Unique identifier assigned to this Authentication Method.   # noqa: E501

        :return: The id of this AuthenticationMethods.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AuthenticationMethods.

        Unique identifier assigned to this Authentication Method.   # noqa: E501

        :param id: The id of this AuthenticationMethods.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this AuthenticationMethods.  # noqa: E501

        Specifies the authentication method type and provided in the tokenize response.  See table here - https://developer.mastercard.com/page/mdes-digitization-authentication-method-codes   # noqa: E501

        :return: The type of this AuthenticationMethods.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AuthenticationMethods.

        Specifies the authentication method type and provided in the tokenize response.  See table here - https://developer.mastercard.com/page/mdes-digitization-authentication-method-codes   # noqa: E501

        :param type: The type of this AuthenticationMethods.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def value(self):
        """Gets the value of this AuthenticationMethods.  # noqa: E501

        Specifies the authentication method value (meaning varies depending on the authentication method type).   # noqa: E501

        :return: The value of this AuthenticationMethods.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this AuthenticationMethods.

        Specifies the authentication method value (meaning varies depending on the authentication method type).   # noqa: E501

        :param value: The value of this AuthenticationMethods.  # noqa: E501
        :type: str
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthenticationMethods):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
