# coding: utf-8

"""
    MDES for Merchants

    The MDES APIs are designed as RPC style stateless web services where each API endpoint represents an operation to be performed.  All request and response payloads are sent in the JSON (JavaScript Object Notation) data-interchange format. Each endpoint in the API specifies the HTTP Method used to access it. All strings in request and response objects are to be UTF-8 encoded.  Each API URI includes the major and minor version of API that it conforms to.  This will allow multiple concurrent versions of the API to be deployed simultaneously. <br> __Authentication__ Mastercard uses OAuth 1.0a with body hash extension for authenticating the API clients. This requires every request that you send to  Mastercard to be signed with an RSA private key. A private-public RSA key pair must be generated consisting of: <br> 1 . A private key for the OAuth signature for API requests. It is recommended to keep the private key in a password-protected or hardware keystore. <br> 2. A public key is shared with Mastercard during the project setup process through either a certificate signing request (CSR) or the API Key Generator. Mastercard will use the public key to verify the OAuth signature that is provided on every API call.<br>  An OAUTH1.0a signer library is available on [GitHub](https://github.com/Mastercard/oauth1-signer-java) <br>  __Encryption__<br>  All communications between Issuer web service and the Mastercard gateway is encrypted using TLS. <br> __Additional Encryption of Sensitive Data__ In addition to the OAuth authentication, when using MDES Digital Enablement Service, any PCI sensitive and all account holder Personally Identifiable Information (PII) data must be encrypted. This requirement applies to the API fields containing encryptedData. Sensitive data is encrypted using a symmetric session (one-time-use) key. The symmetric session key is then wrapped with an RSA Public Key supplied by Mastercard during API setup phase (the Customer Encryption Key). <br>  Java Client Encryption Library available on [GitHub](https://github.com/Mastercard/client-encryption-java)   # noqa: E501

    The version of the OpenAPI document: 1.2.10
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class AccountHolderDataOutbound(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'account_holder_name': 'str',
        'account_holder_address': 'BillingAddress',
        'account_holder_email_address': 'str',
        'account_holder_mobile_phone_number': 'PhoneNumber'
    }

    attribute_map = {
        'account_holder_name': 'accountHolderName',
        'account_holder_address': 'accountHolderAddress',
        'account_holder_email_address': 'accountHolderEmailAddress',
        'account_holder_mobile_phone_number': 'accountHolderMobilePhoneNumber'
    }

    def __init__(self, account_holder_name=None, account_holder_address=None, account_holder_email_address=None, account_holder_mobile_phone_number=None, local_vars_configuration=None):  # noqa: E501
        """AccountHolderDataOutbound - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._account_holder_name = None
        self._account_holder_address = None
        self._account_holder_email_address = None
        self._account_holder_mobile_phone_number = None
        self.discriminator = None

        if account_holder_name is not None:
            self.account_holder_name = account_holder_name
        if account_holder_address is not None:
            self.account_holder_address = account_holder_address
        if account_holder_email_address is not None:
            self.account_holder_email_address = account_holder_email_address
        if account_holder_mobile_phone_number is not None:
            self.account_holder_mobile_phone_number = account_holder_mobile_phone_number

    @property
    def account_holder_name(self):
        """Gets the account_holder_name of this AccountHolderDataOutbound.  # noqa: E501

        __(OPTIONAL)__ The name of the cardholder<br> __Max Length:27__   # noqa: E501

        :return: The account_holder_name of this AccountHolderDataOutbound.  # noqa: E501
        :rtype: str
        """
        return self._account_holder_name

    @account_holder_name.setter
    def account_holder_name(self, account_holder_name):
        """Sets the account_holder_name of this AccountHolderDataOutbound.

        __(OPTIONAL)__ The name of the cardholder<br> __Max Length:27__   # noqa: E501

        :param account_holder_name: The account_holder_name of this AccountHolderDataOutbound.  # noqa: E501
        :type: str
        """

        self._account_holder_name = account_holder_name

    @property
    def account_holder_address(self):
        """Gets the account_holder_address of this AccountHolderDataOutbound.  # noqa: E501


        :return: The account_holder_address of this AccountHolderDataOutbound.  # noqa: E501
        :rtype: BillingAddress
        """
        return self._account_holder_address

    @account_holder_address.setter
    def account_holder_address(self, account_holder_address):
        """Sets the account_holder_address of this AccountHolderDataOutbound.


        :param account_holder_address: The account_holder_address of this AccountHolderDataOutbound.  # noqa: E501
        :type: BillingAddress
        """

        self._account_holder_address = account_holder_address

    @property
    def account_holder_email_address(self):
        """Gets the account_holder_email_address of this AccountHolderDataOutbound.  # noqa: E501

        __(OPTIONAL)__ The e-mail address of the Account Holder<br> __Max Length:320__   # noqa: E501

        :return: The account_holder_email_address of this AccountHolderDataOutbound.  # noqa: E501
        :rtype: str
        """
        return self._account_holder_email_address

    @account_holder_email_address.setter
    def account_holder_email_address(self, account_holder_email_address):
        """Sets the account_holder_email_address of this AccountHolderDataOutbound.

        __(OPTIONAL)__ The e-mail address of the Account Holder<br> __Max Length:320__   # noqa: E501

        :param account_holder_email_address: The account_holder_email_address of this AccountHolderDataOutbound.  # noqa: E501
        :type: str
        """

        self._account_holder_email_address = account_holder_email_address

    @property
    def account_holder_mobile_phone_number(self):
        """Gets the account_holder_mobile_phone_number of this AccountHolderDataOutbound.  # noqa: E501


        :return: The account_holder_mobile_phone_number of this AccountHolderDataOutbound.  # noqa: E501
        :rtype: PhoneNumber
        """
        return self._account_holder_mobile_phone_number

    @account_holder_mobile_phone_number.setter
    def account_holder_mobile_phone_number(self, account_holder_mobile_phone_number):
        """Sets the account_holder_mobile_phone_number of this AccountHolderDataOutbound.


        :param account_holder_mobile_phone_number: The account_holder_mobile_phone_number of this AccountHolderDataOutbound.  # noqa: E501
        :type: PhoneNumber
        """

        self._account_holder_mobile_phone_number = account_holder_mobile_phone_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountHolderDataOutbound):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AccountHolderDataOutbound):
            return True

        return self.to_dict() != other.to_dict()
