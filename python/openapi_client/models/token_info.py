# coding: utf-8

"""
    MDES for Merchants

    The MDES APIs are designed as RPC style stateless web services where each API endpoint represents an operation to be performed.  All request and response payloads are sent in the JSON (JavaScript Object Notation) data-interchange format. Each endpoint in the API specifies the HTTP Method used to access it. All strings in request and response objects are to be UTF-8 encoded.  Each API URI includes the major and minor version of API that it conforms to.  This will allow multiple concurrent versions of the API to be deployed simultaneously.    # noqa: E501

    The version of the OpenAPI document: 1.2.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class TokenInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'token_pan_suffix': 'str',
        'account_pan_suffix': 'str',
        'token_expiry': 'str',
        'account_pan_expiry': 'str',
        'dsrp_capable': 'str',
        'token_assurance_level': 'str',
        'product_category': 'str'
    }

    attribute_map = {
        'token_pan_suffix': 'tokenPanSuffix',
        'account_pan_suffix': 'accountPanSuffix',
        'token_expiry': 'tokenExpiry',
        'account_pan_expiry': 'accountPanExpiry',
        'dsrp_capable': 'dsrpCapable',
        'token_assurance_level': 'tokenAssuranceLevel',
        'product_category': 'productCategory'
    }

    def __init__(self, token_pan_suffix=None, account_pan_suffix=None, token_expiry=None, account_pan_expiry=None, dsrp_capable=None, token_assurance_level=None, product_category=None):  # noqa: E501
        """TokenInfo - a model defined in OpenAPI"""  # noqa: E501

        self._token_pan_suffix = None
        self._account_pan_suffix = None
        self._token_expiry = None
        self._account_pan_expiry = None
        self._dsrp_capable = None
        self._token_assurance_level = None
        self._product_category = None
        self.discriminator = None

        if token_pan_suffix is not None:
            self.token_pan_suffix = token_pan_suffix
        if account_pan_suffix is not None:
            self.account_pan_suffix = account_pan_suffix
        if token_expiry is not None:
            self.token_expiry = token_expiry
        if account_pan_expiry is not None:
            self.account_pan_expiry = account_pan_expiry
        if dsrp_capable is not None:
            self.dsrp_capable = dsrp_capable
        if token_assurance_level is not None:
            self.token_assurance_level = token_assurance_level
        if product_category is not None:
            self.product_category = product_category

    @property
    def token_pan_suffix(self):
        """Gets the token_pan_suffix of this TokenInfo.  # noqa: E501

        The last few digits (typically four) of the Token PAN.<br>     __Max Length:8__<br> __Required: Yes__   # noqa: E501

        :return: The token_pan_suffix of this TokenInfo.  # noqa: E501
        :rtype: str
        """
        return self._token_pan_suffix

    @token_pan_suffix.setter
    def token_pan_suffix(self, token_pan_suffix):
        """Sets the token_pan_suffix of this TokenInfo.

        The last few digits (typically four) of the Token PAN.<br>     __Max Length:8__<br> __Required: Yes__   # noqa: E501

        :param token_pan_suffix: The token_pan_suffix of this TokenInfo.  # noqa: E501
        :type: str
        """

        self._token_pan_suffix = token_pan_suffix

    @property
    def account_pan_suffix(self):
        """Gets the account_pan_suffix of this TokenInfo.  # noqa: E501

        The last few digits (typically four) of the Account PAN.<br>     __Max Length:8__<br> __Required: Yes__   # noqa: E501

        :return: The account_pan_suffix of this TokenInfo.  # noqa: E501
        :rtype: str
        """
        return self._account_pan_suffix

    @account_pan_suffix.setter
    def account_pan_suffix(self, account_pan_suffix):
        """Sets the account_pan_suffix of this TokenInfo.

        The last few digits (typically four) of the Account PAN.<br>     __Max Length:8__<br> __Required: Yes__   # noqa: E501

        :param account_pan_suffix: The account_pan_suffix of this TokenInfo.  # noqa: E501
        :type: str
        """

        self._account_pan_suffix = account_pan_suffix

    @property
    def token_expiry(self):
        """Gets the token_expiry of this TokenInfo.  # noqa: E501

        The expiry of the Token PAN, given in MMYY format.<br>     __Max Length:4__<br> __Required: Yes__   # noqa: E501

        :return: The token_expiry of this TokenInfo.  # noqa: E501
        :rtype: str
        """
        return self._token_expiry

    @token_expiry.setter
    def token_expiry(self, token_expiry):
        """Sets the token_expiry of this TokenInfo.

        The expiry of the Token PAN, given in MMYY format.<br>     __Max Length:4__<br> __Required: Yes__   # noqa: E501

        :param token_expiry: The token_expiry of this TokenInfo.  # noqa: E501
        :type: str
        """

        self._token_expiry = token_expiry

    @property
    def account_pan_expiry(self):
        """Gets the account_pan_expiry of this TokenInfo.  # noqa: E501

        The expiry of the Token PAN, given in MMYY format. <br> __Max Length: 4__<br> __Required: No__   # noqa: E501

        :return: The account_pan_expiry of this TokenInfo.  # noqa: E501
        :rtype: str
        """
        return self._account_pan_expiry

    @account_pan_expiry.setter
    def account_pan_expiry(self, account_pan_expiry):
        """Sets the account_pan_expiry of this TokenInfo.

        The expiry of the Token PAN, given in MMYY format. <br> __Max Length: 4__<br> __Required: No__   # noqa: E501

        :param account_pan_expiry: The account_pan_expiry of this TokenInfo.  # noqa: E501
        :type: str
        """

        self._account_pan_expiry = account_pan_expiry

    @property
    def dsrp_capable(self):
        """Gets the dsrp_capable of this TokenInfo.  # noqa: E501

        Whether DSRP transactions are supported by this Token. Must be either 'true' (DSRP capable) or 'false' (Not DSRP capable).<br> __Max Length: 5__<br> __Required: Yes__   # noqa: E501

        :return: The dsrp_capable of this TokenInfo.  # noqa: E501
        :rtype: str
        """
        return self._dsrp_capable

    @dsrp_capable.setter
    def dsrp_capable(self, dsrp_capable):
        """Sets the dsrp_capable of this TokenInfo.

        Whether DSRP transactions are supported by this Token. Must be either 'true' (DSRP capable) or 'false' (Not DSRP capable).<br> __Max Length: 5__<br> __Required: Yes__   # noqa: E501

        :param dsrp_capable: The dsrp_capable of this TokenInfo.  # noqa: E501
        :type: str
        """

        self._dsrp_capable = dsrp_capable

    @property
    def token_assurance_level(self):
        """Gets the token_assurance_level of this TokenInfo.  # noqa: E501

        A value indicating the confidence level of the token to Account PAN binding.<br>     __Max Length:2__<br> __Required: No__   # noqa: E501

        :return: The token_assurance_level of this TokenInfo.  # noqa: E501
        :rtype: str
        """
        return self._token_assurance_level

    @token_assurance_level.setter
    def token_assurance_level(self, token_assurance_level):
        """Sets the token_assurance_level of this TokenInfo.

        A value indicating the confidence level of the token to Account PAN binding.<br>     __Max Length:2__<br> __Required: No__   # noqa: E501

        :param token_assurance_level: The token_assurance_level of this TokenInfo.  # noqa: E501
        :type: str
        """

        self._token_assurance_level = token_assurance_level

    @property
    def product_category(self):
        """Gets the product_category of this TokenInfo.  # noqa: E501

        The product category of the Account PAN. When supplied will be one of the following values -  * CREDIT * DEBIT * PREPAID * UNKNOWN  __Max Length: 32__<br> __Required: No__   # noqa: E501

        :return: The product_category of this TokenInfo.  # noqa: E501
        :rtype: str
        """
        return self._product_category

    @product_category.setter
    def product_category(self, product_category):
        """Sets the product_category of this TokenInfo.

        The product category of the Account PAN. When supplied will be one of the following values -  * CREDIT * DEBIT * PREPAID * UNKNOWN  __Max Length: 32__<br> __Required: No__   # noqa: E501

        :param product_category: The product_category of this TokenInfo.  # noqa: E501
        :type: str
        """

        self._product_category = product_category

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TokenInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
