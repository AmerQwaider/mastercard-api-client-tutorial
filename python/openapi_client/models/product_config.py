# coding: utf-8

"""
    MDES for Merchants

    The MDES APIs are designed as RPC style stateless web services where each API endpoint represents an operation to be performed.  All request and response payloads are sent in the JSON (JavaScript Object Notation) data-interchange format. Each endpoint in the API specifies the HTTP Method used to access it. All strings in request and response objects are to be UTF-8 encoded.  Each API URI includes the major and minor version of API that it conforms to.  This will allow multiple concurrent versions of the API to be deployed simultaneously.    # noqa: E501

    The version of the OpenAPI document: 1.2.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ProductConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'brand_logo_asset_id': 'str',
        'issuer_logo_asset_id': 'str',
        'is_co_branded': 'str',
        'co_brand_name': 'str',
        'co_brand_logo_asset_id': 'str',
        'card_background_combined_asset_id': 'str',
        'card_background_asset_id': 'str',
        'icon_asset_id': 'str',
        'foreground_color': 'str',
        'issuer_name': 'str',
        'short_description': 'str',
        'long_description': 'str',
        'customer_service_url': 'str',
        'customer_service_email': 'str',
        'customer_service_phone_number': 'str',
        'issuer_mobile_app': 'object',
        'online_banking_login_url': 'str',
        'terms_and_conditions_url': 'str',
        'privacy_policy_url': 'str',
        'issuer_product_config_code': 'str'
    }

    attribute_map = {
        'brand_logo_asset_id': 'brandLogoAssetId',
        'issuer_logo_asset_id': 'issuerLogoAssetId',
        'is_co_branded': 'isCoBranded',
        'co_brand_name': 'coBrandName',
        'co_brand_logo_asset_id': 'coBrandLogoAssetId',
        'card_background_combined_asset_id': 'cardBackgroundCombinedAssetId',
        'card_background_asset_id': 'cardBackgroundAssetId',
        'icon_asset_id': 'iconAssetId',
        'foreground_color': 'foregroundColor',
        'issuer_name': 'issuerName',
        'short_description': 'shortDescription',
        'long_description': 'longDescription',
        'customer_service_url': 'customerServiceUrl',
        'customer_service_email': 'customerServiceEmail',
        'customer_service_phone_number': 'customerServicePhoneNumber',
        'issuer_mobile_app': 'issuerMobileApp',
        'online_banking_login_url': 'onlineBankingLoginUrl',
        'terms_and_conditions_url': 'termsAndConditionsUrl',
        'privacy_policy_url': 'privacyPolicyUrl',
        'issuer_product_config_code': 'issuerProductConfigCode'
    }

    def __init__(self, brand_logo_asset_id=None, issuer_logo_asset_id=None, is_co_branded=None, co_brand_name=None, co_brand_logo_asset_id=None, card_background_combined_asset_id=None, card_background_asset_id=None, icon_asset_id=None, foreground_color=None, issuer_name=None, short_description=None, long_description=None, customer_service_url=None, customer_service_email=None, customer_service_phone_number=None, issuer_mobile_app=None, online_banking_login_url=None, terms_and_conditions_url=None, privacy_policy_url=None, issuer_product_config_code=None):  # noqa: E501
        """ProductConfig - a model defined in OpenAPI"""  # noqa: E501

        self._brand_logo_asset_id = None
        self._issuer_logo_asset_id = None
        self._is_co_branded = None
        self._co_brand_name = None
        self._co_brand_logo_asset_id = None
        self._card_background_combined_asset_id = None
        self._card_background_asset_id = None
        self._icon_asset_id = None
        self._foreground_color = None
        self._issuer_name = None
        self._short_description = None
        self._long_description = None
        self._customer_service_url = None
        self._customer_service_email = None
        self._customer_service_phone_number = None
        self._issuer_mobile_app = None
        self._online_banking_login_url = None
        self._terms_and_conditions_url = None
        self._privacy_policy_url = None
        self._issuer_product_config_code = None
        self.discriminator = None

        if brand_logo_asset_id is not None:
            self.brand_logo_asset_id = brand_logo_asset_id
        if issuer_logo_asset_id is not None:
            self.issuer_logo_asset_id = issuer_logo_asset_id
        if is_co_branded is not None:
            self.is_co_branded = is_co_branded
        if co_brand_name is not None:
            self.co_brand_name = co_brand_name
        if co_brand_logo_asset_id is not None:
            self.co_brand_logo_asset_id = co_brand_logo_asset_id
        if card_background_combined_asset_id is not None:
            self.card_background_combined_asset_id = card_background_combined_asset_id
        if card_background_asset_id is not None:
            self.card_background_asset_id = card_background_asset_id
        if icon_asset_id is not None:
            self.icon_asset_id = icon_asset_id
        if foreground_color is not None:
            self.foreground_color = foreground_color
        if issuer_name is not None:
            self.issuer_name = issuer_name
        if short_description is not None:
            self.short_description = short_description
        if long_description is not None:
            self.long_description = long_description
        if customer_service_url is not None:
            self.customer_service_url = customer_service_url
        if customer_service_email is not None:
            self.customer_service_email = customer_service_email
        if customer_service_phone_number is not None:
            self.customer_service_phone_number = customer_service_phone_number
        if issuer_mobile_app is not None:
            self.issuer_mobile_app = issuer_mobile_app
        if online_banking_login_url is not None:
            self.online_banking_login_url = online_banking_login_url
        if terms_and_conditions_url is not None:
            self.terms_and_conditions_url = terms_and_conditions_url
        if privacy_policy_url is not None:
            self.privacy_policy_url = privacy_policy_url
        if issuer_product_config_code is not None:
            self.issuer_product_config_code = issuer_product_config_code

    @property
    def brand_logo_asset_id(self):
        """Gets the brand_logo_asset_id of this ProductConfig.  # noqa: E501

        The MasterCard or Maestro brand logo associated with this card. Provided as an Asset ID � use the Get Asset API to retrieve the actual asset. Always returned in Product Configuration object <br>    __Max Length: 64__<br> __Required: Yes__   # noqa: E501

        :return: The brand_logo_asset_id of this ProductConfig.  # noqa: E501
        :rtype: str
        """
        return self._brand_logo_asset_id

    @brand_logo_asset_id.setter
    def brand_logo_asset_id(self, brand_logo_asset_id):
        """Sets the brand_logo_asset_id of this ProductConfig.

        The MasterCard or Maestro brand logo associated with this card. Provided as an Asset ID � use the Get Asset API to retrieve the actual asset. Always returned in Product Configuration object <br>    __Max Length: 64__<br> __Required: Yes__   # noqa: E501

        :param brand_logo_asset_id: The brand_logo_asset_id of this ProductConfig.  # noqa: E501
        :type: str
        """

        self._brand_logo_asset_id = brand_logo_asset_id

    @property
    def issuer_logo_asset_id(self):
        """Gets the issuer_logo_asset_id of this ProductConfig.  # noqa: E501

        The logo of the issuing bank. Provided as an Asset ID � use the Get Asset API to retrieve the actual asset. Always returned in Product Configuration object <br>     __Max Length:64__<br> __Required: Yes__   # noqa: E501

        :return: The issuer_logo_asset_id of this ProductConfig.  # noqa: E501
        :rtype: str
        """
        return self._issuer_logo_asset_id

    @issuer_logo_asset_id.setter
    def issuer_logo_asset_id(self, issuer_logo_asset_id):
        """Sets the issuer_logo_asset_id of this ProductConfig.

        The logo of the issuing bank. Provided as an Asset ID � use the Get Asset API to retrieve the actual asset. Always returned in Product Configuration object <br>     __Max Length:64__<br> __Required: Yes__   # noqa: E501

        :param issuer_logo_asset_id: The issuer_logo_asset_id of this ProductConfig.  # noqa: E501
        :type: str
        """

        self._issuer_logo_asset_id = issuer_logo_asset_id

    @property
    def is_co_branded(self):
        """Gets the is_co_branded of this ProductConfig.  # noqa: E501

        Whether the product is co-branded. Must be either true (this is a co-branded product) or false (this is not a co-branded product). Always returned in Product Configuration object <br>    __Max Length:5__<br> __Required: Yes__   # noqa: E501

        :return: The is_co_branded of this ProductConfig.  # noqa: E501
        :rtype: str
        """
        return self._is_co_branded

    @is_co_branded.setter
    def is_co_branded(self, is_co_branded):
        """Sets the is_co_branded of this ProductConfig.

        Whether the product is co-branded. Must be either true (this is a co-branded product) or false (this is not a co-branded product). Always returned in Product Configuration object <br>    __Max Length:5__<br> __Required: Yes__   # noqa: E501

        :param is_co_branded: The is_co_branded of this ProductConfig.  # noqa: E501
        :type: str
        """

        self._is_co_branded = is_co_branded

    @property
    def co_brand_name(self):
        """Gets the co_brand_name of this ProductConfig.  # noqa: E501

        Textual name of the co-brand partner. Required if CoBranded is true, not present otherwise.  <br>   __Max Length:128__<br> __Required: Conditional � required if isCoBranded = \"true\". Not present otherwise__   # noqa: E501

        :return: The co_brand_name of this ProductConfig.  # noqa: E501
        :rtype: str
        """
        return self._co_brand_name

    @co_brand_name.setter
    def co_brand_name(self, co_brand_name):
        """Sets the co_brand_name of this ProductConfig.

        Textual name of the co-brand partner. Required if CoBranded is true, not present otherwise.  <br>   __Max Length:128__<br> __Required: Conditional � required if isCoBranded = \"true\". Not present otherwise__   # noqa: E501

        :param co_brand_name: The co_brand_name of this ProductConfig.  # noqa: E501
        :type: str
        """

        self._co_brand_name = co_brand_name

    @property
    def co_brand_logo_asset_id(self):
        """Gets the co_brand_logo_asset_id of this ProductConfig.  # noqa: E501

        The co-brand logo (if any) for this product. Provided as an Asset ID � use the Get Asset API to retrieve the actual asset. <br>   __Max Length:64__<br> __Required: No__   # noqa: E501

        :return: The co_brand_logo_asset_id of this ProductConfig.  # noqa: E501
        :rtype: str
        """
        return self._co_brand_logo_asset_id

    @co_brand_logo_asset_id.setter
    def co_brand_logo_asset_id(self, co_brand_logo_asset_id):
        """Sets the co_brand_logo_asset_id of this ProductConfig.

        The co-brand logo (if any) for this product. Provided as an Asset ID � use the Get Asset API to retrieve the actual asset. <br>   __Max Length:64__<br> __Required: No__   # noqa: E501

        :param co_brand_logo_asset_id: The co_brand_logo_asset_id of this ProductConfig.  # noqa: E501
        :type: str
        """

        self._co_brand_logo_asset_id = co_brand_logo_asset_id

    @property
    def card_background_combined_asset_id(self):
        """Gets the card_background_combined_asset_id of this ProductConfig.  # noqa: E501

        The card image used to represent the digital card in the wallet. This �combined� option contains the MasterCard, bank and any co- brand logos.  Provided as an Asset ID � use the Get Asset API to retrieve the actual asset.     __Max Length:64__<br> __Required: Conditional � either CardBackgroundCombined or CardBackground will be provided__   # noqa: E501

        :return: The card_background_combined_asset_id of this ProductConfig.  # noqa: E501
        :rtype: str
        """
        return self._card_background_combined_asset_id

    @card_background_combined_asset_id.setter
    def card_background_combined_asset_id(self, card_background_combined_asset_id):
        """Sets the card_background_combined_asset_id of this ProductConfig.

        The card image used to represent the digital card in the wallet. This �combined� option contains the MasterCard, bank and any co- brand logos.  Provided as an Asset ID � use the Get Asset API to retrieve the actual asset.     __Max Length:64__<br> __Required: Conditional � either CardBackgroundCombined or CardBackground will be provided__   # noqa: E501

        :param card_background_combined_asset_id: The card_background_combined_asset_id of this ProductConfig.  # noqa: E501
        :type: str
        """

        self._card_background_combined_asset_id = card_background_combined_asset_id

    @property
    def card_background_asset_id(self):
        """Gets the card_background_asset_id of this ProductConfig.  # noqa: E501

        The card image used to represent the digital card in the wallet. This �non-combined� option does not contain the MasterCard, bank, or co-brand logos. Provided as an Asset ID � use the Get Asset API to retrieve the actual asset. <br>     __Max Length:64__<br> __Required: Conditional � either CardBackgroundCombined or CardBackground will be provided__   # noqa: E501

        :return: The card_background_asset_id of this ProductConfig.  # noqa: E501
        :rtype: str
        """
        return self._card_background_asset_id

    @card_background_asset_id.setter
    def card_background_asset_id(self, card_background_asset_id):
        """Sets the card_background_asset_id of this ProductConfig.

        The card image used to represent the digital card in the wallet. This �non-combined� option does not contain the MasterCard, bank, or co-brand logos. Provided as an Asset ID � use the Get Asset API to retrieve the actual asset. <br>     __Max Length:64__<br> __Required: Conditional � either CardBackgroundCombined or CardBackground will be provided__   # noqa: E501

        :param card_background_asset_id: The card_background_asset_id of this ProductConfig.  # noqa: E501
        :type: str
        """

        self._card_background_asset_id = card_background_asset_id

    @property
    def icon_asset_id(self):
        """Gets the icon_asset_id of this ProductConfig.  # noqa: E501

        The icon representing the primary brand(s) associated with this product. Provided as an Asset ID � use the Get Asset API to retrieve the actual asset. Always returned in Product Configuration object<br>    __Max Length:64__<br> __Required: Yes__   # noqa: E501

        :return: The icon_asset_id of this ProductConfig.  # noqa: E501
        :rtype: str
        """
        return self._icon_asset_id

    @icon_asset_id.setter
    def icon_asset_id(self, icon_asset_id):
        """Sets the icon_asset_id of this ProductConfig.

        The icon representing the primary brand(s) associated with this product. Provided as an Asset ID � use the Get Asset API to retrieve the actual asset. Always returned in Product Configuration object<br>    __Max Length:64__<br> __Required: Yes__   # noqa: E501

        :param icon_asset_id: The icon_asset_id of this ProductConfig.  # noqa: E501
        :type: str
        """

        self._icon_asset_id = icon_asset_id

    @property
    def foreground_color(self):
        """Gets the foreground_color of this ProductConfig.  # noqa: E501

        Foreground color, used to overlay text on top of the card image. Always returned in Product Configuration object<br>    __Max Length:6__ Hexadecimal RGB color format (case-insensitive).<br> __Required: Yes__   # noqa: E501

        :return: The foreground_color of this ProductConfig.  # noqa: E501
        :rtype: str
        """
        return self._foreground_color

    @foreground_color.setter
    def foreground_color(self, foreground_color):
        """Sets the foreground_color of this ProductConfig.

        Foreground color, used to overlay text on top of the card image. Always returned in Product Configuration object<br>    __Max Length:6__ Hexadecimal RGB color format (case-insensitive).<br> __Required: Yes__   # noqa: E501

        :param foreground_color: The foreground_color of this ProductConfig.  # noqa: E501
        :type: str
        """

        self._foreground_color = foreground_color

    @property
    def issuer_name(self):
        """Gets the issuer_name of this ProductConfig.  # noqa: E501

        Name of the issuing bank. Always returned in Product Configuration object <br>    __Max Length:64__<br> __Required: Yes__   # noqa: E501

        :return: The issuer_name of this ProductConfig.  # noqa: E501
        :rtype: str
        """
        return self._issuer_name

    @issuer_name.setter
    def issuer_name(self, issuer_name):
        """Sets the issuer_name of this ProductConfig.

        Name of the issuing bank. Always returned in Product Configuration object <br>    __Max Length:64__<br> __Required: Yes__   # noqa: E501

        :param issuer_name: The issuer_name of this ProductConfig.  # noqa: E501
        :type: str
        """

        self._issuer_name = issuer_name

    @property
    def short_description(self):
        """Gets the short_description of this ProductConfig.  # noqa: E501

        A short description for this product. Always returned in Product Configuration object  <br>   __Max Length:128__<br> __Required: Yes__   # noqa: E501

        :return: The short_description of this ProductConfig.  # noqa: E501
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this ProductConfig.

        A short description for this product. Always returned in Product Configuration object  <br>   __Max Length:128__<br> __Required: Yes__   # noqa: E501

        :param short_description: The short_description of this ProductConfig.  # noqa: E501
        :type: str
        """

        self._short_description = short_description

    @property
    def long_description(self):
        """Gets the long_description of this ProductConfig.  # noqa: E501

        A long description for this product.  <br>   __Max Length:256__<br> __Required: No__   # noqa: E501

        :return: The long_description of this ProductConfig.  # noqa: E501
        :rtype: str
        """
        return self._long_description

    @long_description.setter
    def long_description(self, long_description):
        """Sets the long_description of this ProductConfig.

        A long description for this product.  <br>   __Max Length:256__<br> __Required: No__   # noqa: E501

        :param long_description: The long_description of this ProductConfig.  # noqa: E501
        :type: str
        """

        self._long_description = long_description

    @property
    def customer_service_url(self):
        """Gets the customer_service_url of this ProductConfig.  # noqa: E501

        Customer service website of the issuing bank. <br>    __Max Length:128__<br> __Required: No__   # noqa: E501

        :return: The customer_service_url of this ProductConfig.  # noqa: E501
        :rtype: str
        """
        return self._customer_service_url

    @customer_service_url.setter
    def customer_service_url(self, customer_service_url):
        """Sets the customer_service_url of this ProductConfig.

        Customer service website of the issuing bank. <br>    __Max Length:128__<br> __Required: No__   # noqa: E501

        :param customer_service_url: The customer_service_url of this ProductConfig.  # noqa: E501
        :type: str
        """

        self._customer_service_url = customer_service_url

    @property
    def customer_service_email(self):
        """Gets the customer_service_email of this ProductConfig.  # noqa: E501

        Customer service email address of the issuing bank. <br>    __Max Length:64__<br> __Required: No__   # noqa: E501

        :return: The customer_service_email of this ProductConfig.  # noqa: E501
        :rtype: str
        """
        return self._customer_service_email

    @customer_service_email.setter
    def customer_service_email(self, customer_service_email):
        """Sets the customer_service_email of this ProductConfig.

        Customer service email address of the issuing bank. <br>    __Max Length:64__<br> __Required: No__   # noqa: E501

        :param customer_service_email: The customer_service_email of this ProductConfig.  # noqa: E501
        :type: str
        """

        self._customer_service_email = customer_service_email

    @property
    def customer_service_phone_number(self):
        """Gets the customer_service_phone_number of this ProductConfig.  # noqa: E501

        Customer service phone number of the issuing bank. <br>    __Max Length:64__<br> __Required: No__   # noqa: E501

        :return: The customer_service_phone_number of this ProductConfig.  # noqa: E501
        :rtype: str
        """
        return self._customer_service_phone_number

    @customer_service_phone_number.setter
    def customer_service_phone_number(self, customer_service_phone_number):
        """Sets the customer_service_phone_number of this ProductConfig.

        Customer service phone number of the issuing bank. <br>    __Max Length:64__<br> __Required: No__   # noqa: E501

        :param customer_service_phone_number: The customer_service_phone_number of this ProductConfig.  # noqa: E501
        :type: str
        """

        self._customer_service_phone_number = customer_service_phone_number

    @property
    def issuer_mobile_app(self):
        """Gets the issuer_mobile_app of this ProductConfig.  # noqa: E501

        Contains one or more mobile app details that may be used to deep link from the Mobile Payment App to the issuer mobile app. <br>    __Max Length:64__<br> __Required: No__   # noqa: E501

        :return: The issuer_mobile_app of this ProductConfig.  # noqa: E501
        :rtype: object
        """
        return self._issuer_mobile_app

    @issuer_mobile_app.setter
    def issuer_mobile_app(self, issuer_mobile_app):
        """Sets the issuer_mobile_app of this ProductConfig.

        Contains one or more mobile app details that may be used to deep link from the Mobile Payment App to the issuer mobile app. <br>    __Max Length:64__<br> __Required: No__   # noqa: E501

        :param issuer_mobile_app: The issuer_mobile_app of this ProductConfig.  # noqa: E501
        :type: object
        """

        self._issuer_mobile_app = issuer_mobile_app

    @property
    def online_banking_login_url(self):
        """Gets the online_banking_login_url of this ProductConfig.  # noqa: E501

        Logon URL for the issuing bank�s online banking website.<br>     __Max Length:128__   # noqa: E501

        :return: The online_banking_login_url of this ProductConfig.  # noqa: E501
        :rtype: str
        """
        return self._online_banking_login_url

    @online_banking_login_url.setter
    def online_banking_login_url(self, online_banking_login_url):
        """Sets the online_banking_login_url of this ProductConfig.

        Logon URL for the issuing bank�s online banking website.<br>     __Max Length:128__   # noqa: E501

        :param online_banking_login_url: The online_banking_login_url of this ProductConfig.  # noqa: E501
        :type: str
        """

        self._online_banking_login_url = online_banking_login_url

    @property
    def terms_and_conditions_url(self):
        """Gets the terms_and_conditions_url of this ProductConfig.  # noqa: E501

        URL linking to the issuing bank�s terms and conditions for this product.<br>     __Max Length:128__<br> __Required: No__   # noqa: E501

        :return: The terms_and_conditions_url of this ProductConfig.  # noqa: E501
        :rtype: str
        """
        return self._terms_and_conditions_url

    @terms_and_conditions_url.setter
    def terms_and_conditions_url(self, terms_and_conditions_url):
        """Sets the terms_and_conditions_url of this ProductConfig.

        URL linking to the issuing bank�s terms and conditions for this product.<br>     __Max Length:128__<br> __Required: No__   # noqa: E501

        :param terms_and_conditions_url: The terms_and_conditions_url of this ProductConfig.  # noqa: E501
        :type: str
        """

        self._terms_and_conditions_url = terms_and_conditions_url

    @property
    def privacy_policy_url(self):
        """Gets the privacy_policy_url of this ProductConfig.  # noqa: E501

        URL linking to the issuing bank�s privacy policy for this product.<br>     __Max Length:128__<br> __Required: No__   # noqa: E501

        :return: The privacy_policy_url of this ProductConfig.  # noqa: E501
        :rtype: str
        """
        return self._privacy_policy_url

    @privacy_policy_url.setter
    def privacy_policy_url(self, privacy_policy_url):
        """Sets the privacy_policy_url of this ProductConfig.

        URL linking to the issuing bank�s privacy policy for this product.<br>     __Max Length:128__<br> __Required: No__   # noqa: E501

        :param privacy_policy_url: The privacy_policy_url of this ProductConfig.  # noqa: E501
        :type: str
        """

        self._privacy_policy_url = privacy_policy_url

    @property
    def issuer_product_config_code(self):
        """Gets the issuer_product_config_code of this ProductConfig.  # noqa: E501

        Freeform identifier for this product configuration as assigned by the issuer.<br>     __Max Length:128__<br> __Required: No__   # noqa: E501

        :return: The issuer_product_config_code of this ProductConfig.  # noqa: E501
        :rtype: str
        """
        return self._issuer_product_config_code

    @issuer_product_config_code.setter
    def issuer_product_config_code(self, issuer_product_config_code):
        """Sets the issuer_product_config_code of this ProductConfig.

        Freeform identifier for this product configuration as assigned by the issuer.<br>     __Max Length:128__<br> __Required: No__   # noqa: E501

        :param issuer_product_config_code: The issuer_product_config_code of this ProductConfig.  # noqa: E501
        :type: str
        """

        self._issuer_product_config_code = issuer_product_config_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
