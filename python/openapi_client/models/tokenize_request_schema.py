# coding: utf-8

"""
    MDES for Merchants

    The MDES APIs are designed as RPC style stateless web services where each API endpoint represents an operation to be performed.  All request and response payloads are sent in the JSON (JavaScript Object Notation) data-interchange format. Each endpoint in the API specifies the HTTP Method used to access it. All strings in request and response objects are to be UTF-8 encoded.  Each API URI includes the major and minor version of API that it conforms to.  This will allow multiple concurrent versions of the API to be deployed simultaneously. <br> __Authentication__ Mastercard uses OAuth 1.0a with body hash extension for authenticating the API clients. This requires every request that you send to  Mastercard to be signed with an RSA private key. A private-public RSA key pair must be generated consisting of: <br> 1 . A private key for the OAuth signature for API requests. It is recommended to keep the private key in a password-protected or hardware keystore. <br> 2. A public key is shared with Mastercard during the project setup process through either a certificate signing request (CSR) or the API Key Generator. Mastercard will use the public key to verify the OAuth signature that is provided on every API call.<br>  An OAUTH1.0a signer library is available on [GitHub](https://github.com/Mastercard/oauth1-signer-java) <br>  __Encryption__<br>  All communications between Issuer web service and the Mastercard gateway is encrypted using TLS. <br> __Additional Encryption of Sensitive Data__ In addition to the OAuth authentication, when using MDES Digital Enablement Service, any PCI sensitive and all account holder Personally Identifiable Information (PII) data must be encrypted. This requirement applies to the API fields containing encryptedData. Sensitive data is encrypted using a symmetric session (one-time-use) key. The symmetric session key is then wrapped with an RSA Public Key supplied by Mastercard during API setup phase (the Customer Encryption Key). <br>  Java Client Encryption Library available on [GitHub](https://github.com/Mastercard/client-encryption-java)   # noqa: E501

    The version of the OpenAPI document: 1.2.10
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class TokenizeRequestSchema(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'response_host': 'str',
        'request_id': 'str',
        'token_type': 'str',
        'token_requestor_id': 'str',
        'task_id': 'str',
        'funding_account_info': 'FundingAccountInfo',
        'consumer_language': 'str',
        'tokenization_authentication_value': 'str',
        'decisioning_data': 'DecisioningData'
    }

    attribute_map = {
        'response_host': 'responseHost',
        'request_id': 'requestId',
        'token_type': 'tokenType',
        'token_requestor_id': 'tokenRequestorId',
        'task_id': 'taskId',
        'funding_account_info': 'fundingAccountInfo',
        'consumer_language': 'consumerLanguage',
        'tokenization_authentication_value': 'tokenizationAuthenticationValue',
        'decisioning_data': 'decisioningData'
    }

    def __init__(self, response_host=None, request_id=None, token_type=None, token_requestor_id=None, task_id=None, funding_account_info=None, consumer_language=None, tokenization_authentication_value=None, decisioning_data=None, local_vars_configuration=None):  # noqa: E501
        """TokenizeRequestSchema - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._response_host = None
        self._request_id = None
        self._token_type = None
        self._token_requestor_id = None
        self._task_id = None
        self._funding_account_info = None
        self._consumer_language = None
        self._tokenization_authentication_value = None
        self._decisioning_data = None
        self.discriminator = None

        if response_host is not None:
            self.response_host = response_host
        if request_id is not None:
            self.request_id = request_id
        self.token_type = token_type
        self.token_requestor_id = token_requestor_id
        self.task_id = task_id
        self.funding_account_info = funding_account_info
        if consumer_language is not None:
            self.consumer_language = consumer_language
        if tokenization_authentication_value is not None:
            self.tokenization_authentication_value = tokenization_authentication_value
        if decisioning_data is not None:
            self.decisioning_data = decisioning_data

    @property
    def response_host(self):
        """Gets the response_host of this TokenizeRequestSchema.  # noqa: E501

        \"The host that originated the request. Future calls in the same conversation may be routed to this host. Must be provided as: host[:port][/contextRoot] Where port and contextRoot are optional. If contextRoot is not provided, the default (per the URL Scheme) is assumed and must be used.\"   # noqa: E501

        :return: The response_host of this TokenizeRequestSchema.  # noqa: E501
        :rtype: str
        """
        return self._response_host

    @response_host.setter
    def response_host(self, response_host):
        """Sets the response_host of this TokenizeRequestSchema.

        \"The host that originated the request. Future calls in the same conversation may be routed to this host. Must be provided as: host[:port][/contextRoot] Where port and contextRoot are optional. If contextRoot is not provided, the default (per the URL Scheme) is assumed and must be used.\"   # noqa: E501

        :param response_host: The response_host of this TokenizeRequestSchema.  # noqa: E501
        :type: str
        """

        self._response_host = response_host

    @property
    def request_id(self):
        """Gets the request_id of this TokenizeRequestSchema.  # noqa: E501

        Unique identifier for the request.   # noqa: E501

        :return: The request_id of this TokenizeRequestSchema.  # noqa: E501
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this TokenizeRequestSchema.

        Unique identifier for the request.   # noqa: E501

        :param request_id: The request_id of this TokenizeRequestSchema.  # noqa: E501
        :type: str
        """

        self._request_id = request_id

    @property
    def token_type(self):
        """Gets the token_type of this TokenizeRequestSchema.  # noqa: E501

        The type of Token requested. Must be CLOUD       __Max Length:32__      # noqa: E501

        :return: The token_type of this TokenizeRequestSchema.  # noqa: E501
        :rtype: str
        """
        return self._token_type

    @token_type.setter
    def token_type(self, token_type):
        """Sets the token_type of this TokenizeRequestSchema.

        The type of Token requested. Must be CLOUD       __Max Length:32__      # noqa: E501

        :param token_type: The token_type of this TokenizeRequestSchema.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and token_type is None:  # noqa: E501
            raise ValueError("Invalid value for `token_type`, must not be `None`")  # noqa: E501

        self._token_type = token_type

    @property
    def token_requestor_id(self):
        """Gets the token_requestor_id of this TokenizeRequestSchema.  # noqa: E501

        11-digit numeric ID provided by Mastercard that identifies the Token Requestor.    # noqa: E501

        :return: The token_requestor_id of this TokenizeRequestSchema.  # noqa: E501
        :rtype: str
        """
        return self._token_requestor_id

    @token_requestor_id.setter
    def token_requestor_id(self, token_requestor_id):
        """Sets the token_requestor_id of this TokenizeRequestSchema.

        11-digit numeric ID provided by Mastercard that identifies the Token Requestor.    # noqa: E501

        :param token_requestor_id: The token_requestor_id of this TokenizeRequestSchema.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and token_requestor_id is None:  # noqa: E501
            raise ValueError("Invalid value for `token_requestor_id`, must not be `None`")  # noqa: E501

        self._token_requestor_id = token_requestor_id

    @property
    def task_id(self):
        """Gets the task_id of this TokenizeRequestSchema.  # noqa: E501

        Identifier for this task as assigned by the Token Requestor, unique across a given Token Requestor Identifier. May be used in the Get Task Status API to query the status of this task.      __Max Length:64__   # noqa: E501

        :return: The task_id of this TokenizeRequestSchema.  # noqa: E501
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this TokenizeRequestSchema.

        Identifier for this task as assigned by the Token Requestor, unique across a given Token Requestor Identifier. May be used in the Get Task Status API to query the status of this task.      __Max Length:64__   # noqa: E501

        :param task_id: The task_id of this TokenizeRequestSchema.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and task_id is None:  # noqa: E501
            raise ValueError("Invalid value for `task_id`, must not be `None`")  # noqa: E501

        self._task_id = task_id

    @property
    def funding_account_info(self):
        """Gets the funding_account_info of this TokenizeRequestSchema.  # noqa: E501


        :return: The funding_account_info of this TokenizeRequestSchema.  # noqa: E501
        :rtype: FundingAccountInfo
        """
        return self._funding_account_info

    @funding_account_info.setter
    def funding_account_info(self, funding_account_info):
        """Sets the funding_account_info of this TokenizeRequestSchema.


        :param funding_account_info: The funding_account_info of this TokenizeRequestSchema.  # noqa: E501
        :type: FundingAccountInfo
        """
        if self.local_vars_configuration.client_side_validation and funding_account_info is None:  # noqa: E501
            raise ValueError("Invalid value for `funding_account_info`, must not be `None`")  # noqa: E501

        self._funding_account_info = funding_account_info

    @property
    def consumer_language(self):
        """Gets the consumer_language of this TokenizeRequestSchema.  # noqa: E501

        Language preference selected by the consumer. Formatted as an ISO- 639-1 two-letter language code.    __Max Length:2__   # noqa: E501

        :return: The consumer_language of this TokenizeRequestSchema.  # noqa: E501
        :rtype: str
        """
        return self._consumer_language

    @consumer_language.setter
    def consumer_language(self, consumer_language):
        """Sets the consumer_language of this TokenizeRequestSchema.

        Language preference selected by the consumer. Formatted as an ISO- 639-1 two-letter language code.    __Max Length:2__   # noqa: E501

        :param consumer_language: The consumer_language of this TokenizeRequestSchema.  # noqa: E501
        :type: str
        """

        self._consumer_language = consumer_language

    @property
    def tokenization_authentication_value(self):
        """Gets the tokenization_authentication_value of this TokenizeRequestSchema.  # noqa: E501

        The Tokenization Authentication Value (TAV) as cryptographically signed by the Issuer to authorize this digitization request.      __Max Length:2048__   # noqa: E501

        :return: The tokenization_authentication_value of this TokenizeRequestSchema.  # noqa: E501
        :rtype: str
        """
        return self._tokenization_authentication_value

    @tokenization_authentication_value.setter
    def tokenization_authentication_value(self, tokenization_authentication_value):
        """Sets the tokenization_authentication_value of this TokenizeRequestSchema.

        The Tokenization Authentication Value (TAV) as cryptographically signed by the Issuer to authorize this digitization request.      __Max Length:2048__   # noqa: E501

        :param tokenization_authentication_value: The tokenization_authentication_value of this TokenizeRequestSchema.  # noqa: E501
        :type: str
        """

        self._tokenization_authentication_value = tokenization_authentication_value

    @property
    def decisioning_data(self):
        """Gets the decisioning_data of this TokenizeRequestSchema.  # noqa: E501


        :return: The decisioning_data of this TokenizeRequestSchema.  # noqa: E501
        :rtype: DecisioningData
        """
        return self._decisioning_data

    @decisioning_data.setter
    def decisioning_data(self, decisioning_data):
        """Sets the decisioning_data of this TokenizeRequestSchema.


        :param decisioning_data: The decisioning_data of this TokenizeRequestSchema.  # noqa: E501
        :type: DecisioningData
        """

        self._decisioning_data = decisioning_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TokenizeRequestSchema):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TokenizeRequestSchema):
            return True

        return self.to_dict() != other.to_dict()
