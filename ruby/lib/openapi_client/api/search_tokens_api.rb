=begin
#MDES for Merchants

#The MDES APIs are designed as RPC style stateless web services where each API endpoint represents an operation to be performed.  All request and response payloads are sent in the JSON (JavaScript Object Notation) data-interchange format. Each endpoint in the API specifies the HTTP Method used to access it. All strings in request and response objects are to be UTF-8 encoded.  Each API URI includes the major and minor version of API that it conforms to.  This will allow multiple concurrent versions of the API to be deployed simultaneously.  

The version of the OpenAPI document: 1.2.7

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.0.2

=end

require 'cgi'

module OpenapiClient
  class SearchTokensApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Used to get basic token information for all tokens on a specified device, or all tokens mapped to the given Account PAN.
    # This API is used to get basic token information for all tokens on a specified device, or all tokens mapped to the given Account PAN. It may be used to check current Token(s) state or, in exception scenarios (such as network time out), to ensure that external systems remain in sync with the Token state as maintained by MDES. Deactivated tokens are not returned. 
    # @param [Hash] opts the optional parameters
    # @option opts [SearchTokensRequestSchema] :search_tokens_request_schema Contains the details of the request message. 
    # @return [SearchTokensResponseSchema]
    def search_tokens(opts = {})
      data, _status_code, _headers = search_tokens_with_http_info(opts)
      data
    end

    # Used to get basic token information for all tokens on a specified device, or all tokens mapped to the given Account PAN.
    # This API is used to get basic token information for all tokens on a specified device, or all tokens mapped to the given Account PAN. It may be used to check current Token(s) state or, in exception scenarios (such as network time out), to ensure that external systems remain in sync with the Token state as maintained by MDES. Deactivated tokens are not returned. 
    # @param [Hash] opts the optional parameters
    # @option opts [SearchTokensRequestSchema] :search_tokens_request_schema Contains the details of the request message. 
    # @return [Array<(SearchTokensResponseSchema, Integer, Hash)>] SearchTokensResponseSchema data, response status code and response headers
    def search_tokens_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SearchTokensApi.search_tokens ...'
      end
      # resource path
      local_var_path = '/digitization/static/1/0/searchTokens'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'search_tokens_request_schema']) 

      # return_type
      return_type = opts[:return_type] || 'SearchTokensResponseSchema' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SearchTokensApi#search_tokens\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
