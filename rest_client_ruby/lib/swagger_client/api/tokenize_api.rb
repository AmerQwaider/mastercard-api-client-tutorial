=begin
#MDES for Merchants

#The MDES APIs are designed as RPC style stateless web services where each API endpoint represents an operation to be performed.  All request and response payloads are sent in the JSON (JavaScript Object Notation) data-interchange format. Each endpoint in the API specifies the HTTP Method used to access it. All strings in request and response objects are to be UTF-8 encoded.  Each API URI includes the major and minor version of API that it conforms to.  This will allow multiple concurrent versions of the API to be deployed simultaneously.  

OpenAPI spec version: 1.2.7

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0-SNAPSHOT

=end

require 'uri'

module SwaggerClient
  class TokenizeApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Used to digitize a card to create a server-based Token.
    # Used to digitize a card to create a server-based Token. MDES will perform both card availability and eligibility checks to check that this specific card is eligible for digitization. As both availability and eligibility are combined, only a Tokenization Authorization message is sent to the issuer as part of this request to authorize the digitization. No Tokenization Eligibility message is sent. The digitization decision will be one of Approved or Declined. 
    # @param [Hash] opts the optional parameters
    # @option opts [TokenizeRequestSchema] :tokenize_request_schema A Tokenize request is used to digitize a PAN.  
    # @return [TokenizeResponseSchema]
    def create_tokenize(opts = {})
      data, _status_code, _headers = create_tokenize_with_http_info(opts)
      data
    end

    # Used to digitize a card to create a server-based Token.
    # Used to digitize a card to create a server-based Token. MDES will perform both card availability and eligibility checks to check that this specific card is eligible for digitization. As both availability and eligibility are combined, only a Tokenization Authorization message is sent to the issuer as part of this request to authorize the digitization. No Tokenization Eligibility message is sent. The digitization decision will be one of Approved or Declined. 
    # @param [Hash] opts the optional parameters
    # @option opts [TokenizeRequestSchema] :tokenize_request_schema A Tokenize request is used to digitize a PAN.  
    # @return [Array<(TokenizeResponseSchema, Fixnum, Hash)>] TokenizeResponseSchema data, response status code and response headers
    def create_tokenize_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TokenizeApi.create_tokenize ...'
      end
      # resource path
      local_var_path = '/digitization/static/1/0/tokenize'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'tokenize_request_schema'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TokenizeResponseSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TokenizeApi#create_tokenize\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
