=begin
#MDES for Merchants

#The MDES APIs are designed as RPC style stateless web services where each API endpoint represents an operation to be performed.  All request and response payloads are sent in the JSON (JavaScript Object Notation) data-interchange format. Each endpoint in the API specifies the HTTP Method used to access it. All strings in request and response objects are to be UTF-8 encoded.  Each API URI includes the major and minor version of API that it conforms to.  This will allow multiple concurrent versions of the API to be deployed simultaneously.  

OpenAPI spec version: 1.2.7

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0-SNAPSHOT

=end

require 'date'

module SwaggerClient
  class TransactRequestSchema
    # The host that originated the request. Future calls in the same conversation may be routed to this host. 
    attr_accessor :response_host

    # Unique identifier for the request. 
    attr_accessor :request_id

    # Globally unique identifier for the Token, as assigned by MDES.    __Max Length:64__ 
    attr_accessor :token_unique_reference

    # What type of DSRP cryptogram to create. Must be either UCAF or M_CHIP.     __Max Length:64__ 
    attr_accessor :dsrp_type

    # HEX Encoded data (case sensitive) provided by the merchant to provide variability and uniqueness to the generation of a cryptogram.  __Length:8__ 
    attr_accessor :unpredictable_number

    # Transaction amount to be authorized. Note that refund transactions are not supported ï¿½ this value must be a positive amount and can contain up to 12 digits, inclusive of any digits in the currency exponent.     __Max Length:13__ 
    attr_accessor :amount

    # The transaction currency. Expressed as a 3-character ISO 4217 currency code. 
    attr_accessor :currency_code

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'response_host' => :'responseHost',
        :'request_id' => :'requestId',
        :'token_unique_reference' => :'tokenUniqueReference',
        :'dsrp_type' => :'dsrpType',
        :'unpredictable_number' => :'unpredictableNumber',
        :'amount' => :'amount',
        :'currency_code' => :'currencyCode'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'response_host' => :'String',
        :'request_id' => :'String',
        :'token_unique_reference' => :'String',
        :'dsrp_type' => :'String',
        :'unpredictable_number' => :'String',
        :'amount' => :'String',
        :'currency_code' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'responseHost')
        self.response_host = attributes[:'responseHost']
      end

      if attributes.has_key?(:'requestId')
        self.request_id = attributes[:'requestId']
      end

      if attributes.has_key?(:'tokenUniqueReference')
        self.token_unique_reference = attributes[:'tokenUniqueReference']
      end

      if attributes.has_key?(:'dsrpType')
        self.dsrp_type = attributes[:'dsrpType']
      end

      if attributes.has_key?(:'unpredictableNumber')
        self.unpredictable_number = attributes[:'unpredictableNumber']
      end

      if attributes.has_key?(:'amount')
        self.amount = attributes[:'amount']
      end

      if attributes.has_key?(:'currencyCode')
        self.currency_code = attributes[:'currencyCode']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @request_id.nil?
        invalid_properties.push('invalid value for "request_id", request_id cannot be nil.')
      end

      if @token_unique_reference.nil?
        invalid_properties.push('invalid value for "token_unique_reference", token_unique_reference cannot be nil.')
      end

      if @dsrp_type.nil?
        invalid_properties.push('invalid value for "dsrp_type", dsrp_type cannot be nil.')
      end

      if @unpredictable_number.nil?
        invalid_properties.push('invalid value for "unpredictable_number", unpredictable_number cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @request_id.nil?
      return false if @token_unique_reference.nil?
      return false if @dsrp_type.nil?
      return false if @unpredictable_number.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          response_host == o.response_host &&
          request_id == o.request_id &&
          token_unique_reference == o.token_unique_reference &&
          dsrp_type == o.dsrp_type &&
          unpredictable_number == o.unpredictable_number &&
          amount == o.amount &&
          currency_code == o.currency_code
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [response_host, request_id, token_unique_reference, dsrp_type, unpredictable_number, amount, currency_code].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
