=begin
#MDES for Merchants

#The MDES APIs are designed as RPC style stateless web services where each API endpoint represents an operation to be performed.  All request and response payloads are sent in the JSON (JavaScript Object Notation) data-interchange format. Each endpoint in the API specifies the HTTP Method used to access it. All strings in request and response objects are to be UTF-8 encoded.  Each API URI includes the major and minor version of API that it conforms to.  This will allow multiple concurrent versions of the API to be deployed simultaneously. <br> __Authentication__ Mastercard uses OAuth 1.0a with body hash extension for authenticating the API clients. This requires every request that you send to  Mastercard to be signed with an RSA private key. A private-public RSA key pair must be generated consisting of: <br> 1 . A private key for the OAuth signature for API requests. It is recommended to keep the private key in a password-protected or hardware keystore. <br> 2. A public key is shared with Mastercard during the project setup process through either a certificate signing request (CSR) or the API Key Generator. Mastercard will use the public key to verify the OAuth signature that is provided on every API call.<br>  An OAUTH1.0a signer library is available on [GitHub](https://github.com/Mastercard/oauth1-signer-java) <br>  __Encryption__<br>  All communications between Issuer web service and the Mastercard gateway is encrypted using TLS. <br> __Additional Encryption of Sensitive Data__ In addition to the OAuth authentication, when using MDES Digital Enablement Service, any PCI sensitive and all account holder Personally Identifiable Information (PII) data must be encrypted. This requirement applies to the API fields containing encryptedData. Sensitive data is encrypted using a symmetric session (one-time-use) key. The symmetric session key is then wrapped with an RSA Public Key supplied by Mastercard during API setup phase (the Customer Encryption Key). <br>  Java Client Encryption Library available on [GitHub](https://github.com/Mastercard/client-encryption-java) 

OpenAPI spec version: 1.2.8

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0-SNAPSHOT

=end

require 'spec_helper'
require 'json'

require 'oauth'
require 'mcapi/encryption/openapi_interceptor'

CONFIG = JSON.parse(File.read('config.json'))

## OAuth config
P12 = '/Users/marcorocco/development/projects/mastercard/client-encryption-nodejs-service-tests/services/digital-enablement/Oauth_libs-sandbox.p12'.freeze
KEY_ALIAS = 'keyalias'.freeze
KEY_PASSWORD = 'keystorepassword'.freeze
CONSUMER_KEY = 'q_zC8ga1WQhV7eSQx6gdstilnlXGohRHwlKUp_G3147e715a!737b9380526f4daa9f49fcd0047c3e9c0000000000000000'.freeze

BASE_PATH = 'https://sandbox.api.mastercard.com/mdes'.freeze

def create_client(client, config, base_path, p12, key_alias, key_password, consumer_key)
  uri = URI(base_path)
  client.configure do |config|
    config.scheme = uri.scheme
    config.host = uri.host
  end
  api_client = client::ApiClient.new

  ## Add Field Level Encryption interceptor
  McAPI::Encryption::OpenAPIInterceptor.install_field_level_encryption(api_client, config)

  is = File.binread(p12)
  signing_key = OpenSSL::PKCS12.new(is, key_password).key
  Typhoeus.before {|request|
    authHeader = OAuth.get_authorization_header request.url, request.options[:method],
                                                request.options[:body], consumer_key, signing_key
    request.options[:headers] = request.options[:headers].merge({'Authorization' => authHeader})
  }
  #api_client.config.debugging = true
  api_client
end

def create_req
  {
      requestId: "123456",
      taskId: "123456",
      tokenType: "CLOUD",
      tokenRequestorId: "98765432101",
      cardInfo: {
          encryptedData: {
              accountNumber: "5123456789012345",
              source: "CARD_ON_FILE",
              cardholderName: "John Doe",
              securityCode: "123",
              expiryYear: "21",
              expiryMonth: "09",
              billingAddress: {
                  line1: "100 1st Street",
                  line2: "Apt. 4B",
                  city: "St. Louis",
                  countrySubdivision: "MO",
                  postalCode: "61000"
              }
          }
      }
  }
end

# Unit tests for SwaggerClient::TokenizeApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'TokenizeApi' do
  before do
    # run before each test
    @api_client = create_client(SwaggerClient, CONFIG, BASE_PATH, P12, KEY_ALIAS, KEY_PASSWORD, CONSUMER_KEY)
  end

  # unit tests for create_tokenize
  # Used to digitize a card to create a server-based Token.
  # Used to digitize a card to create a server-based Token. MDES will perform both card availability and eligibility checks to check that this specific card is eligible for digitization. As both availability and eligibility are combined, only a Tokenization Authorization message is sent to the issuer as part of this request to authorize the digitization. No Tokenization Eligibility message is sent. The digitization decision will be one of Approved or Declined. 
  # @param [Hash] opts the optional parameters
  # @option opts [TokenizeRequestSchema] :tokenize_request_schema A Tokenize request is used to digitize a PAN.  
  # @return [TokenizeResponseSchema]
  describe 'create_tokenize test' do
    it 'should work' do
      api_instance = SwaggerClient::TokenizeApi.new @api_client
      res = api_instance.create_tokenize({tokenize_request_schema: create_req})
      expect(res.decision).to eq('APPROVED')
    end
  end

end
