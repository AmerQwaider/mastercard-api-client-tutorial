<?php
/**
 * TokenizeApiTest
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MDES for Merchants
 *
 * The MDES APIs are designed as RPC style stateless web services where each API endpoint represents an operation to be performed.  All request and response payloads are sent in the JSON (JavaScript Object Notation) data-interchange format. Each endpoint in the API specifies the HTTP Method used to access it. All strings in request and response objects are to be UTF-8 encoded.  Each API URI includes the major and minor version of API that it conforms to.  This will allow multiple concurrent versions of the API to be deployed simultaneously.
 *
 * The version of the OpenAPI document: 1.2.7
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use \OpenAPI\Client\ObjectSerializer;

use GuzzleHttp;
use \OpenAPI\Client\Api\TokenizeApi;
use Mastercard\Developer\Encryption\FieldLevelEncryption;
use Mastercard\Developer\Encryption\FieldLevelEncryptionConfigBuilder;
use Mastercard\Developer\Encryption\FieldLevelEncryptionParams;
use Mastercard\Developer\Encryption\FieldValueEncoding;
use Mastercard\Developer\Interceptors\PsrHttpMessageEncryptionInterceptor;
use Mastercard\Developer\OAuth\Utils\AuthenticationUtils;
use Mastercard\Developer\Utils\EncryptionUtils;
use Mastercard\Developer\Signers\PsrHttpMessageSigner;

/**
 * TokenizeApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TokenizeApiTest extends \PHPUnit\Framework\TestCase
{
    private $client;

    const ConsumerKey = ""; // TODO
    const SigningKeyAlias = ""; // TODO
    const SigningKeyPassword = ""; // TODO
    const SigningKeyPkcs12FilePath = ""; // TODO
    const EncryptionCertificateFilePath = ""; // TODO
    const DecryptionKeyFilePath = ""; // TODO

    private static function getFieldLevelEncryptionConfig($encoding = FieldValueEncoding::BASE64) {
        $encryptionCertificate = EncryptionUtils::LoadEncryptionCertificate(self::EncryptionCertificateFilePath);
        $decryptionKey =  EncryptionUtils::LoadDecryptionKey(self::DecryptionKeyFilePath);

        return FieldLevelEncryptionConfigBuilder::aFieldLevelEncryptionConfig()
            ->withEncryptionPath('$.cardInfo.encryptedData', '$.cardInfo')
            ->withEncryptionPath('$.encryptedPayload.encryptedData', '$.encryptedPayload')
            ->withDecryptionPath('$.tokenDetail', '$.tokenDetail.encryptedData')
            ->withDecryptionPath('$.encryptedPayload', '$.encryptedPayload.encryptedData')
            ->withEncryptionCertificate($encryptionCertificate)
            ->withDecryptionKey($decryptionKey)
            ->withOaepPaddingDigestAlgorithm('SHA-512')
            ->withEncryptedValueFieldName('encryptedData')
            ->withEncryptedKeyFieldName('encryptedKey')
            ->withIvFieldName('iv')
            ->withOaepPaddingDigestAlgorithmFieldName('oaepHashingAlgorithm')
            ->withEncryptionCertificateFingerprintFieldName('publicKeyFingerprint')
            ->withFieldValueEncoding(FieldValueEncoding::HEX)
            ->build();
    }
    
    private function createClientOptions() {
        $signingKey = AuthenticationUtils::loadSigningKey(self::SigningKeyPkcs12FilePath, self::SigningKeyAlias, self::SigningKeyPassword);
        $stack = new GuzzleHttp\HandlerStack();
        $stack->setHandler(new GuzzleHttp\Handler\CurlHandler());
        $fieldLevelEncryptionInterceptor = new PsrHttpMessageEncryptionInterceptor(self::getFieldLevelEncryptionConfig());
        $stack->push(GuzzleHttp\Middleware::mapRequest([$fieldLevelEncryptionInterceptor, 'interceptRequest']));
        $stack->push(GuzzleHttp\Middleware::mapResponse([$fieldLevelEncryptionInterceptor, 'interceptResponse']));
        $stack->push(GuzzleHttp\Middleware::mapRequest([new PsrHttpMessageSigner(self::ConsumerKey, $signingKey), 'sign']));
        $options = [
            'verify' => false, // Do not verify the server certificate (to be removed)
            'handler' => $stack
        ];
        return $options;
    }

    private function createClient() {
        $this->client = new GuzzleHttp\Client($this->createClientOptions());
    }

    private function createConfig() {
        $this->config = new Configuration();
        $this->config->setDebug(true);
        $this->config->setDebugFile("./out.trace");
        $this->config->setHost("https://sandbox.api.mastercard.com/mdes");
    }

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
        self::createClient();
        self::createConfig();
    }

    /**
     * Test case for createTokenize
     *
     * Used to digitize a card to create a server-based Token..
     *
     */
    public function testCreateTokenize()
    {
        $apiInstance = new TokenizeApi($this->client, $this->config);
        try {
            $requestData = self::buildTokenizeRequestSchema();
            $result = $apiInstance->createTokenize($requestData);
            $this->assertNotEmpty($result);
            $this->assertNotEmpty($result->getDecision());
            $this->assertEquals("APPROVED", $result->getDecision());
        } catch (Exception $e) {
            echo 'Exception when calling TokenizeApi->createTokenize: ', $e->getMessage(), PHP_EOL;
            $this->fail($e->getMessage());
        }
    }

    static function buildTokenizeRequestSchema(){
        $data = array(
            'request_id' => "123456",
            'task_id' => "123456",
            'token_type' => "CLOUD",
            'token_requestor_id' => "98765432101",
            'card_info' => array(
                'encryptedData' => self::buildCardInfoData()
            )
        );
        return new \OpenAPI\Client\Model\TokenizeRequestSchema($data);
    }

    static function buildCardInfoData(){
        $data = array(
            'account_number' => "5123456789012345",
            'source' => "CARD_ON_FILE",
            'cardholder_name' => "John Doe",
            'security_code' => "123",
            'expiry_year' => "21",
            'expiry_month' => "09",
            'billing_address' => self::buildBillingAddress()
        );
        return new \OpenAPI\Client\Model\CardInfoData($data);
    }

    static function buildBillingAddress(){
        $data = array(
            'line1' => "100 1st Street",
            'line2' => "Apt. 4B",
            'city' => "St. Louis",
            'country_subdivision' => "MO",
            'postal_code' => "61000"
        );
        return new \OpenAPI\Client\Model\BillingAddress($data);
    }
   
    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

}
