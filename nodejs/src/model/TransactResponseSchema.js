/**
 * MDES for Merchants
 * The MDES APIs are designed as RPC style stateless web services where each API endpoint represents an operation to be performed.  All request and response payloads are sent in the JSON (JavaScript Object Notation) data-interchange format. Each endpoint in the API specifies the HTTP Method used to access it. All strings in request and response objects are to be UTF-8 encoded.  Each API URI includes the major and minor version of API that it conforms to.  This will allow multiple concurrent versions of the API to be deployed simultaneously.  
 *
 * The version of the OpenAPI document: 1.2.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EncryptedPayloadTransact from './EncryptedPayloadTransact';
import TransactError from './TransactError';

/**
 * The TransactResponseSchema model module.
 * @module model/TransactResponseSchema
 * @version 1.2.7
 */
class TransactResponseSchema {
    /**
     * Constructs a new <code>TransactResponseSchema</code>.
     * @alias module:model/TransactResponseSchema
     */
    constructor() { 
        
        TransactResponseSchema.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TransactResponseSchema</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransactResponseSchema} obj Optional instance to populate.
     * @return {module:model/TransactResponseSchema} The populated <code>TransactResponseSchema</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransactResponseSchema();

            if (data.hasOwnProperty('responseId')) {
                obj['responseId'] = ApiClient.convertToType(data['responseId'], 'String');
            }
            if (data.hasOwnProperty('responseHost')) {
                obj['responseHost'] = ApiClient.convertToType(data['responseHost'], 'String');
            }
            if (data.hasOwnProperty('encryptedPayload')) {
                obj['encryptedPayload'] = EncryptedPayloadTransact.constructFromObject(data['encryptedPayload']);
            }
            if (data.hasOwnProperty('errors')) {
                obj['errors'] = TransactError.constructFromObject(data['errors']);
            }
        }
        return obj;
    }


}

/**
 * Unique identifier for the response. 
 * @member {String} responseId
 */
TransactResponseSchema.prototype['responseId'] = undefined;

/**
 * The host that originated the request. Future calls in the same conversation may be routed to this host. 
 * @member {String} responseHost
 */
TransactResponseSchema.prototype['responseHost'] = undefined;

/**
 * @member {module:model/EncryptedPayloadTransact} encryptedPayload
 */
TransactResponseSchema.prototype['encryptedPayload'] = undefined;

/**
 * @member {module:model/TransactError} errors
 */
TransactResponseSchema.prototype['errors'] = undefined;






export default TransactResponseSchema;

