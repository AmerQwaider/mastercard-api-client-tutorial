/**
 * MDES for Merchants
 * The MDES APIs are designed as RPC style stateless web services where each API endpoint represents an operation to be performed.  All request and response payloads are sent in the JSON (JavaScript Object Notation) data-interchange format. Each endpoint in the API specifies the HTTP Method used to access it. All strings in request and response objects are to be UTF-8 encoded.  Each API URI includes the major and minor version of API that it conforms to.  This will allow multiple concurrent versions of the API to be deployed simultaneously.  
 *
 * The version of the OpenAPI document: 1.2.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AuthenticationMethods from './AuthenticationMethods';
import Error from './Error';
import ProductConfig from './ProductConfig';
import TokenDetailTokenizeResponse from './TokenDetailTokenizeResponse';
import TokenInfo from './TokenInfo';

/**
 * The TokenizeResponseSchema model module.
 * @module model/TokenizeResponseSchema
 * @version 1.2.7
 */
class TokenizeResponseSchema {
    /**
     * Constructs a new <code>TokenizeResponseSchema</code>.
     * @alias module:model/TokenizeResponseSchema
     */
    constructor() { 
        
        TokenizeResponseSchema.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TokenizeResponseSchema</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TokenizeResponseSchema} obj Optional instance to populate.
     * @return {module:model/TokenizeResponseSchema} The populated <code>TokenizeResponseSchema</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TokenizeResponseSchema();

            if (data.hasOwnProperty('responseHost')) {
                obj['responseHost'] = ApiClient.convertToType(data['responseHost'], 'String');
            }
            if (data.hasOwnProperty('responseId')) {
                obj['responseId'] = ApiClient.convertToType(data['responseId'], 'String');
            }
            if (data.hasOwnProperty('decision')) {
                obj['decision'] = ApiClient.convertToType(data['decision'], 'String');
            }
            if (data.hasOwnProperty('authenticationMethods')) {
                obj['authenticationMethods'] = ApiClient.convertToType(data['authenticationMethods'], [AuthenticationMethods]);
            }
            if (data.hasOwnProperty('tokenUniqueReference')) {
                obj['tokenUniqueReference'] = ApiClient.convertToType(data['tokenUniqueReference'], 'String');
            }
            if (data.hasOwnProperty('panUniqueReference')) {
                obj['panUniqueReference'] = ApiClient.convertToType(data['panUniqueReference'], 'String');
            }
            if (data.hasOwnProperty('productConfig')) {
                obj['productConfig'] = ProductConfig.constructFromObject(data['productConfig']);
            }
            if (data.hasOwnProperty('tokenInfo')) {
                obj['tokenInfo'] = TokenInfo.constructFromObject(data['tokenInfo']);
            }
            if (data.hasOwnProperty('tokenDetail')) {
                obj['tokenDetail'] = TokenDetailTokenizeResponse.constructFromObject(data['tokenDetail']);
            }
            if (data.hasOwnProperty('errorCode')) {
                obj['errorCode'] = ApiClient.convertToType(data['errorCode'], 'String');
            }
            if (data.hasOwnProperty('errorDescription')) {
                obj['errorDescription'] = ApiClient.convertToType(data['errorDescription'], 'String');
            }
            if (data.hasOwnProperty('errors')) {
                obj['errors'] = Error.constructFromObject(data['errors']);
            }
        }
        return obj;
    }


}

/**
 * The MasterCard host that originated the request. Future calls in the same conversation may be routed to this host.  
 * @member {String} responseHost
 */
TokenizeResponseSchema.prototype['responseHost'] = undefined;

/**
 * Unique identifier for the response. 
 * @member {String} responseId
 */
TokenizeResponseSchema.prototype['responseId'] = undefined;

/**
 * The tokenization decision for this digitization request. Must be either APPROVED (Digitization request was approved), DECLINED (Digitization request was declined) OR REQUIRE_ADDITIONAL_AUTHENTICATION Digitization request was approved but optionally requires additional authentication. One or more Authentication methods may be provided). 
 * @member {String} decision
 */
TokenizeResponseSchema.prototype['decision'] = undefined;

/**
 * @member {Array.<module:model/AuthenticationMethods>} authenticationMethods
 */
TokenizeResponseSchema.prototype['authenticationMethods'] = undefined;

/**
 * The unique reference allocated to the new Token. Serves as a unique identifier for all subsequent queries or management functions relating to this Token. Provided if the decision was APPROVED or REQUIRE_ADDITIONAL_AUTHENTICATION.    __Max Length:64__ 
 * @member {String} tokenUniqueReference
 */
TokenizeResponseSchema.prototype['tokenUniqueReference'] = undefined;

/**
 * The unique reference allocated to the Account Primary Account Number. Provided if the decision was APPROVED or REQUIRE_ADDITIONAL_AUTHENTICATION.  __Max Length:64__ 
 * @member {String} panUniqueReference
 */
TokenizeResponseSchema.prototype['panUniqueReference'] = undefined;

/**
 * @member {module:model/ProductConfig} productConfig
 */
TokenizeResponseSchema.prototype['productConfig'] = undefined;

/**
 * @member {module:model/TokenInfo} tokenInfo
 */
TokenizeResponseSchema.prototype['tokenInfo'] = undefined;

/**
 * @member {module:model/TokenDetailTokenizeResponse} tokenDetail
 */
TokenizeResponseSchema.prototype['tokenDetail'] = undefined;

/**
 * __CONDITIONAL__<br> Returned in the event of and error and contains the reason the operation failed. Only use if errors object is not present.<br> __Max Length: 32__ 
 * @member {String} errorCode
 */
TokenizeResponseSchema.prototype['errorCode'] = undefined;

/**
 * __CONDITIONAL__<br> Returned in the event of and error and contains a description of why the operation failed. Only use if errors object is not present.<br> __Max Length: 32__   
 * @member {String} errorDescription
 */
TokenizeResponseSchema.prototype['errorDescription'] = undefined;

/**
 * @member {module:model/Error} errors
 */
TokenizeResponseSchema.prototype['errors'] = undefined;






export default TokenizeResponseSchema;

