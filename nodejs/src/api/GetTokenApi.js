/**
 * MDES for Merchants
 * The MDES APIs are designed as RPC style stateless web services where each API endpoint represents an operation to be performed.  All request and response payloads are sent in the JSON (JavaScript Object Notation) data-interchange format. Each endpoint in the API specifies the HTTP Method used to access it. All strings in request and response objects are to be UTF-8 encoded.  Each API URI includes the major and minor version of API that it conforms to.  This will allow multiple concurrent versions of the API to be deployed simultaneously.  
 *
 * The version of the OpenAPI document: 1.2.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorsResponse from '../model/ErrorsResponse';
import GetTokenRequestSchema from '../model/GetTokenRequestSchema';
import GetTokenResponseSchema from '../model/GetTokenResponseSchema';

/**
* GetToken service.
* @module api/GetTokenApi
* @version 1.2.7
*/
export default class GetTokenApi {

    /**
    * Constructs a new GetTokenApi. 
    * @alias module:api/GetTokenApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getToken operation.
     * @callback module:api/GetTokenApi~getTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetTokenResponseSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Used to get the status and details of a single given Token.
     * This API is used to get the status and details of a single given Token. It may be used to check current Token state or in exception scenarios (such as network time out) to ensure that external systems remain in sync with the Token state as maintained by MDES. Optionally, if requested, the token number can also be provided in the response (in encrypted form).  
     * @param {Object} opts Optional parameters
     * @param {module:model/GetTokenRequestSchema} opts.getTokenRequestSchema Contains the details of the request message. 
     * @param {module:api/GetTokenApi~getTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetTokenResponseSchema}
     */
    getToken(opts, callback) {
      opts = opts || {};
      let postBody = opts['getTokenRequestSchema'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetTokenResponseSchema;
      return this.apiClient.callApi(
        '/digitization/static/1/0/getToken', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
