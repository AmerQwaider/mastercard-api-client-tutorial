/*
 * MDES for Merchants
 * The MDES APIs are designed as RPC style stateless web services where each API endpoint represents an operation to be performed.  All request and response payloads are sent in the JSON (JavaScript Object Notation) data-interchange format. Each endpoint in the API specifies the HTTP Method used to access it. All strings in request and response objects are to be UTF-8 encoded.  Each API URI includes the major and minor version of API that it conforms to.  This will allow multiple concurrent versions of the API to be deployed simultaneously.  
 *
 * OpenAPI spec version: 1.2.7
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.CardInfoData;
import java.io.IOException;

/**
 * CardInfo
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-05-29T13:19:04.981+01:00")
public class CardInfo {
  @SerializedName("panUniqueReference")
  private String panUniqueReference = null;

  @SerializedName("tokenUniqueReferenceForPanInfo")
  private String tokenUniqueReferenceForPanInfo = null;

  @SerializedName("publicKeyFingerprint")
  private String publicKeyFingerprint = null;

  @SerializedName("encryptedKey")
  private String encryptedKey = null;

  @SerializedName("oaepHashingAlgorithm")
  private String oaepHashingAlgorithm = null;

  @SerializedName("iv")
  private String iv = null;

  @SerializedName("encryptedData")
  private CardInfoData encryptedData = null;

  public CardInfo panUniqueReference(String panUniqueReference) {
    this.panUniqueReference = panUniqueReference;
    return this;
  }

   /**
   *  __(CONDITIONAL)__ &lt;br&gt;  For repeat digitizations, the unique reference allocated to the Primary Account Number. When supplied, the tokenUniqueReferenceForPanInfo, accountNumber, expiryMonth and expiryYear must be omitted from CardInfoData.   Only allowed if  tokenUniqueReferenceForPanInfo is not present and encrypted data does not contain the account information. &lt;br&gt; __Max Length:64__ 
   * @return panUniqueReference
  **/
  @ApiModelProperty(value = " __(CONDITIONAL)__ <br>  For repeat digitizations, the unique reference allocated to the Primary Account Number. When supplied, the tokenUniqueReferenceForPanInfo, accountNumber, expiryMonth and expiryYear must be omitted from CardInfoData.   Only allowed if  tokenUniqueReferenceForPanInfo is not present and encrypted data does not contain the account information. <br> __Max Length:64__ ")
  public String getPanUniqueReference() {
    return panUniqueReference;
  }

  public void setPanUniqueReference(String panUniqueReference) {
    this.panUniqueReference = panUniqueReference;
  }

  public CardInfo tokenUniqueReferenceForPanInfo(String tokenUniqueReferenceForPanInfo) {
    this.tokenUniqueReferenceForPanInfo = tokenUniqueReferenceForPanInfo;
    return this;
  }

   /**
   *  __(CONDITIONAL)__&lt;br&gt;  For repeat digitizations, the unique reference allocated to the token will be used to retrieve the account number and expiration date. When supplied, the panUniqueReference, accountNumber, expiryMonth and expiryYear must be omitted from CardInfoData.    Only allowed if panUniqueReference is not present and encrypted data does not contain the account information. &lt;br&gt; __Max Length:64__ 
   * @return tokenUniqueReferenceForPanInfo
  **/
  @ApiModelProperty(value = " __(CONDITIONAL)__<br>  For repeat digitizations, the unique reference allocated to the token will be used to retrieve the account number and expiration date. When supplied, the panUniqueReference, accountNumber, expiryMonth and expiryYear must be omitted from CardInfoData.    Only allowed if panUniqueReference is not present and encrypted data does not contain the account information. <br> __Max Length:64__ ")
  public String getTokenUniqueReferenceForPanInfo() {
    return tokenUniqueReferenceForPanInfo;
  }

  public void setTokenUniqueReferenceForPanInfo(String tokenUniqueReferenceForPanInfo) {
    this.tokenUniqueReferenceForPanInfo = tokenUniqueReferenceForPanInfo;
  }

  public CardInfo publicKeyFingerprint(String publicKeyFingerprint) {
    this.publicKeyFingerprint = publicKeyFingerprint;
    return this;
  }

   /**
   * The fingerprint of the public key used to encrypt the ephemeral AES key. Required if encryptedData is present.&lt;br&gt;     __Max Length:64__ Hex-encoded data (case-insensitive). 
   * @return publicKeyFingerprint
  **/
  @ApiModelProperty(example = "4c4ead5927f0df8117f178eea9308daa58e27c2b", value = "The fingerprint of the public key used to encrypt the ephemeral AES key. Required if encryptedData is present.<br>     __Max Length:64__ Hex-encoded data (case-insensitive). ")
  public String getPublicKeyFingerprint() {
    return publicKeyFingerprint;
  }

  public void setPublicKeyFingerprint(String publicKeyFingerprint) {
    this.publicKeyFingerprint = publicKeyFingerprint;
  }

  public CardInfo encryptedKey(String encryptedKey) {
    this.encryptedKey = encryptedKey;
    return this;
  }

   /**
   * One-time use AES key encrypted by the MasterCard public key (as identified by &#39;publicKeyFingerprint&#39;) using the OAEP or RSA Encryption Standard PKCS #1 v1.5  (depending on the value of &#39;oaepHashingAlgorithm&#39;. Requirement is for a 128-bit key (with 256-bit key supported as an option). Required if encrypted data is present. &lt;br&gt;   __Max Length:512__ Hex-encoded data (case-insensitive).\&quot; 
   * @return encryptedKey
  **/
  @ApiModelProperty(example = "A1B2C3D4E5F6112233445566", value = "One-time use AES key encrypted by the MasterCard public key (as identified by 'publicKeyFingerprint') using the OAEP or RSA Encryption Standard PKCS #1 v1.5  (depending on the value of 'oaepHashingAlgorithm'. Requirement is for a 128-bit key (with 256-bit key supported as an option). Required if encrypted data is present. <br>   __Max Length:512__ Hex-encoded data (case-insensitive).\" ")
  public String getEncryptedKey() {
    return encryptedKey;
  }

  public void setEncryptedKey(String encryptedKey) {
    this.encryptedKey = encryptedKey;
  }

  public CardInfo oaepHashingAlgorithm(String oaepHashingAlgorithm) {
    this.oaepHashingAlgorithm = oaepHashingAlgorithm;
    return this;
  }

   /**
   * Hashing algorithm used with the OAEP scheme. Must be either SHA256 or SHA512.     __Max Length:6__ 
   * @return oaepHashingAlgorithm
  **/
  @ApiModelProperty(example = "SHA512", value = "Hashing algorithm used with the OAEP scheme. Must be either SHA256 or SHA512.     __Max Length:6__ ")
  public String getOaepHashingAlgorithm() {
    return oaepHashingAlgorithm;
  }

  public void setOaepHashingAlgorithm(String oaepHashingAlgorithm) {
    this.oaepHashingAlgorithm = oaepHashingAlgorithm;
  }

  public CardInfo iv(String iv) {
    this.iv = iv;
    return this;
  }

   /**
   * It is recommended to supply a random initialization vector when encrypting the data using the one-time use AES key. Must be exactly 16 bytes (32 character hex string) to match the block size. Hex-encoded data (case-insensitive).  &lt;br&gt;__Max Length:32__ 
   * @return iv
  **/
  @ApiModelProperty(example = "NA", value = "It is recommended to supply a random initialization vector when encrypting the data using the one-time use AES key. Must be exactly 16 bytes (32 character hex string) to match the block size. Hex-encoded data (case-insensitive).  <br>__Max Length:32__ ")
  public String getIv() {
    return iv;
  }

  public void setIv(String iv) {
    this.iv = iv;
  }

  public CardInfo encryptedData(CardInfoData encryptedData) {
    this.encryptedData = encryptedData;
    return this;
  }

   /**
   * Get encryptedData
   * @return encryptedData
  **/
  @ApiModelProperty(value = "")
  public CardInfoData getEncryptedData() {
    return encryptedData;
  }

  public void setEncryptedData(CardInfoData encryptedData) {
    this.encryptedData = encryptedData;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CardInfo cardInfo = (CardInfo) o;
    return Objects.equals(this.panUniqueReference, cardInfo.panUniqueReference) &&
        Objects.equals(this.tokenUniqueReferenceForPanInfo, cardInfo.tokenUniqueReferenceForPanInfo) &&
        Objects.equals(this.publicKeyFingerprint, cardInfo.publicKeyFingerprint) &&
        Objects.equals(this.encryptedKey, cardInfo.encryptedKey) &&
        Objects.equals(this.oaepHashingAlgorithm, cardInfo.oaepHashingAlgorithm) &&
        Objects.equals(this.iv, cardInfo.iv) &&
        Objects.equals(this.encryptedData, cardInfo.encryptedData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(panUniqueReference, tokenUniqueReferenceForPanInfo, publicKeyFingerprint, encryptedKey, oaepHashingAlgorithm, iv, encryptedData);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CardInfo {\n");
    
    sb.append("    panUniqueReference: ").append(toIndentedString(panUniqueReference)).append("\n");
    sb.append("    tokenUniqueReferenceForPanInfo: ").append(toIndentedString(tokenUniqueReferenceForPanInfo)).append("\n");
    sb.append("    publicKeyFingerprint: ").append(toIndentedString(publicKeyFingerprint)).append("\n");
    sb.append("    encryptedKey: ").append(toIndentedString(encryptedKey)).append("\n");
    sb.append("    oaepHashingAlgorithm: ").append(toIndentedString(oaepHashingAlgorithm)).append("\n");
    sb.append("    iv: ").append(toIndentedString(iv)).append("\n");
    sb.append("    encryptedData: ").append(toIndentedString(encryptedData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

