/*
 * MDES for Merchants
 * The MDES APIs are designed as RPC style stateless web services where each API endpoint represents an operation to be performed.  All request and response payloads are sent in the JSON (JavaScript Object Notation) data-interchange format. Each endpoint in the API specifies the HTTP Method used to access it. All strings in request and response objects are to be UTF-8 encoded.  Each API URI includes the major and minor version of API that it conforms to.  This will allow multiple concurrent versions of the API to be deployed simultaneously.  
 *
 * The version of the OpenAPI document: 1.2.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorsResponse;
import org.openapitools.client.model.GetTokenRequestSchema;
import org.openapitools.client.model.GetTokenResponseSchema;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GetTokenApi {
    private ApiClient localVarApiClient;

    public GetTokenApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GetTokenApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getToken
     * @param getTokenRequestSchema Contains the details of the request message.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains the details of the response message.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTokenCall(GetTokenRequestSchema getTokenRequestSchema, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = getTokenRequestSchema;

        // create path and map variables
        String localVarPath = "/digitization/static/1/0/getToken";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTokenValidateBeforeCall(GetTokenRequestSchema getTokenRequestSchema, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getTokenCall(getTokenRequestSchema, _callback);
        return localVarCall;

    }

    /**
     * Used to get the status and details of a single given Token.
     * This API is used to get the status and details of a single given Token. It may be used to check current Token state or in exception scenarios (such as network time out) to ensure that external systems remain in sync with the Token state as maintained by MDES. Optionally, if requested, the token number can also be provided in the response (in encrypted form).  
     * @param getTokenRequestSchema Contains the details of the request message.  (optional)
     * @return GetTokenResponseSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains the details of the response message.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error  </td><td>  -  </td></tr>
     </table>
     */
    public GetTokenResponseSchema getToken(GetTokenRequestSchema getTokenRequestSchema) throws ApiException {
        ApiResponse<GetTokenResponseSchema> localVarResp = getTokenWithHttpInfo(getTokenRequestSchema);
        return localVarResp.getData();
    }

    /**
     * Used to get the status and details of a single given Token.
     * This API is used to get the status and details of a single given Token. It may be used to check current Token state or in exception scenarios (such as network time out) to ensure that external systems remain in sync with the Token state as maintained by MDES. Optionally, if requested, the token number can also be provided in the response (in encrypted form).  
     * @param getTokenRequestSchema Contains the details of the request message.  (optional)
     * @return ApiResponse&lt;GetTokenResponseSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains the details of the response message.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetTokenResponseSchema> getTokenWithHttpInfo(GetTokenRequestSchema getTokenRequestSchema) throws ApiException {
        okhttp3.Call localVarCall = getTokenValidateBeforeCall(getTokenRequestSchema, null);
        Type localVarReturnType = new TypeToken<GetTokenResponseSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Used to get the status and details of a single given Token. (asynchronously)
     * This API is used to get the status and details of a single given Token. It may be used to check current Token state or in exception scenarios (such as network time out) to ensure that external systems remain in sync with the Token state as maintained by MDES. Optionally, if requested, the token number can also be provided in the response (in encrypted form).  
     * @param getTokenRequestSchema Contains the details of the request message.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains the details of the response message.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTokenAsync(GetTokenRequestSchema getTokenRequestSchema, final ApiCallback<GetTokenResponseSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTokenValidateBeforeCall(getTokenRequestSchema, _callback);
        Type localVarReturnType = new TypeToken<GetTokenResponseSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
