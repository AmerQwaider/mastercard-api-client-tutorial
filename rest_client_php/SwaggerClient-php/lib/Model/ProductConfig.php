<?php
/**
 * ProductConfig
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * MDES for Merchants
 *
 * The MDES APIs are designed as RPC style stateless web services where each API endpoint represents an operation to be performed.  All request and response payloads are sent in the JSON (JavaScript Object Notation) data-interchange format. Each endpoint in the API specifies the HTTP Method used to access it. All strings in request and response objects are to be UTF-8 encoded.  Each API URI includes the major and minor version of API that it conforms to.  This will allow multiple concurrent versions of the API to be deployed simultaneously.
 *
 * OpenAPI spec version: 1.2.7
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ProductConfig Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProductConfig implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'productConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'brand_logo_asset_id' => 'string',
        'issuer_logo_asset_id' => 'string',
        'is_co_branded' => 'string',
        'co_brand_name' => 'string',
        'co_brand_logo_asset_id' => 'string',
        'card_background_combined_asset_id' => 'string',
        'card_background_asset_id' => 'string',
        'icon_asset_id' => 'string',
        'foreground_color' => 'string',
        'issuer_name' => 'string',
        'short_description' => 'string',
        'long_description' => 'string',
        'customer_service_url' => 'string',
        'customer_service_email' => 'string',
        'customer_service_phone_number' => 'string',
        'issuer_mobile_app' => 'object',
        'online_banking_login_url' => 'string',
        'terms_and_conditions_url' => 'string',
        'privacy_policy_url' => 'string',
        'issuer_product_config_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'brand_logo_asset_id' => null,
        'issuer_logo_asset_id' => null,
        'is_co_branded' => null,
        'co_brand_name' => null,
        'co_brand_logo_asset_id' => null,
        'card_background_combined_asset_id' => null,
        'card_background_asset_id' => null,
        'icon_asset_id' => null,
        'foreground_color' => null,
        'issuer_name' => null,
        'short_description' => null,
        'long_description' => null,
        'customer_service_url' => null,
        'customer_service_email' => null,
        'customer_service_phone_number' => null,
        'issuer_mobile_app' => null,
        'online_banking_login_url' => null,
        'terms_and_conditions_url' => null,
        'privacy_policy_url' => null,
        'issuer_product_config_code' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'brand_logo_asset_id' => 'brandLogoAssetId',
        'issuer_logo_asset_id' => 'issuerLogoAssetId',
        'is_co_branded' => 'isCoBranded',
        'co_brand_name' => 'coBrandName',
        'co_brand_logo_asset_id' => 'coBrandLogoAssetId',
        'card_background_combined_asset_id' => 'cardBackgroundCombinedAssetId',
        'card_background_asset_id' => 'cardBackgroundAssetId',
        'icon_asset_id' => 'iconAssetId',
        'foreground_color' => 'foregroundColor',
        'issuer_name' => 'issuerName',
        'short_description' => 'shortDescription',
        'long_description' => 'longDescription',
        'customer_service_url' => 'customerServiceUrl',
        'customer_service_email' => 'customerServiceEmail',
        'customer_service_phone_number' => 'customerServicePhoneNumber',
        'issuer_mobile_app' => 'issuerMobileApp',
        'online_banking_login_url' => 'onlineBankingLoginUrl',
        'terms_and_conditions_url' => 'termsAndConditionsUrl',
        'privacy_policy_url' => 'privacyPolicyUrl',
        'issuer_product_config_code' => 'issuerProductConfigCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'brand_logo_asset_id' => 'setBrandLogoAssetId',
        'issuer_logo_asset_id' => 'setIssuerLogoAssetId',
        'is_co_branded' => 'setIsCoBranded',
        'co_brand_name' => 'setCoBrandName',
        'co_brand_logo_asset_id' => 'setCoBrandLogoAssetId',
        'card_background_combined_asset_id' => 'setCardBackgroundCombinedAssetId',
        'card_background_asset_id' => 'setCardBackgroundAssetId',
        'icon_asset_id' => 'setIconAssetId',
        'foreground_color' => 'setForegroundColor',
        'issuer_name' => 'setIssuerName',
        'short_description' => 'setShortDescription',
        'long_description' => 'setLongDescription',
        'customer_service_url' => 'setCustomerServiceUrl',
        'customer_service_email' => 'setCustomerServiceEmail',
        'customer_service_phone_number' => 'setCustomerServicePhoneNumber',
        'issuer_mobile_app' => 'setIssuerMobileApp',
        'online_banking_login_url' => 'setOnlineBankingLoginUrl',
        'terms_and_conditions_url' => 'setTermsAndConditionsUrl',
        'privacy_policy_url' => 'setPrivacyPolicyUrl',
        'issuer_product_config_code' => 'setIssuerProductConfigCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'brand_logo_asset_id' => 'getBrandLogoAssetId',
        'issuer_logo_asset_id' => 'getIssuerLogoAssetId',
        'is_co_branded' => 'getIsCoBranded',
        'co_brand_name' => 'getCoBrandName',
        'co_brand_logo_asset_id' => 'getCoBrandLogoAssetId',
        'card_background_combined_asset_id' => 'getCardBackgroundCombinedAssetId',
        'card_background_asset_id' => 'getCardBackgroundAssetId',
        'icon_asset_id' => 'getIconAssetId',
        'foreground_color' => 'getForegroundColor',
        'issuer_name' => 'getIssuerName',
        'short_description' => 'getShortDescription',
        'long_description' => 'getLongDescription',
        'customer_service_url' => 'getCustomerServiceUrl',
        'customer_service_email' => 'getCustomerServiceEmail',
        'customer_service_phone_number' => 'getCustomerServicePhoneNumber',
        'issuer_mobile_app' => 'getIssuerMobileApp',
        'online_banking_login_url' => 'getOnlineBankingLoginUrl',
        'terms_and_conditions_url' => 'getTermsAndConditionsUrl',
        'privacy_policy_url' => 'getPrivacyPolicyUrl',
        'issuer_product_config_code' => 'getIssuerProductConfigCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['brand_logo_asset_id'] = isset($data['brand_logo_asset_id']) ? $data['brand_logo_asset_id'] : null;
        $this->container['issuer_logo_asset_id'] = isset($data['issuer_logo_asset_id']) ? $data['issuer_logo_asset_id'] : null;
        $this->container['is_co_branded'] = isset($data['is_co_branded']) ? $data['is_co_branded'] : null;
        $this->container['co_brand_name'] = isset($data['co_brand_name']) ? $data['co_brand_name'] : null;
        $this->container['co_brand_logo_asset_id'] = isset($data['co_brand_logo_asset_id']) ? $data['co_brand_logo_asset_id'] : null;
        $this->container['card_background_combined_asset_id'] = isset($data['card_background_combined_asset_id']) ? $data['card_background_combined_asset_id'] : null;
        $this->container['card_background_asset_id'] = isset($data['card_background_asset_id']) ? $data['card_background_asset_id'] : null;
        $this->container['icon_asset_id'] = isset($data['icon_asset_id']) ? $data['icon_asset_id'] : null;
        $this->container['foreground_color'] = isset($data['foreground_color']) ? $data['foreground_color'] : null;
        $this->container['issuer_name'] = isset($data['issuer_name']) ? $data['issuer_name'] : null;
        $this->container['short_description'] = isset($data['short_description']) ? $data['short_description'] : null;
        $this->container['long_description'] = isset($data['long_description']) ? $data['long_description'] : null;
        $this->container['customer_service_url'] = isset($data['customer_service_url']) ? $data['customer_service_url'] : null;
        $this->container['customer_service_email'] = isset($data['customer_service_email']) ? $data['customer_service_email'] : null;
        $this->container['customer_service_phone_number'] = isset($data['customer_service_phone_number']) ? $data['customer_service_phone_number'] : null;
        $this->container['issuer_mobile_app'] = isset($data['issuer_mobile_app']) ? $data['issuer_mobile_app'] : null;
        $this->container['online_banking_login_url'] = isset($data['online_banking_login_url']) ? $data['online_banking_login_url'] : null;
        $this->container['terms_and_conditions_url'] = isset($data['terms_and_conditions_url']) ? $data['terms_and_conditions_url'] : null;
        $this->container['privacy_policy_url'] = isset($data['privacy_policy_url']) ? $data['privacy_policy_url'] : null;
        $this->container['issuer_product_config_code'] = isset($data['issuer_product_config_code']) ? $data['issuer_product_config_code'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets brand_logo_asset_id
     *
     * @return string
     */
    public function getBrandLogoAssetId()
    {
        return $this->container['brand_logo_asset_id'];
    }

    /**
     * Sets brand_logo_asset_id
     *
     * @param string $brand_logo_asset_id The MasterCard or Maestro brand logo associated with this card. Provided as an Asset ID � use the Get Asset API to retrieve the actual asset. Always returned in Product Configuration object <br>    __Max Length: 64__<br> __Required: Yes__
     *
     * @return $this
     */
    public function setBrandLogoAssetId($brand_logo_asset_id)
    {
        $this->container['brand_logo_asset_id'] = $brand_logo_asset_id;

        return $this;
    }

    /**
     * Gets issuer_logo_asset_id
     *
     * @return string
     */
    public function getIssuerLogoAssetId()
    {
        return $this->container['issuer_logo_asset_id'];
    }

    /**
     * Sets issuer_logo_asset_id
     *
     * @param string $issuer_logo_asset_id The logo of the issuing bank. Provided as an Asset ID � use the Get Asset API to retrieve the actual asset. Always returned in Product Configuration object <br>     __Max Length:64__<br> __Required: Yes__
     *
     * @return $this
     */
    public function setIssuerLogoAssetId($issuer_logo_asset_id)
    {
        $this->container['issuer_logo_asset_id'] = $issuer_logo_asset_id;

        return $this;
    }

    /**
     * Gets is_co_branded
     *
     * @return string
     */
    public function getIsCoBranded()
    {
        return $this->container['is_co_branded'];
    }

    /**
     * Sets is_co_branded
     *
     * @param string $is_co_branded Whether the product is co-branded. Must be either true (this is a co-branded product) or false (this is not a co-branded product). Always returned in Product Configuration object <br>    __Max Length:5__<br> __Required: Yes__
     *
     * @return $this
     */
    public function setIsCoBranded($is_co_branded)
    {
        $this->container['is_co_branded'] = $is_co_branded;

        return $this;
    }

    /**
     * Gets co_brand_name
     *
     * @return string
     */
    public function getCoBrandName()
    {
        return $this->container['co_brand_name'];
    }

    /**
     * Sets co_brand_name
     *
     * @param string $co_brand_name Textual name of the co-brand partner. Required if CoBranded is true, not present otherwise.  <br>   __Max Length:128__<br> __Required: Conditional � required if isCoBranded = \"true\". Not present otherwise__
     *
     * @return $this
     */
    public function setCoBrandName($co_brand_name)
    {
        $this->container['co_brand_name'] = $co_brand_name;

        return $this;
    }

    /**
     * Gets co_brand_logo_asset_id
     *
     * @return string
     */
    public function getCoBrandLogoAssetId()
    {
        return $this->container['co_brand_logo_asset_id'];
    }

    /**
     * Sets co_brand_logo_asset_id
     *
     * @param string $co_brand_logo_asset_id The co-brand logo (if any) for this product. Provided as an Asset ID � use the Get Asset API to retrieve the actual asset. <br>   __Max Length:64__<br> __Required: No__
     *
     * @return $this
     */
    public function setCoBrandLogoAssetId($co_brand_logo_asset_id)
    {
        $this->container['co_brand_logo_asset_id'] = $co_brand_logo_asset_id;

        return $this;
    }

    /**
     * Gets card_background_combined_asset_id
     *
     * @return string
     */
    public function getCardBackgroundCombinedAssetId()
    {
        return $this->container['card_background_combined_asset_id'];
    }

    /**
     * Sets card_background_combined_asset_id
     *
     * @param string $card_background_combined_asset_id The card image used to represent the digital card in the wallet. This �combined� option contains the MasterCard, bank and any co- brand logos.  Provided as an Asset ID � use the Get Asset API to retrieve the actual asset.     __Max Length:64__<br> __Required: Conditional � either CardBackgroundCombined or CardBackground will be provided__
     *
     * @return $this
     */
    public function setCardBackgroundCombinedAssetId($card_background_combined_asset_id)
    {
        $this->container['card_background_combined_asset_id'] = $card_background_combined_asset_id;

        return $this;
    }

    /**
     * Gets card_background_asset_id
     *
     * @return string
     */
    public function getCardBackgroundAssetId()
    {
        return $this->container['card_background_asset_id'];
    }

    /**
     * Sets card_background_asset_id
     *
     * @param string $card_background_asset_id The card image used to represent the digital card in the wallet. This �non-combined� option does not contain the MasterCard, bank, or co-brand logos. Provided as an Asset ID � use the Get Asset API to retrieve the actual asset. <br>     __Max Length:64__<br> __Required: Conditional � either CardBackgroundCombined or CardBackground will be provided__
     *
     * @return $this
     */
    public function setCardBackgroundAssetId($card_background_asset_id)
    {
        $this->container['card_background_asset_id'] = $card_background_asset_id;

        return $this;
    }

    /**
     * Gets icon_asset_id
     *
     * @return string
     */
    public function getIconAssetId()
    {
        return $this->container['icon_asset_id'];
    }

    /**
     * Sets icon_asset_id
     *
     * @param string $icon_asset_id The icon representing the primary brand(s) associated with this product. Provided as an Asset ID � use the Get Asset API to retrieve the actual asset. Always returned in Product Configuration object<br>    __Max Length:64__<br> __Required: Yes__
     *
     * @return $this
     */
    public function setIconAssetId($icon_asset_id)
    {
        $this->container['icon_asset_id'] = $icon_asset_id;

        return $this;
    }

    /**
     * Gets foreground_color
     *
     * @return string
     */
    public function getForegroundColor()
    {
        return $this->container['foreground_color'];
    }

    /**
     * Sets foreground_color
     *
     * @param string $foreground_color Foreground color, used to overlay text on top of the card image. Always returned in Product Configuration object<br>    __Max Length:6__ Hexadecimal RGB color format (case-insensitive).<br> __Required: Yes__
     *
     * @return $this
     */
    public function setForegroundColor($foreground_color)
    {
        $this->container['foreground_color'] = $foreground_color;

        return $this;
    }

    /**
     * Gets issuer_name
     *
     * @return string
     */
    public function getIssuerName()
    {
        return $this->container['issuer_name'];
    }

    /**
     * Sets issuer_name
     *
     * @param string $issuer_name Name of the issuing bank. Always returned in Product Configuration object <br>    __Max Length:64__<br> __Required: Yes__
     *
     * @return $this
     */
    public function setIssuerName($issuer_name)
    {
        $this->container['issuer_name'] = $issuer_name;

        return $this;
    }

    /**
     * Gets short_description
     *
     * @return string
     */
    public function getShortDescription()
    {
        return $this->container['short_description'];
    }

    /**
     * Sets short_description
     *
     * @param string $short_description A short description for this product. Always returned in Product Configuration object  <br>   __Max Length:128__<br> __Required: Yes__
     *
     * @return $this
     */
    public function setShortDescription($short_description)
    {
        $this->container['short_description'] = $short_description;

        return $this;
    }

    /**
     * Gets long_description
     *
     * @return string
     */
    public function getLongDescription()
    {
        return $this->container['long_description'];
    }

    /**
     * Sets long_description
     *
     * @param string $long_description A long description for this product.  <br>   __Max Length:256__<br> __Required: No__
     *
     * @return $this
     */
    public function setLongDescription($long_description)
    {
        $this->container['long_description'] = $long_description;

        return $this;
    }

    /**
     * Gets customer_service_url
     *
     * @return string
     */
    public function getCustomerServiceUrl()
    {
        return $this->container['customer_service_url'];
    }

    /**
     * Sets customer_service_url
     *
     * @param string $customer_service_url Customer service website of the issuing bank. <br>    __Max Length:128__<br> __Required: No__
     *
     * @return $this
     */
    public function setCustomerServiceUrl($customer_service_url)
    {
        $this->container['customer_service_url'] = $customer_service_url;

        return $this;
    }

    /**
     * Gets customer_service_email
     *
     * @return string
     */
    public function getCustomerServiceEmail()
    {
        return $this->container['customer_service_email'];
    }

    /**
     * Sets customer_service_email
     *
     * @param string $customer_service_email Customer service email address of the issuing bank. <br>    __Max Length:64__<br> __Required: No__
     *
     * @return $this
     */
    public function setCustomerServiceEmail($customer_service_email)
    {
        $this->container['customer_service_email'] = $customer_service_email;

        return $this;
    }

    /**
     * Gets customer_service_phone_number
     *
     * @return string
     */
    public function getCustomerServicePhoneNumber()
    {
        return $this->container['customer_service_phone_number'];
    }

    /**
     * Sets customer_service_phone_number
     *
     * @param string $customer_service_phone_number Customer service phone number of the issuing bank. <br>    __Max Length:64__<br> __Required: No__
     *
     * @return $this
     */
    public function setCustomerServicePhoneNumber($customer_service_phone_number)
    {
        $this->container['customer_service_phone_number'] = $customer_service_phone_number;

        return $this;
    }

    /**
     * Gets issuer_mobile_app
     *
     * @return object
     */
    public function getIssuerMobileApp()
    {
        return $this->container['issuer_mobile_app'];
    }

    /**
     * Sets issuer_mobile_app
     *
     * @param object $issuer_mobile_app Contains one or more mobile app details that may be used to deep link from the Mobile Payment App to the issuer mobile app. <br>    __Max Length:64__<br> __Required: No__
     *
     * @return $this
     */
    public function setIssuerMobileApp($issuer_mobile_app)
    {
        $this->container['issuer_mobile_app'] = $issuer_mobile_app;

        return $this;
    }

    /**
     * Gets online_banking_login_url
     *
     * @return string
     */
    public function getOnlineBankingLoginUrl()
    {
        return $this->container['online_banking_login_url'];
    }

    /**
     * Sets online_banking_login_url
     *
     * @param string $online_banking_login_url Logon URL for the issuing bank�s online banking website.<br>     __Max Length:128__
     *
     * @return $this
     */
    public function setOnlineBankingLoginUrl($online_banking_login_url)
    {
        $this->container['online_banking_login_url'] = $online_banking_login_url;

        return $this;
    }

    /**
     * Gets terms_and_conditions_url
     *
     * @return string
     */
    public function getTermsAndConditionsUrl()
    {
        return $this->container['terms_and_conditions_url'];
    }

    /**
     * Sets terms_and_conditions_url
     *
     * @param string $terms_and_conditions_url URL linking to the issuing bank�s terms and conditions for this product.<br>     __Max Length:128__<br> __Required: No__
     *
     * @return $this
     */
    public function setTermsAndConditionsUrl($terms_and_conditions_url)
    {
        $this->container['terms_and_conditions_url'] = $terms_and_conditions_url;

        return $this;
    }

    /**
     * Gets privacy_policy_url
     *
     * @return string
     */
    public function getPrivacyPolicyUrl()
    {
        return $this->container['privacy_policy_url'];
    }

    /**
     * Sets privacy_policy_url
     *
     * @param string $privacy_policy_url URL linking to the issuing bank�s privacy policy for this product.<br>     __Max Length:128__<br> __Required: No__
     *
     * @return $this
     */
    public function setPrivacyPolicyUrl($privacy_policy_url)
    {
        $this->container['privacy_policy_url'] = $privacy_policy_url;

        return $this;
    }

    /**
     * Gets issuer_product_config_code
     *
     * @return string
     */
    public function getIssuerProductConfigCode()
    {
        return $this->container['issuer_product_config_code'];
    }

    /**
     * Sets issuer_product_config_code
     *
     * @param string $issuer_product_config_code Freeform identifier for this product configuration as assigned by the issuer.<br>     __Max Length:128__<br> __Required: No__
     *
     * @return $this
     */
    public function setIssuerProductConfigCode($issuer_product_config_code)
    {
        $this->container['issuer_product_config_code'] = $issuer_product_config_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


