<?php
/**
 * Token
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * MDES for Merchants
 *
 * The MDES APIs are designed as RPC style stateless web services where each API endpoint represents an operation to be performed.  All request and response payloads are sent in the JSON (JavaScript Object Notation) data-interchange format. Each endpoint in the API specifies the HTTP Method used to access it. All strings in request and response objects are to be UTF-8 encoded.  Each API URI includes the major and minor version of API that it conforms to.  This will allow multiple concurrent versions of the API to be deployed simultaneously.
 *
 * OpenAPI spec version: 1.2.7
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Token Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Token implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'token';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'token_unique_reference' => 'string',
        'status' => 'string',
        'suspended_by' => 'string[]',
        'status_timestamp' => 'string',
        'product_config' => '\Swagger\Client\Model\ProductConfig',
        'token_info' => '\Swagger\Client\Model\TokenInfo'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'token_unique_reference' => null,
        'status' => null,
        'suspended_by' => null,
        'status_timestamp' => null,
        'product_config' => null,
        'token_info' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'token_unique_reference' => 'tokenUniqueReference',
        'status' => 'status',
        'suspended_by' => 'suspendedBy',
        'status_timestamp' => 'statusTimestamp',
        'product_config' => 'productConfig',
        'token_info' => 'tokenInfo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'token_unique_reference' => 'setTokenUniqueReference',
        'status' => 'setStatus',
        'suspended_by' => 'setSuspendedBy',
        'status_timestamp' => 'setStatusTimestamp',
        'product_config' => 'setProductConfig',
        'token_info' => 'setTokenInfo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'token_unique_reference' => 'getTokenUniqueReference',
        'status' => 'getStatus',
        'suspended_by' => 'getSuspendedBy',
        'status_timestamp' => 'getStatusTimestamp',
        'product_config' => 'getProductConfig',
        'token_info' => 'getTokenInfo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['token_unique_reference'] = isset($data['token_unique_reference']) ? $data['token_unique_reference'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['suspended_by'] = isset($data['suspended_by']) ? $data['suspended_by'] : null;
        $this->container['status_timestamp'] = isset($data['status_timestamp']) ? $data['status_timestamp'] : null;
        $this->container['product_config'] = isset($data['product_config']) ? $data['product_config'] : null;
        $this->container['token_info'] = isset($data['token_info']) ? $data['token_info'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets token_unique_reference
     *
     * @return string
     */
    public function getTokenUniqueReference()
    {
        return $this->container['token_unique_reference'];
    }

    /**
     * Sets token_unique_reference
     *
     * @param string $token_unique_reference The unique reference allocated to the Token which is always present even if an error occurs. <br>      __Max Length:64__
     *
     * @return $this
     */
    public function setTokenUniqueReference($token_unique_reference)
    {
        $this->container['token_unique_reference'] = $token_unique_reference;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The current status of Token. Must be either:    * 'INACTIVE' (Token has not yet been activated)  * 'ACTIVE' (Token is active and ready to transact)  * 'SUSPENDED' (Token is suspended and unable to transact)  * 'DEACTIVATED' (Token has been permanently deactivated).<br>      __Max Length:32__
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets suspended_by
     *
     * @return string[]
     */
    public function getSuspendedBy()
    {
        return $this->container['suspended_by'];
    }

    /**
     * Sets suspended_by
     *
     * @param string[] $suspended_by (CONDITIONAL only supplied if status is SUSPENDED) Who or what caused the Token to be suspended One or more values of:     * ISSUER - Suspended by the Issuer.    * TOKEN_REQUESTOR - Suspended by the Token Requestor     * MOBILE_PIN_LOCKED - Suspended due to the Mobile PIN being locked    * CARDHOLDER - Suspended by the Cardholder <br>          __Max Length__: N/A
     *
     * @return $this
     */
    public function setSuspendedBy($suspended_by)
    {
        $this->container['suspended_by'] = $suspended_by;

        return $this;
    }

    /**
     * Gets status_timestamp
     *
     * @return string
     */
    public function getStatusTimestamp()
    {
        return $this->container['status_timestamp'];
    }

    /**
     * Sets status_timestamp
     *
     * @param string $status_timestamp The date and time the token status was last updated. Expressed in ISO 8601 extended format as one of the following:     * YYYY-MM-DDThh:mm:ss[.sss]Z    * YYYY-MM-DDThh:mm:ss[.sss]ï¿½hh:mm    * Where [.sss] is optional and can be 1 to 3 digits. <br>  __Max Length:29__
     *
     * @return $this
     */
    public function setStatusTimestamp($status_timestamp)
    {
        $this->container['status_timestamp'] = $status_timestamp;

        return $this;
    }

    /**
     * Gets product_config
     *
     * @return \Swagger\Client\Model\ProductConfig
     */
    public function getProductConfig()
    {
        return $this->container['product_config'];
    }

    /**
     * Sets product_config
     *
     * @param \Swagger\Client\Model\ProductConfig $product_config product_config
     *
     * @return $this
     */
    public function setProductConfig($product_config)
    {
        $this->container['product_config'] = $product_config;

        return $this;
    }

    /**
     * Gets token_info
     *
     * @return \Swagger\Client\Model\TokenInfo
     */
    public function getTokenInfo()
    {
        return $this->container['token_info'];
    }

    /**
     * Sets token_info
     *
     * @param \Swagger\Client\Model\TokenInfo $token_info token_info
     *
     * @return $this
     */
    public function setTokenInfo($token_info)
    {
        $this->container['token_info'] = $token_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


