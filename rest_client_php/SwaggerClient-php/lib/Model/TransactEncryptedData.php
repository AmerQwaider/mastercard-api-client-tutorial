<?php
/**
 * TransactEncryptedData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * MDES for Merchants
 *
 * The MDES APIs are designed as RPC style stateless web services where each API endpoint represents an operation to be performed.  All request and response payloads are sent in the JSON (JavaScript Object Notation) data-interchange format. Each endpoint in the API specifies the HTTP Method used to access it. All strings in request and response objects are to be UTF-8 encoded.  Each API URI includes the major and minor version of API that it conforms to.  This will allow multiple concurrent versions of the API to be deployed simultaneously.
 *
 * OpenAPI spec version: 1.2.7
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TransactEncryptedData Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TransactEncryptedData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'transactEncryptedData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_number' => 'string',
        'application_expiry_date' => 'string',
        'pan_sequence_number' => 'string',
        'track2_equivalent' => 'string',
        'de48se43_data' => 'string',
        'de55_data' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account_number' => null,
        'application_expiry_date' => null,
        'pan_sequence_number' => null,
        'track2_equivalent' => null,
        'de48se43_data' => null,
        'de55_data' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_number' => 'accountNumber',
        'application_expiry_date' => 'applicationExpiryDate',
        'pan_sequence_number' => 'panSequenceNumber',
        'track2_equivalent' => 'track2Equivalent',
        'de48se43_data' => 'de48se43Data',
        'de55_data' => 'de55Data'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_number' => 'setAccountNumber',
        'application_expiry_date' => 'setApplicationExpiryDate',
        'pan_sequence_number' => 'setPanSequenceNumber',
        'track2_equivalent' => 'setTrack2Equivalent',
        'de48se43_data' => 'setDe48se43Data',
        'de55_data' => 'setDe55Data'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_number' => 'getAccountNumber',
        'application_expiry_date' => 'getApplicationExpiryDate',
        'pan_sequence_number' => 'getPanSequenceNumber',
        'track2_equivalent' => 'getTrack2Equivalent',
        'de48se43_data' => 'getDe48se43Data',
        'de55_data' => 'getDe55Data'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_number'] = isset($data['account_number']) ? $data['account_number'] : null;
        $this->container['application_expiry_date'] = isset($data['application_expiry_date']) ? $data['application_expiry_date'] : null;
        $this->container['pan_sequence_number'] = isset($data['pan_sequence_number']) ? $data['pan_sequence_number'] : null;
        $this->container['track2_equivalent'] = isset($data['track2_equivalent']) ? $data['track2_equivalent'] : null;
        $this->container['de48se43_data'] = isset($data['de48se43_data']) ? $data['de48se43_data'] : null;
        $this->container['de55_data'] = isset($data['de55_data']) ? $data['de55_data'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_number
     *
     * @return string
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     *
     * @param string $account_number The Primary Account Number for the transaction ï¿½ this is the Token PAN.  <br>__Min Length: 9__ <br>__Max Length: 19__
     *
     * @return $this
     */
    public function setAccountNumber($account_number)
    {
        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets application_expiry_date
     *
     * @return string
     */
    public function getApplicationExpiryDate()
    {
        return $this->container['application_expiry_date'];
    }

    /**
     * Sets application_expiry_date
     *
     * @param string $application_expiry_date Application expiry date for the Token. Expressed in YYMMDD format.  <br> __Length: 6__
     *
     * @return $this
     */
    public function setApplicationExpiryDate($application_expiry_date)
    {
        $this->container['application_expiry_date'] = $application_expiry_date;

        return $this;
    }

    /**
     * Gets pan_sequence_number
     *
     * @return string
     */
    public function getPanSequenceNumber()
    {
        return $this->container['pan_sequence_number'];
    }

    /**
     * Sets pan_sequence_number
     *
     * @param string $pan_sequence_number Application PAN sequence number for the Token <br>  __Length: 2__
     *
     * @return $this
     */
    public function setPanSequenceNumber($pan_sequence_number)
    {
        $this->container['pan_sequence_number'] = $pan_sequence_number;

        return $this;
    }

    /**
     * Gets track2_equivalent
     *
     * @return string
     */
    public function getTrack2Equivalent()
    {
        return $this->container['track2_equivalent'];
    }

    /**
     * Sets track2_equivalent
     *
     * @param string $track2_equivalent Track 2 equivalent data for the Token. Expressed according to ISO/IEC 7813, excluding start sentinel, end sentinel, and Longitudinal Redundancy Check (LRC), using hex nibble 'D' as field separator, and padded to whole bytes using one hex nibble 'F' as needed.  <br>   __Max Length: 38__
     *
     * @return $this
     */
    public function setTrack2Equivalent($track2_equivalent)
    {
        $this->container['track2_equivalent'] = $track2_equivalent;

        return $this;
    }

    /**
     * Gets de48se43_data
     *
     * @return string
     */
    public function getDe48se43Data()
    {
        return $this->container['de48se43_data'];
    }

    /**
     * Sets de48se43_data
     *
     * @param string $de48se43_data Data for DE 48 Subelement 43 containing the cryptogram.<br> __Max Length: 32__
     *
     * @return $this
     */
    public function setDe48se43Data($de48se43_data)
    {
        $this->container['de48se43_data'] = $de48se43_data;

        return $this;
    }

    /**
     * Gets de55_data
     *
     * @return string
     */
    public function getDe55Data()
    {
        return $this->container['de55_data'];
    }

    /**
     * Sets de55_data
     *
     * @param string $de55_data Data for DE 55 if present<br> __Max Length: 200__
     *
     * @return $this
     */
    public function setDe55Data($de55_data)
    {
        $this->container['de55_data'] = $de55_data;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


