<?php
/**
 * TokenizeApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * MDES for Merchants
 *
 * The MDES APIs are designed as RPC style stateless web services where each API endpoint represents an operation to be performed.  All request and response payloads are sent in the JSON (JavaScript Object Notation) data-interchange format. Each endpoint in the API specifies the HTTP Method used to access it. All strings in request and response objects are to be UTF-8 encoded.  Each API URI includes the major and minor version of API that it conforms to.  This will allow multiple concurrent versions of the API to be deployed simultaneously. <br> __Authentication__ Mastercard uses OAuth 1.0a with body hash extension for authenticating the API clients. This requires every request that you send to  Mastercard to be signed with an RSA private key. A private-public RSA key pair must be generated consisting of: <br> 1 . A private key for the OAuth signature for API requests. It is recommended to keep the private key in a password-protected or hardware keystore. <br> 2. A public key is shared with Mastercard during the project setup process through either a certificate signing request (CSR) or the API Key Generator. Mastercard will use the public key to verify the OAuth signature that is provided on every API call.<br>  An OAUTH1.0a signer library is available on [GitHub](https://github.com/Mastercard/oauth1-signer-java) <br>  __Encryption__<br>  All communications between Issuer web service and the Mastercard gateway is encrypted using TLS. <br> __Additional Encryption of Sensitive Data__ In addition to the OAuth authentication, when using MDES Digital Enablement Service, any PCI sensitive and all account holder Personally Identifiable Information (PII) data must be encrypted. This requirement applies to the API fields containing encryptedData. Sensitive data is encrypted using a symmetric session (one-time-use) key. The symmetric session key is then wrapped with an RSA Public Key supplied by Mastercard during API setup phase (the Customer Encryption Key). <br>  Java Client Encryption Library available on [GitHub](https://github.com/Mastercard/client-encryption-java)
 *
 * OpenAPI spec version: 1.2.8
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Swagger\Client;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

use GuzzleHttp;
use Swagger\Client\Api\TokenizeApi;
use Mastercard\Developer\Encryption\FieldLevelEncryption;
use Mastercard\Developer\Encryption\FieldLevelEncryptionConfigBuilder;
use Mastercard\Developer\Encryption\FieldLevelEncryptionParams;
use Mastercard\Developer\Encryption\FieldValueEncoding;
use Mastercard\Developer\Interceptors\PsrHttpMessageEncryptionInterceptor;
use Mastercard\Developer\OAuth\Utils\AuthenticationUtils;
use Mastercard\Developer\Utils\EncryptionUtils;
use Mastercard\Developer\Signers\PsrHttpMessageSigner;

/**
 * TokenizeApiTest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TokenizeApiTest extends \PHPUnit_Framework_TestCase
{
    private $client;

    const ConsumerKey = ""; // TODO
    const SigningKeyAlias = ""; // TODO
    const SigningKeyPassword = ""; // TODO
    const SigningKeyPkcs12FilePath = ""; // TODO
    const EncryptionCertificateFilePath = ""; // TODO
    const DecryptionKeyFilePath = ""; // TODO

    private static function getFieldLevelEncryptionConfig($encoding = FieldValueEncoding::BASE64) {
        $encryptionCertificate = EncryptionUtils::LoadEncryptionCertificate(self::EncryptionCertificateFilePath);
        $decryptionKey =  EncryptionUtils::LoadDecryptionKey(self::DecryptionKeyFilePath);

        return FieldLevelEncryptionConfigBuilder::aFieldLevelEncryptionConfig()
            ->withEncryptionPath('$.cardInfo.encryptedData', '$.cardInfo')
            ->withEncryptionPath('$.encryptedPayload.encryptedData', '$.encryptedPayload')
            ->withDecryptionPath('$.tokenDetail', '$.tokenDetail.encryptedData')
            ->withDecryptionPath('$.encryptedPayload', '$.encryptedPayload.encryptedData')
            ->withEncryptionCertificate($encryptionCertificate)
            ->withDecryptionKey($decryptionKey)
            ->withOaepPaddingDigestAlgorithm('SHA-512')
            ->withEncryptedValueFieldName('encryptedData')
            ->withEncryptedKeyFieldName('encryptedKey')
            ->withIvFieldName('iv')
            ->withOaepPaddingDigestAlgorithmFieldName('oaepHashingAlgorithm')
            ->withEncryptionCertificateFingerprintFieldName('publicKeyFingerprint')
            ->withFieldValueEncoding(FieldValueEncoding::HEX)
            ->build();
    }
    
    private function createClientOptions() {
        $signingKey = AuthenticationUtils::loadSigningKey(self::SigningKeyPkcs12FilePath, self::SigningKeyAlias, self::SigningKeyPassword);
        $stack = new GuzzleHttp\HandlerStack();
        $stack->setHandler(new GuzzleHttp\Handler\CurlHandler());
        $fieldLevelEncryptionInterceptor = new PsrHttpMessageEncryptionInterceptor(self::getFieldLevelEncryptionConfig());
        $stack->push(GuzzleHttp\Middleware::mapRequest([$fieldLevelEncryptionInterceptor, 'interceptRequest']));
        $stack->push(GuzzleHttp\Middleware::mapResponse([$fieldLevelEncryptionInterceptor, 'interceptResponse']));
        $stack->push(GuzzleHttp\Middleware::mapRequest([new PsrHttpMessageSigner(self::ConsumerKey, $signingKey), 'sign']));
        $options = [
            'verify' => false, // Do not verify the server certificate (to be removed)
            'handler' => $stack
        ];
        return $options;
    }

    private function createClient() {
        $this->client = new GuzzleHttp\Client($this->createClientOptions());
    }

    private function createConfig() {
        $this->config = new Configuration();
        $this->config->setDebug(true);
        $this->config->setDebugFile("./out.trace");
        $this->config->setHost("https://sandbox.api.mastercard.com/mdes");
    }

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
        self::createClient();
        self::createConfig();
    }

    /**
     * Test case for createTokenize
     *
     * Used to digitize a card to create a server-based Token..
     *
     */
    public function testCreateTokenize()
    {
        $apiInstance = new TokenizeApi($this->client, $this->config);
        try {
            $requestData = self::buildTokenizeRequestSchema();
            $result = $apiInstance->createTokenize($requestData);
            $this->assertNotEmpty($result);
            $this->assertNotEmpty($result->getDecision());
            $this->assertEquals("APPROVED", $result->getDecision());
        } catch (Exception $e) {
            echo 'Exception when calling TokenizeApi->createTokenize: ', $e->getMessage(), PHP_EOL;
            $this->fail($e->getMessage());
        }
    }

    static function buildTokenizeRequestSchema(){
        $data = array(
            'request_id' => "123456",
            'task_id' => "123456",
            'token_type' => "CLOUD",
            'token_requestor_id' => "98765432101",
            'card_info' => array(
                'encryptedData' => self::buildCardInfoData()
            )
        );
        return new \Swagger\Client\Model\TokenizeRequestSchema($data);
    }

    static function buildCardInfoData(){
        $data = array(
            'account_number' => "5123456789012345",
            'source' => "CARD_ON_FILE",
            'cardholder_name' => "John Doe",
            'security_code' => "123",
            'expiry_year' => "21",
            'expiry_month' => "09",
            'billing_address' => self::buildBillingAddress()
        );
        return new \Swagger\Client\Model\CardInfoData($data);
    }

    static function buildBillingAddress(){
        $data = array(
            'line1' => "100 1st Street",
            'line2' => "Apt. 4B",
            'city' => "St. Louis",
            'country_subdivision' => "MO",
            'postal_code' => "61000"
        );
        return new \Swagger\Client\Model\BillingAddress($data);
    }
   
    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

}
