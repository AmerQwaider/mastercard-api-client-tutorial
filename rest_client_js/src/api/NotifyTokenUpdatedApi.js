/**
 * MDES for Merchants
 * The MDES APIs are designed as RPC style stateless web services where each API endpoint represents an operation to be performed.  All request and response payloads are sent in the JSON (JavaScript Object Notation) data-interchange format. Each endpoint in the API specifies the HTTP Method used to access it. All strings in request and response objects are to be UTF-8 encoded.  Each API URI includes the major and minor version of API that it conforms to.  This will allow multiple concurrent versions of the API to be deployed simultaneously.  
 *
 * The version of the OpenAPI document: 1.2.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorsResponse from '../model/ErrorsResponse';
import NotifyTokenUpdatedRequestSchema from '../model/NotifyTokenUpdatedRequestSchema';
import NotifyTokenUpdatedResponseSchema from '../model/NotifyTokenUpdatedResponseSchema';

/**
* NotifyTokenUpdated service.
* @module api/NotifyTokenUpdatedApi
* @version 1.2.7
*/
export default class NotifyTokenUpdatedApi {

    /**
    * Constructs a new NotifyTokenUpdatedApi. 
    * @alias module:api/NotifyTokenUpdatedApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the notifyTokenUpdateForTokenStateChange operation.
     * @callback module:api/NotifyTokenUpdatedApi~notifyTokenUpdateForTokenStateChangeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotifyTokenUpdatedResponseSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Outbound API used by MDES to notify the Token Requestor of significant Token updates, such as when the Token is activated, suspended, unsuspended or deleted; or when information about the Token or its product configuration has changed.
     * This API is used by MDES to notify the Token Requestor of significant Token updates. Typical notification scenarios include  <br> <br>  1. Informing the merchant a token is active 2. Informing the merchant a token has been suspended by the Issuer 3. Informing the merchant a token has been unsuspended by the Issuer 4. Informing the merchant a token has been deleted by the Issuer 5. Informing the merchant of a product configuration change (such as a change in Card Art) 6. Informing the merchant of underlying changes to the FPAN metadata associated to the token<br>   __Connection Security__<br> Mastercard will connect via TLS protocol and verify the server certificate before establishing a connection to the client endpoint. During this handshake, the client server can request TLS client authentication. Mastercard will present a client certificate which identifies as �ws.mastercard.com� This client certificate is issued by the Entrust L1K certificate and should be available in most trust stores.  <br><br> __Conditional Objects__<br> The contents of the notifyTokenUpdated API will vary depending which of the above scneraios triggered the notification. <br>   1. *productConfig* - Provided when Product Configuration has changed (e.g. such as card art).      2. *tokenInfo* - Provided when either the details of the token or associated FPAN have changed (such as token or PAN expiry).      The optional objects will always contain a minimum set of data which be returned regardless of whether or not updates have been made. These fields are denoted as required fields.<br>     
     * @param {Object} opts Optional parameters
     * @param {module:model/NotifyTokenUpdatedRequestSchema} opts.notifyTokenUpdatedRequestSchema Contains the details of the request message. 
     * @param {module:api/NotifyTokenUpdatedApi~notifyTokenUpdateForTokenStateChangeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotifyTokenUpdatedResponseSchema}
     */
    notifyTokenUpdateForTokenStateChange(opts, callback) {
      opts = opts || {};
      let postBody = opts['notifyTokenUpdatedRequestSchema'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NotifyTokenUpdatedResponseSchema;
      return this.apiClient.callApi(
        '/digitization/static/1/0/notifyTokenUpdated', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
