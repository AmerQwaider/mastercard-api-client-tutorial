# coding: utf-8

"""
    MDES for Merchants

    The MDES APIs are designed as RPC style stateless web services where each API endpoint represents an operation to be performed.  All request and response payloads are sent in the JSON (JavaScript Object Notation) data-interchange format. Each endpoint in the API specifies the HTTP Method used to access it. All strings in request and response objects are to be UTF-8 encoded.  Each API URI includes the major and minor version of API that it conforms to.  This will allow multiple concurrent versions of the API to be deployed simultaneously.    # noqa: E501

    OpenAPI spec version: 1.2.7
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DecisioningData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'recommendation': 'str',
        'recommendation_algorithm_version': 'str',
        'device_score': 'str',
        'account_score': 'str',
        'recommendation_reasons': 'list[str]',
        'device_current_location': 'str',
        'device_ip_address': 'str',
        'mobile_number_suffix': 'str',
        'account_id_hash': 'str'
    }

    attribute_map = {
        'recommendation': 'recommendation',
        'recommendation_algorithm_version': 'recommendationAlgorithmVersion',
        'device_score': 'deviceScore',
        'account_score': 'accountScore',
        'recommendation_reasons': 'recommendationReasons',
        'device_current_location': 'deviceCurrentLocation',
        'device_ip_address': 'deviceIpAddress',
        'mobile_number_suffix': 'mobileNumberSuffix',
        'account_id_hash': 'accountIdHash'
    }

    def __init__(self, recommendation=None, recommendation_algorithm_version=None, device_score=None, account_score=None, recommendation_reasons=None, device_current_location=None, device_ip_address=None, mobile_number_suffix=None, account_id_hash=None):  # noqa: E501
        """DecisioningData - a model defined in Swagger"""  # noqa: E501

        self._recommendation = None
        self._recommendation_algorithm_version = None
        self._device_score = None
        self._account_score = None
        self._recommendation_reasons = None
        self._device_current_location = None
        self._device_ip_address = None
        self._mobile_number_suffix = None
        self._account_id_hash = None
        self.discriminator = None

        if recommendation is not None:
            self.recommendation = recommendation
        if recommendation_algorithm_version is not None:
            self.recommendation_algorithm_version = recommendation_algorithm_version
        if device_score is not None:
            self.device_score = device_score
        if account_score is not None:
            self.account_score = account_score
        if recommendation_reasons is not None:
            self.recommendation_reasons = recommendation_reasons
        if device_current_location is not None:
            self.device_current_location = device_current_location
        if device_ip_address is not None:
            self.device_ip_address = device_ip_address
        if mobile_number_suffix is not None:
            self.mobile_number_suffix = mobile_number_suffix
        if account_id_hash is not None:
            self.account_id_hash = account_id_hash

    @property
    def recommendation(self):
        """Gets the recommendation of this DecisioningData.  # noqa: E501

        __(OPTIONAL)__ <br> Digitization decision recommended by the Token Requestor. Must be either APPROVED (Recommend a decision of Approved), DECLINED (Recommend a decision of Decline). <br>   __Max Length:64__   # noqa: E501

        :return: The recommendation of this DecisioningData.  # noqa: E501
        :rtype: str
        """
        return self._recommendation

    @recommendation.setter
    def recommendation(self, recommendation):
        """Sets the recommendation of this DecisioningData.

        __(OPTIONAL)__ <br> Digitization decision recommended by the Token Requestor. Must be either APPROVED (Recommend a decision of Approved), DECLINED (Recommend a decision of Decline). <br>   __Max Length:64__   # noqa: E501

        :param recommendation: The recommendation of this DecisioningData.  # noqa: E501
        :type: str
        """

        self._recommendation = recommendation

    @property
    def recommendation_algorithm_version(self):
        """Gets the recommendation_algorithm_version of this DecisioningData.  # noqa: E501

        __(OPTIONAL)__ <br> Version of the algorithm used by the Token Requestor to determine its recommendation. Must be a value of \"01\". Other values may be supported in the future.<br>     __Max Length:16__   # noqa: E501

        :return: The recommendation_algorithm_version of this DecisioningData.  # noqa: E501
        :rtype: str
        """
        return self._recommendation_algorithm_version

    @recommendation_algorithm_version.setter
    def recommendation_algorithm_version(self, recommendation_algorithm_version):
        """Sets the recommendation_algorithm_version of this DecisioningData.

        __(OPTIONAL)__ <br> Version of the algorithm used by the Token Requestor to determine its recommendation. Must be a value of \"01\". Other values may be supported in the future.<br>     __Max Length:16__   # noqa: E501

        :param recommendation_algorithm_version: The recommendation_algorithm_version of this DecisioningData.  # noqa: E501
        :type: str
        """

        self._recommendation_algorithm_version = recommendation_algorithm_version

    @property
    def device_score(self):
        """Gets the device_score of this DecisioningData.  # noqa: E501

        __(OPTIONAL)__ <br> Score assigned by the Token Requestor for the target device being provisioned. Must be a value from 1 to 5.   # noqa: E501

        :return: The device_score of this DecisioningData.  # noqa: E501
        :rtype: str
        """
        return self._device_score

    @device_score.setter
    def device_score(self, device_score):
        """Sets the device_score of this DecisioningData.

        __(OPTIONAL)__ <br> Score assigned by the Token Requestor for the target device being provisioned. Must be a value from 1 to 5.   # noqa: E501

        :param device_score: The device_score of this DecisioningData.  # noqa: E501
        :type: str
        """

        self._device_score = device_score

    @property
    def account_score(self):
        """Gets the account_score of this DecisioningData.  # noqa: E501

        __(OPTIONAL)__ <br> Score assigned by the Token Requestor for the consumer account or relationship. Must be a value from 1 to 5.   # noqa: E501

        :return: The account_score of this DecisioningData.  # noqa: E501
        :rtype: str
        """
        return self._account_score

    @account_score.setter
    def account_score(self, account_score):
        """Sets the account_score of this DecisioningData.

        __(OPTIONAL)__ <br> Score assigned by the Token Requestor for the consumer account or relationship. Must be a value from 1 to 5.   # noqa: E501

        :param account_score: The account_score of this DecisioningData.  # noqa: E501
        :type: str
        """

        self._account_score = account_score

    @property
    def recommendation_reasons(self):
        """Gets the recommendation_reasons of this DecisioningData.  # noqa: E501

        __(OPTIONAL)__ <br> Code indicating the reasons the Token Requestor is suggesting the digitization decision.  See table here - https://developer.mastercard.com/page/mdes-digitization-recommendation-reason-codes   # noqa: E501

        :return: The recommendation_reasons of this DecisioningData.  # noqa: E501
        :rtype: list[str]
        """
        return self._recommendation_reasons

    @recommendation_reasons.setter
    def recommendation_reasons(self, recommendation_reasons):
        """Sets the recommendation_reasons of this DecisioningData.

        __(OPTIONAL)__ <br> Code indicating the reasons the Token Requestor is suggesting the digitization decision.  See table here - https://developer.mastercard.com/page/mdes-digitization-recommendation-reason-codes   # noqa: E501

        :param recommendation_reasons: The recommendation_reasons of this DecisioningData.  # noqa: E501
        :type: list[str]
        """

        self._recommendation_reasons = recommendation_reasons

    @property
    def device_current_location(self):
        """Gets the device_current_location of this DecisioningData.  # noqa: E501

        __(OPTIONAL)__ <br> Latitude and longitude in the format \"(sign) latitude, (sign) longitude\" with a precision of 2 decimal places.  Ex - \"38.63, -90.25\"  Latitude is between -90 and 90.  Longitude between -180 and 180. Relates to the target device being provisioned. If there is no target device, then this should be the current consumer location, if available. <br>    __Max Length:14__   # noqa: E501

        :return: The device_current_location of this DecisioningData.  # noqa: E501
        :rtype: str
        """
        return self._device_current_location

    @device_current_location.setter
    def device_current_location(self, device_current_location):
        """Sets the device_current_location of this DecisioningData.

        __(OPTIONAL)__ <br> Latitude and longitude in the format \"(sign) latitude, (sign) longitude\" with a precision of 2 decimal places.  Ex - \"38.63, -90.25\"  Latitude is between -90 and 90.  Longitude between -180 and 180. Relates to the target device being provisioned. If there is no target device, then this should be the current consumer location, if available. <br>    __Max Length:14__   # noqa: E501

        :param device_current_location: The device_current_location of this DecisioningData.  # noqa: E501
        :type: str
        """

        self._device_current_location = device_current_location

    @property
    def device_ip_address(self):
        """Gets the device_ip_address of this DecisioningData.  # noqa: E501

        __(OPTIONAL)__ <br> The IP address of the device through which the device reaches the internet. This may be a temporary or permanent IP address assigned to a home router, or the IP address of a gateway through which the device connects to a network. IPv4 address format of 4 octets separated by \".\" Ex - 127.0.0.1 Relates to the target device being provisioned. If there is no target device, then this should be the current consumer IP address, if available.<br>     __Max Length:15__   # noqa: E501

        :return: The device_ip_address of this DecisioningData.  # noqa: E501
        :rtype: str
        """
        return self._device_ip_address

    @device_ip_address.setter
    def device_ip_address(self, device_ip_address):
        """Sets the device_ip_address of this DecisioningData.

        __(OPTIONAL)__ <br> The IP address of the device through which the device reaches the internet. This may be a temporary or permanent IP address assigned to a home router, or the IP address of a gateway through which the device connects to a network. IPv4 address format of 4 octets separated by \".\" Ex - 127.0.0.1 Relates to the target device being provisioned. If there is no target device, then this should be the current consumer IP address, if available.<br>     __Max Length:15__   # noqa: E501

        :param device_ip_address: The device_ip_address of this DecisioningData.  # noqa: E501
        :type: str
        """

        self._device_ip_address = device_ip_address

    @property
    def mobile_number_suffix(self):
        """Gets the mobile_number_suffix of this DecisioningData.  # noqa: E501

        __(OPTIONAL)__<br> The last few digits (typically four) of the consumer's mobile phone number as available on file or on the consumer's current device, which may or may not be the mobile number of the target device being provisioned.<br>     __Max Length:32__   # noqa: E501

        :return: The mobile_number_suffix of this DecisioningData.  # noqa: E501
        :rtype: str
        """
        return self._mobile_number_suffix

    @mobile_number_suffix.setter
    def mobile_number_suffix(self, mobile_number_suffix):
        """Sets the mobile_number_suffix of this DecisioningData.

        __(OPTIONAL)__<br> The last few digits (typically four) of the consumer's mobile phone number as available on file or on the consumer's current device, which may or may not be the mobile number of the target device being provisioned.<br>     __Max Length:32__   # noqa: E501

        :param mobile_number_suffix: The mobile_number_suffix of this DecisioningData.  # noqa: E501
        :type: str
        """

        self._mobile_number_suffix = mobile_number_suffix

    @property
    def account_id_hash(self):
        """Gets the account_id_hash of this DecisioningData.  # noqa: E501

        __(OPTIONAL)__ <br> SHA-256 hash of the Cardholder�s account ID with the Token Requestor. Typically expected to be an email address.<br>  __Max Length:64__ Alpha-Numeric and Hex-encoded data (case-insensitive).   # noqa: E501

        :return: The account_id_hash of this DecisioningData.  # noqa: E501
        :rtype: str
        """
        return self._account_id_hash

    @account_id_hash.setter
    def account_id_hash(self, account_id_hash):
        """Sets the account_id_hash of this DecisioningData.

        __(OPTIONAL)__ <br> SHA-256 hash of the Cardholder�s account ID with the Token Requestor. Typically expected to be an email address.<br>  __Max Length:64__ Alpha-Numeric and Hex-encoded data (case-insensitive).   # noqa: E501

        :param account_id_hash: The account_id_hash of this DecisioningData.  # noqa: E501
        :type: str
        """

        self._account_id_hash = account_id_hash

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DecisioningData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DecisioningData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
