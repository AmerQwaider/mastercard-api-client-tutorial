# coding: utf-8

"""
    MDES for Merchants

    The MDES APIs are designed as RPC style stateless web services where each API endpoint represents an operation to be performed.  All request and response payloads are sent in the JSON (JavaScript Object Notation) data-interchange format. Each endpoint in the API specifies the HTTP Method used to access it. All strings in request and response objects are to be UTF-8 encoded.  Each API URI includes the major and minor version of API that it conforms to.  This will allow multiple concurrent versions of the API to be deployed simultaneously. <br> __Authentication__ Mastercard uses OAuth 1.0a with body hash extension for authenticating the API clients. This requires every request that you send to  Mastercard to be signed with an RSA private key. A private-public RSA key pair must be generated consisting of: <br> 1 . A private key for the OAuth signature for API requests. It is recommended to keep the private key in a password-protected or hardware keystore. <br> 2. A public key is shared with Mastercard during the project setup process through either a certificate signing request (CSR) or the API Key Generator. Mastercard will use the public key to verify the OAuth signature that is provided on every API call.<br>  An OAUTH1.0a signer library is available on [GitHub](https://github.com/Mastercard/oauth1-signer-java) <br>  __Encryption__<br>  All communications between Issuer web service and the Mastercard gateway is encrypted using TLS. <br> __Additional Encryption of Sensitive Data__ In addition to the OAuth authentication, when using MDES Digital Enablement Service, any PCI sensitive and all account holder Personally Identifiable Information (PII) data must be encrypted. This requirement applies to the API fields containing encryptedData. Sensitive data is encrypted using a symmetric session (one-time-use) key. The symmetric session key is then wrapped with an RSA Public Key supplied by Mastercard during API setup phase (the Customer Encryption Key). <br>  Java Client Encryption Library available on [GitHub](https://github.com/Mastercard/client-encryption-java)   # noqa: E501

    OpenAPI spec version: 1.2.8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetDigitalAssetsResponseSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'response_id': 'str',
        'response_host': 'str',
        'brand_logo_asset_id': 'str',
        'issuer_logo_asset_id': 'str',
        'is_co_branded': 'str',
        'co_brand_name': 'str',
        'co_brand_logo_asset_id': 'str',
        'card_background_combined_asset_id': 'str',
        'card_background_asset_id': 'str',
        'icon_asset_id': 'str',
        'foreground_color': 'str',
        'issuer_name': 'str',
        'short_description': 'str',
        'long_description': 'str'
    }

    attribute_map = {
        'response_id': 'responseId',
        'response_host': 'responseHost',
        'brand_logo_asset_id': 'brandLogoAssetId',
        'issuer_logo_asset_id': 'issuerLogoAssetId',
        'is_co_branded': 'isCoBranded',
        'co_brand_name': 'coBrandName',
        'co_brand_logo_asset_id': 'coBrandLogoAssetId',
        'card_background_combined_asset_id': 'cardBackgroundCombinedAssetId',
        'card_background_asset_id': 'cardBackgroundAssetId',
        'icon_asset_id': 'iconAssetId',
        'foreground_color': 'foregroundColor',
        'issuer_name': 'issuerName',
        'short_description': 'shortDescription',
        'long_description': 'longDescription'
    }

    def __init__(self, response_id=None, response_host=None, brand_logo_asset_id=None, issuer_logo_asset_id=None, is_co_branded=None, co_brand_name=None, co_brand_logo_asset_id=None, card_background_combined_asset_id=None, card_background_asset_id=None, icon_asset_id=None, foreground_color=None, issuer_name=None, short_description=None, long_description=None):  # noqa: E501
        """GetDigitalAssetsResponseSchema - a model defined in Swagger"""  # noqa: E501

        self._response_id = None
        self._response_host = None
        self._brand_logo_asset_id = None
        self._issuer_logo_asset_id = None
        self._is_co_branded = None
        self._co_brand_name = None
        self._co_brand_logo_asset_id = None
        self._card_background_combined_asset_id = None
        self._card_background_asset_id = None
        self._icon_asset_id = None
        self._foreground_color = None
        self._issuer_name = None
        self._short_description = None
        self._long_description = None
        self.discriminator = None

        if response_id is not None:
            self.response_id = response_id
        if response_host is not None:
            self.response_host = response_host
        if brand_logo_asset_id is not None:
            self.brand_logo_asset_id = brand_logo_asset_id
        if issuer_logo_asset_id is not None:
            self.issuer_logo_asset_id = issuer_logo_asset_id
        if is_co_branded is not None:
            self.is_co_branded = is_co_branded
        if co_brand_name is not None:
            self.co_brand_name = co_brand_name
        if co_brand_logo_asset_id is not None:
            self.co_brand_logo_asset_id = co_brand_logo_asset_id
        if card_background_combined_asset_id is not None:
            self.card_background_combined_asset_id = card_background_combined_asset_id
        if card_background_asset_id is not None:
            self.card_background_asset_id = card_background_asset_id
        if icon_asset_id is not None:
            self.icon_asset_id = icon_asset_id
        if foreground_color is not None:
            self.foreground_color = foreground_color
        if issuer_name is not None:
            self.issuer_name = issuer_name
        if short_description is not None:
            self.short_description = short_description
        if long_description is not None:
            self.long_description = long_description

    @property
    def response_id(self):
        """Gets the response_id of this GetDigitalAssetsResponseSchema.  # noqa: E501

        Unique identifier for the response.   # noqa: E501

        :return: The response_id of this GetDigitalAssetsResponseSchema.  # noqa: E501
        :rtype: str
        """
        return self._response_id

    @response_id.setter
    def response_id(self, response_id):
        """Sets the response_id of this GetDigitalAssetsResponseSchema.

        Unique identifier for the response.   # noqa: E501

        :param response_id: The response_id of this GetDigitalAssetsResponseSchema.  # noqa: E501
        :type: str
        """

        self._response_id = response_id

    @property
    def response_host(self):
        """Gets the response_host of this GetDigitalAssetsResponseSchema.  # noqa: E501

        The host that originated the request. Future calls in the same conversation may be routed to this host.   # noqa: E501

        :return: The response_host of this GetDigitalAssetsResponseSchema.  # noqa: E501
        :rtype: str
        """
        return self._response_host

    @response_host.setter
    def response_host(self, response_host):
        """Sets the response_host of this GetDigitalAssetsResponseSchema.

        The host that originated the request. Future calls in the same conversation may be routed to this host.   # noqa: E501

        :param response_host: The response_host of this GetDigitalAssetsResponseSchema.  # noqa: E501
        :type: str
        """

        self._response_host = response_host

    @property
    def brand_logo_asset_id(self):
        """Gets the brand_logo_asset_id of this GetDigitalAssetsResponseSchema.  # noqa: E501

        The MasterCard or Maestro brand logo associated with this card. Provided as an Asset ID ? use the Get Asset API to retrieve the actual asset. Always returned in Product Configuration object <br>    __Max Length: 64__<br> __Required: Yes__   # noqa: E501

        :return: The brand_logo_asset_id of this GetDigitalAssetsResponseSchema.  # noqa: E501
        :rtype: str
        """
        return self._brand_logo_asset_id

    @brand_logo_asset_id.setter
    def brand_logo_asset_id(self, brand_logo_asset_id):
        """Sets the brand_logo_asset_id of this GetDigitalAssetsResponseSchema.

        The MasterCard or Maestro brand logo associated with this card. Provided as an Asset ID ? use the Get Asset API to retrieve the actual asset. Always returned in Product Configuration object <br>    __Max Length: 64__<br> __Required: Yes__   # noqa: E501

        :param brand_logo_asset_id: The brand_logo_asset_id of this GetDigitalAssetsResponseSchema.  # noqa: E501
        :type: str
        """

        self._brand_logo_asset_id = brand_logo_asset_id

    @property
    def issuer_logo_asset_id(self):
        """Gets the issuer_logo_asset_id of this GetDigitalAssetsResponseSchema.  # noqa: E501

        The logo of the issuing bank. Provided as an Asset ID ? use the Get Asset API to retrieve the actual asset. Always returned in Product Configuration object <br>     __Max Length:64__<br> __Required: Yes__   # noqa: E501

        :return: The issuer_logo_asset_id of this GetDigitalAssetsResponseSchema.  # noqa: E501
        :rtype: str
        """
        return self._issuer_logo_asset_id

    @issuer_logo_asset_id.setter
    def issuer_logo_asset_id(self, issuer_logo_asset_id):
        """Sets the issuer_logo_asset_id of this GetDigitalAssetsResponseSchema.

        The logo of the issuing bank. Provided as an Asset ID ? use the Get Asset API to retrieve the actual asset. Always returned in Product Configuration object <br>     __Max Length:64__<br> __Required: Yes__   # noqa: E501

        :param issuer_logo_asset_id: The issuer_logo_asset_id of this GetDigitalAssetsResponseSchema.  # noqa: E501
        :type: str
        """

        self._issuer_logo_asset_id = issuer_logo_asset_id

    @property
    def is_co_branded(self):
        """Gets the is_co_branded of this GetDigitalAssetsResponseSchema.  # noqa: E501

        Whether the product is co-branded. Must be either true (this is a co-branded product) or false (this is not a co-branded product). Always returned in Product Configuration object <br>    __Max Length:5__<br> __Required: Yes__   # noqa: E501

        :return: The is_co_branded of this GetDigitalAssetsResponseSchema.  # noqa: E501
        :rtype: str
        """
        return self._is_co_branded

    @is_co_branded.setter
    def is_co_branded(self, is_co_branded):
        """Sets the is_co_branded of this GetDigitalAssetsResponseSchema.

        Whether the product is co-branded. Must be either true (this is a co-branded product) or false (this is not a co-branded product). Always returned in Product Configuration object <br>    __Max Length:5__<br> __Required: Yes__   # noqa: E501

        :param is_co_branded: The is_co_branded of this GetDigitalAssetsResponseSchema.  # noqa: E501
        :type: str
        """

        self._is_co_branded = is_co_branded

    @property
    def co_brand_name(self):
        """Gets the co_brand_name of this GetDigitalAssetsResponseSchema.  # noqa: E501

        Textual name of the co-brand partner. Required if CoBranded is true, not present otherwise.  <br>   __Max Length:128__<br> __Required: Conditional ? required if isCoBranded = \"true\". Not present otherwise__   # noqa: E501

        :return: The co_brand_name of this GetDigitalAssetsResponseSchema.  # noqa: E501
        :rtype: str
        """
        return self._co_brand_name

    @co_brand_name.setter
    def co_brand_name(self, co_brand_name):
        """Sets the co_brand_name of this GetDigitalAssetsResponseSchema.

        Textual name of the co-brand partner. Required if CoBranded is true, not present otherwise.  <br>   __Max Length:128__<br> __Required: Conditional ? required if isCoBranded = \"true\". Not present otherwise__   # noqa: E501

        :param co_brand_name: The co_brand_name of this GetDigitalAssetsResponseSchema.  # noqa: E501
        :type: str
        """

        self._co_brand_name = co_brand_name

    @property
    def co_brand_logo_asset_id(self):
        """Gets the co_brand_logo_asset_id of this GetDigitalAssetsResponseSchema.  # noqa: E501

        The co-brand logo (if any) for this product. Provided as an Asset ID ? use the Get Asset API to retrieve the actual asset. <br>   __Max Length:64__<br> __Required: No__   # noqa: E501

        :return: The co_brand_logo_asset_id of this GetDigitalAssetsResponseSchema.  # noqa: E501
        :rtype: str
        """
        return self._co_brand_logo_asset_id

    @co_brand_logo_asset_id.setter
    def co_brand_logo_asset_id(self, co_brand_logo_asset_id):
        """Sets the co_brand_logo_asset_id of this GetDigitalAssetsResponseSchema.

        The co-brand logo (if any) for this product. Provided as an Asset ID ? use the Get Asset API to retrieve the actual asset. <br>   __Max Length:64__<br> __Required: No__   # noqa: E501

        :param co_brand_logo_asset_id: The co_brand_logo_asset_id of this GetDigitalAssetsResponseSchema.  # noqa: E501
        :type: str
        """

        self._co_brand_logo_asset_id = co_brand_logo_asset_id

    @property
    def card_background_combined_asset_id(self):
        """Gets the card_background_combined_asset_id of this GetDigitalAssetsResponseSchema.  # noqa: E501

        The card image used to represent the digital card in the wallet. This ?combined? option contains the MasterCard, bank and any co- brand logos.  Provided as an Asset ID ? use the Get Asset API to retrieve the actual asset.     __Max Length:64__<br> __Required: Conditional ? either CardBackgroundCombined or CardBackground will be provided__   # noqa: E501

        :return: The card_background_combined_asset_id of this GetDigitalAssetsResponseSchema.  # noqa: E501
        :rtype: str
        """
        return self._card_background_combined_asset_id

    @card_background_combined_asset_id.setter
    def card_background_combined_asset_id(self, card_background_combined_asset_id):
        """Sets the card_background_combined_asset_id of this GetDigitalAssetsResponseSchema.

        The card image used to represent the digital card in the wallet. This ?combined? option contains the MasterCard, bank and any co- brand logos.  Provided as an Asset ID ? use the Get Asset API to retrieve the actual asset.     __Max Length:64__<br> __Required: Conditional ? either CardBackgroundCombined or CardBackground will be provided__   # noqa: E501

        :param card_background_combined_asset_id: The card_background_combined_asset_id of this GetDigitalAssetsResponseSchema.  # noqa: E501
        :type: str
        """

        self._card_background_combined_asset_id = card_background_combined_asset_id

    @property
    def card_background_asset_id(self):
        """Gets the card_background_asset_id of this GetDigitalAssetsResponseSchema.  # noqa: E501

        The card image used to represent the digital card in the wallet. This ?non-combined? option does not contain the MasterCard, bank, or co-brand logos. Provided as an Asset ID ? use the Get Asset API to retrieve the actual asset. <br>     __Max Length:64__<br> __Required: Conditional ? either CardBackgroundCombined or CardBackground will be provided__   # noqa: E501

        :return: The card_background_asset_id of this GetDigitalAssetsResponseSchema.  # noqa: E501
        :rtype: str
        """
        return self._card_background_asset_id

    @card_background_asset_id.setter
    def card_background_asset_id(self, card_background_asset_id):
        """Sets the card_background_asset_id of this GetDigitalAssetsResponseSchema.

        The card image used to represent the digital card in the wallet. This ?non-combined? option does not contain the MasterCard, bank, or co-brand logos. Provided as an Asset ID ? use the Get Asset API to retrieve the actual asset. <br>     __Max Length:64__<br> __Required: Conditional ? either CardBackgroundCombined or CardBackground will be provided__   # noqa: E501

        :param card_background_asset_id: The card_background_asset_id of this GetDigitalAssetsResponseSchema.  # noqa: E501
        :type: str
        """

        self._card_background_asset_id = card_background_asset_id

    @property
    def icon_asset_id(self):
        """Gets the icon_asset_id of this GetDigitalAssetsResponseSchema.  # noqa: E501

        The icon representing the primary brand(s) associated with this product. Provided as an Asset ID ? use the Get Asset API to retrieve the actual asset. Always returned in Product Configuration object<br>    __Max Length:64__<br> __Required: Yes__   # noqa: E501

        :return: The icon_asset_id of this GetDigitalAssetsResponseSchema.  # noqa: E501
        :rtype: str
        """
        return self._icon_asset_id

    @icon_asset_id.setter
    def icon_asset_id(self, icon_asset_id):
        """Sets the icon_asset_id of this GetDigitalAssetsResponseSchema.

        The icon representing the primary brand(s) associated with this product. Provided as an Asset ID ? use the Get Asset API to retrieve the actual asset. Always returned in Product Configuration object<br>    __Max Length:64__<br> __Required: Yes__   # noqa: E501

        :param icon_asset_id: The icon_asset_id of this GetDigitalAssetsResponseSchema.  # noqa: E501
        :type: str
        """

        self._icon_asset_id = icon_asset_id

    @property
    def foreground_color(self):
        """Gets the foreground_color of this GetDigitalAssetsResponseSchema.  # noqa: E501

        Foreground color, used to overlay text on top of the card image. Always returned in Product Configuration object<br>    __Max Length:6__ Hexadecimal RGB color format (case-insensitive).<br> __Required: Yes__   # noqa: E501

        :return: The foreground_color of this GetDigitalAssetsResponseSchema.  # noqa: E501
        :rtype: str
        """
        return self._foreground_color

    @foreground_color.setter
    def foreground_color(self, foreground_color):
        """Sets the foreground_color of this GetDigitalAssetsResponseSchema.

        Foreground color, used to overlay text on top of the card image. Always returned in Product Configuration object<br>    __Max Length:6__ Hexadecimal RGB color format (case-insensitive).<br> __Required: Yes__   # noqa: E501

        :param foreground_color: The foreground_color of this GetDigitalAssetsResponseSchema.  # noqa: E501
        :type: str
        """

        self._foreground_color = foreground_color

    @property
    def issuer_name(self):
        """Gets the issuer_name of this GetDigitalAssetsResponseSchema.  # noqa: E501

        Name of the issuing bank. Always returned in Product Configuration object <br>    __Max Length:64__<br> __Required: Yes__   # noqa: E501

        :return: The issuer_name of this GetDigitalAssetsResponseSchema.  # noqa: E501
        :rtype: str
        """
        return self._issuer_name

    @issuer_name.setter
    def issuer_name(self, issuer_name):
        """Sets the issuer_name of this GetDigitalAssetsResponseSchema.

        Name of the issuing bank. Always returned in Product Configuration object <br>    __Max Length:64__<br> __Required: Yes__   # noqa: E501

        :param issuer_name: The issuer_name of this GetDigitalAssetsResponseSchema.  # noqa: E501
        :type: str
        """

        self._issuer_name = issuer_name

    @property
    def short_description(self):
        """Gets the short_description of this GetDigitalAssetsResponseSchema.  # noqa: E501

        A short description for this product. Always returned in Product Configuration object  <br>   __Max Length:128__<br> __Required: Yes__   # noqa: E501

        :return: The short_description of this GetDigitalAssetsResponseSchema.  # noqa: E501
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this GetDigitalAssetsResponseSchema.

        A short description for this product. Always returned in Product Configuration object  <br>   __Max Length:128__<br> __Required: Yes__   # noqa: E501

        :param short_description: The short_description of this GetDigitalAssetsResponseSchema.  # noqa: E501
        :type: str
        """

        self._short_description = short_description

    @property
    def long_description(self):
        """Gets the long_description of this GetDigitalAssetsResponseSchema.  # noqa: E501

        A long description for this product.  <br>   __Max Length:256__<br> __Required: No__   # noqa: E501

        :return: The long_description of this GetDigitalAssetsResponseSchema.  # noqa: E501
        :rtype: str
        """
        return self._long_description

    @long_description.setter
    def long_description(self, long_description):
        """Sets the long_description of this GetDigitalAssetsResponseSchema.

        A long description for this product.  <br>   __Max Length:256__<br> __Required: No__   # noqa: E501

        :param long_description: The long_description of this GetDigitalAssetsResponseSchema.  # noqa: E501
        :type: str
        """

        self._long_description = long_description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetDigitalAssetsResponseSchema, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetDigitalAssetsResponseSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
