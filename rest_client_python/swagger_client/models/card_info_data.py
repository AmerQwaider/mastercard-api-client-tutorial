# coding: utf-8

"""
    MDES for Merchants

    The MDES APIs are designed as RPC style stateless web services where each API endpoint represents an operation to be performed.  All request and response payloads are sent in the JSON (JavaScript Object Notation) data-interchange format. Each endpoint in the API specifies the HTTP Method used to access it. All strings in request and response objects are to be UTF-8 encoded.  Each API URI includes the major and minor version of API that it conforms to.  This will allow multiple concurrent versions of the API to be deployed simultaneously.    # noqa: E501

    OpenAPI spec version: 1.2.7
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.billing_address import BillingAddress  # noqa: F401,E501


class CardInfoData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_number': 'str',
        'expiry_month': 'str',
        'expiry_year': 'str',
        'source': 'str',
        'cardholder_name': 'str',
        'security_code': 'str',
        'billing_address': 'BillingAddress'
    }

    attribute_map = {
        'account_number': 'accountNumber',
        'expiry_month': 'expiryMonth',
        'expiry_year': 'expiryYear',
        'source': 'source',
        'cardholder_name': 'cardholderName',
        'security_code': 'securityCode',
        'billing_address': 'billingAddress'
    }

    def __init__(self, account_number=None, expiry_month=None, expiry_year=None, source=None, cardholder_name=None, security_code=None, billing_address=None):  # noqa: E501
        """CardInfoData - a model defined in Swagger"""  # noqa: E501

        self._account_number = None
        self._expiry_month = None
        self._expiry_year = None
        self._source = None
        self._cardholder_name = None
        self._security_code = None
        self._billing_address = None
        self.discriminator = None

        if account_number is not None:
            self.account_number = account_number
        if expiry_month is not None:
            self.expiry_month = expiry_month
        if expiry_year is not None:
            self.expiry_year = expiry_year
        if source is not None:
            self.source = source
        if cardholder_name is not None:
            self.cardholder_name = cardholder_name
        if security_code is not None:
            self.security_code = security_code
        if billing_address is not None:
            self.billing_address = billing_address

    @property
    def account_number(self):
        """Gets the account_number of this CardInfoData.  # noqa: E501

        __(Required as minimum for Tokenization)__ The account number to be encrypted for tokenization. Only supplied if panUniqueReference or tokenUniqueReferenceForPanInfo is not present.   __Min Length:9__<br> __Max Length:19__   # noqa: E501

        :return: The account_number of this CardInfoData.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this CardInfoData.

        __(Required as minimum for Tokenization)__ The account number to be encrypted for tokenization. Only supplied if panUniqueReference or tokenUniqueReferenceForPanInfo is not present.   __Min Length:9__<br> __Max Length:19__   # noqa: E501

        :param account_number: The account_number of this CardInfoData.  # noqa: E501
        :type: str
        """

        self._account_number = account_number

    @property
    def expiry_month(self):
        """Gets the expiry_month of this CardInfoData.  # noqa: E501

        __(Required as minimum for Tokenization)__ The expiry month for the account. Only supplied if panUniqueReference or tokenUniqueReferenceForPanInfo is not present. Two numeric digits must be supplied. __Format: MM__<br> __Exact Length:2__   # noqa: E501

        :return: The expiry_month of this CardInfoData.  # noqa: E501
        :rtype: str
        """
        return self._expiry_month

    @expiry_month.setter
    def expiry_month(self, expiry_month):
        """Sets the expiry_month of this CardInfoData.

        __(Required as minimum for Tokenization)__ The expiry month for the account. Only supplied if panUniqueReference or tokenUniqueReferenceForPanInfo is not present. Two numeric digits must be supplied. __Format: MM__<br> __Exact Length:2__   # noqa: E501

        :param expiry_month: The expiry_month of this CardInfoData.  # noqa: E501
        :type: str
        """

        self._expiry_month = expiry_month

    @property
    def expiry_year(self):
        """Gets the expiry_year of this CardInfoData.  # noqa: E501

        __(Required as minimum for Tokenization)__  The expiry year for the account. Only supplied if panUniqueReference or tokenUniqueReferenceForPanInfo is not present. <br> __Format: YY__<br> __Exact Length:2__   # noqa: E501

        :return: The expiry_year of this CardInfoData.  # noqa: E501
        :rtype: str
        """
        return self._expiry_year

    @expiry_year.setter
    def expiry_year(self, expiry_year):
        """Sets the expiry_year of this CardInfoData.

        __(Required as minimum for Tokenization)__  The expiry year for the account. Only supplied if panUniqueReference or tokenUniqueReferenceForPanInfo is not present. <br> __Format: YY__<br> __Exact Length:2__   # noqa: E501

        :param expiry_year: The expiry_year of this CardInfoData.  # noqa: E501
        :type: str
        """

        self._expiry_year = expiry_year

    @property
    def source(self):
        """Gets the source of this CardInfoData.  # noqa: E501

        (__Required as minimum for Tokenization__)  The source of the account.   __Max Length:32__   # noqa: E501

        :return: The source of this CardInfoData.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this CardInfoData.

        (__Required as minimum for Tokenization__)  The source of the account.   __Max Length:32__   # noqa: E501

        :param source: The source of this CardInfoData.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def cardholder_name(self):
        """Gets the cardholder_name of this CardInfoData.  # noqa: E501

        __(OPTIONAL)__ The name of the cardholder<br> __Max Length:27__   # noqa: E501

        :return: The cardholder_name of this CardInfoData.  # noqa: E501
        :rtype: str
        """
        return self._cardholder_name

    @cardholder_name.setter
    def cardholder_name(self, cardholder_name):
        """Sets the cardholder_name of this CardInfoData.

        __(OPTIONAL)__ The name of the cardholder<br> __Max Length:27__   # noqa: E501

        :param cardholder_name: The cardholder_name of this CardInfoData.  # noqa: E501
        :type: str
        """

        self._cardholder_name = cardholder_name

    @property
    def security_code(self):
        """Gets the security_code of this CardInfoData.  # noqa: E501

        __(OPTIONAL)__ The security code for the account can optionally be provided for Tokenization. If provided, the validity will be checked.  __Max Length:3__   # noqa: E501

        :return: The security_code of this CardInfoData.  # noqa: E501
        :rtype: str
        """
        return self._security_code

    @security_code.setter
    def security_code(self, security_code):
        """Sets the security_code of this CardInfoData.

        __(OPTIONAL)__ The security code for the account can optionally be provided for Tokenization. If provided, the validity will be checked.  __Max Length:3__   # noqa: E501

        :param security_code: The security_code of this CardInfoData.  # noqa: E501
        :type: str
        """

        self._security_code = security_code

    @property
    def billing_address(self):
        """Gets the billing_address of this CardInfoData.  # noqa: E501


        :return: The billing_address of this CardInfoData.  # noqa: E501
        :rtype: BillingAddress
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this CardInfoData.


        :param billing_address: The billing_address of this CardInfoData.  # noqa: E501
        :type: BillingAddress
        """

        self._billing_address = billing_address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CardInfoData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CardInfoData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
