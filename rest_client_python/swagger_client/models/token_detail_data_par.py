# coding: utf-8

"""
    MDES for Merchants

    The MDES APIs are designed as RPC style stateless web services where each API endpoint represents an operation to be performed.  All request and response payloads are sent in the JSON (JavaScript Object Notation) data-interchange format. Each endpoint in the API specifies the HTTP Method used to access it. All strings in request and response objects are to be UTF-8 encoded.  Each API URI includes the major and minor version of API that it conforms to.  This will allow multiple concurrent versions of the API to be deployed simultaneously.    # noqa: E501

    OpenAPI spec version: 1.2.7
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TokenDetailDataPAR(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'payment_account_reference': 'str'
    }

    attribute_map = {
        'payment_account_reference': 'paymentAccountReference'
    }

    def __init__(self, payment_account_reference=None):  # noqa: E501
        """TokenDetailDataPAR - a model defined in Swagger"""  # noqa: E501

        self._payment_account_reference = None
        self.discriminator = None

        if payment_account_reference is not None:
            self.payment_account_reference = payment_account_reference

    @property
    def payment_account_reference(self):
        """Gets the payment_account_reference of this TokenDetailDataPAR.  # noqa: E501

        __CONDITIONAL__  - The unique account reference assigned to the PAN. __Only__ returned if the Token Requestor has opted to receive PAR and providing PAR is assigned by Mastercard or the Issuer provides PAR in the authorization message response.<br>    __Max Length:29__   # noqa: E501

        :return: The payment_account_reference of this TokenDetailDataPAR.  # noqa: E501
        :rtype: str
        """
        return self._payment_account_reference

    @payment_account_reference.setter
    def payment_account_reference(self, payment_account_reference):
        """Sets the payment_account_reference of this TokenDetailDataPAR.

        __CONDITIONAL__  - The unique account reference assigned to the PAN. __Only__ returned if the Token Requestor has opted to receive PAR and providing PAR is assigned by Mastercard or the Issuer provides PAR in the authorization message response.<br>    __Max Length:29__   # noqa: E501

        :param payment_account_reference: The payment_account_reference of this TokenDetailDataPAR.  # noqa: E501
        :type: str
        """

        self._payment_account_reference = payment_account_reference

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TokenDetailDataPAR, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TokenDetailDataPAR):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
