# coding: utf-8

"""
    MDES for Merchants

    The MDES APIs are designed as RPC style stateless web services where each API endpoint represents an operation to be performed.  All request and response payloads are sent in the JSON (JavaScript Object Notation) data-interchange format. Each endpoint in the API specifies the HTTP Method used to access it. All strings in request and response objects are to be UTF-8 encoded.  Each API URI includes the major and minor version of API that it conforms to.  This will allow multiple concurrent versions of the API to be deployed simultaneously.    # noqa: E501

    OpenAPI spec version: 1.2.7
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.error import Error  # noqa: F401,E501
from swagger_client.models.token_for_lcm import TokenForLCM  # noqa: F401,E501


class SuspendResponseSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'response_host': 'str',
        'response_id': 'str',
        'tokens': 'list[TokenForLCM]',
        'error_code': 'str',
        'error_description': 'str',
        'errors': 'Error'
    }

    attribute_map = {
        'response_host': 'responseHost',
        'response_id': 'responseId',
        'tokens': 'tokens',
        'error_code': 'errorCode',
        'error_description': 'errorDescription',
        'errors': 'errors'
    }

    def __init__(self, response_host=None, response_id=None, tokens=None, error_code=None, error_description=None, errors=None):  # noqa: E501
        """SuspendResponseSchema - a model defined in Swagger"""  # noqa: E501

        self._response_host = None
        self._response_id = None
        self._tokens = None
        self._error_code = None
        self._error_description = None
        self._errors = None
        self.discriminator = None

        if response_host is not None:
            self.response_host = response_host
        if response_id is not None:
            self.response_id = response_id
        if tokens is not None:
            self.tokens = tokens
        if error_code is not None:
            self.error_code = error_code
        if error_description is not None:
            self.error_description = error_description
        if errors is not None:
            self.errors = errors

    @property
    def response_host(self):
        """Gets the response_host of this SuspendResponseSchema.  # noqa: E501

        The host that originated the request. Future calls in the same conversation may be routed to this host.   # noqa: E501

        :return: The response_host of this SuspendResponseSchema.  # noqa: E501
        :rtype: str
        """
        return self._response_host

    @response_host.setter
    def response_host(self, response_host):
        """Sets the response_host of this SuspendResponseSchema.

        The host that originated the request. Future calls in the same conversation may be routed to this host.   # noqa: E501

        :param response_host: The response_host of this SuspendResponseSchema.  # noqa: E501
        :type: str
        """

        self._response_host = response_host

    @property
    def response_id(self):
        """Gets the response_id of this SuspendResponseSchema.  # noqa: E501

        Unique identifier for the response.   # noqa: E501

        :return: The response_id of this SuspendResponseSchema.  # noqa: E501
        :rtype: str
        """
        return self._response_id

    @response_id.setter
    def response_id(self, response_id):
        """Sets the response_id of this SuspendResponseSchema.

        Unique identifier for the response.   # noqa: E501

        :param response_id: The response_id of this SuspendResponseSchema.  # noqa: E501
        :type: str
        """

        self._response_id = response_id

    @property
    def tokens(self):
        """Gets the tokens of this SuspendResponseSchema.  # noqa: E501


        :return: The tokens of this SuspendResponseSchema.  # noqa: E501
        :rtype: list[TokenForLCM]
        """
        return self._tokens

    @tokens.setter
    def tokens(self, tokens):
        """Sets the tokens of this SuspendResponseSchema.


        :param tokens: The tokens of this SuspendResponseSchema.  # noqa: E501
        :type: list[TokenForLCM]
        """

        self._tokens = tokens

    @property
    def error_code(self):
        """Gets the error_code of this SuspendResponseSchema.  # noqa: E501

        __CONDITIONAL__<br> Returned in the event of and error and contains the reason the operation failed. Only use if errors object is not present.<br> __Max Length: 32__   # noqa: E501

        :return: The error_code of this SuspendResponseSchema.  # noqa: E501
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this SuspendResponseSchema.

        __CONDITIONAL__<br> Returned in the event of and error and contains the reason the operation failed. Only use if errors object is not present.<br> __Max Length: 32__   # noqa: E501

        :param error_code: The error_code of this SuspendResponseSchema.  # noqa: E501
        :type: str
        """

        self._error_code = error_code

    @property
    def error_description(self):
        """Gets the error_description of this SuspendResponseSchema.  # noqa: E501

        __CONDITIONAL__<br> Returned in the event of and error and contains a description of why the operation failed. Only use if errors object is not present.<br> __Max Length: 32__     # noqa: E501

        :return: The error_description of this SuspendResponseSchema.  # noqa: E501
        :rtype: str
        """
        return self._error_description

    @error_description.setter
    def error_description(self, error_description):
        """Sets the error_description of this SuspendResponseSchema.

        __CONDITIONAL__<br> Returned in the event of and error and contains a description of why the operation failed. Only use if errors object is not present.<br> __Max Length: 32__     # noqa: E501

        :param error_description: The error_description of this SuspendResponseSchema.  # noqa: E501
        :type: str
        """

        self._error_description = error_description

    @property
    def errors(self):
        """Gets the errors of this SuspendResponseSchema.  # noqa: E501


        :return: The errors of this SuspendResponseSchema.  # noqa: E501
        :rtype: Error
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this SuspendResponseSchema.


        :param errors: The errors of this SuspendResponseSchema.  # noqa: E501
        :type: Error
        """

        self._errors = errors

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SuspendResponseSchema, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SuspendResponseSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
