# coding: utf-8

"""
    MDES for Merchants

    The MDES APIs are designed as RPC style stateless web services where each API endpoint represents an operation to be performed.  All request and response payloads are sent in the JSON (JavaScript Object Notation) data-interchange format. Each endpoint in the API specifies the HTTP Method used to access it. All strings in request and response objects are to be UTF-8 encoded.  Each API URI includes the major and minor version of API that it conforms to.  This will allow multiple concurrent versions of the API to be deployed simultaneously.    # noqa: E501

    OpenAPI spec version: 1.2.7
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TransactError(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'source': 'str',
        'error_code': 'str',
        'description': 'str',
        'reason_code': 'str',
        'error_description': 'str'
    }

    attribute_map = {
        'source': 'source',
        'error_code': 'errorCode',
        'description': 'description',
        'reason_code': 'reasonCode',
        'error_description': 'errorDescription'
    }

    def __init__(self, source=None, error_code=None, description=None, reason_code=None, error_description=None):  # noqa: E501
        """TransactError - a model defined in Swagger"""  # noqa: E501

        self._source = None
        self._error_code = None
        self._description = None
        self._reason_code = None
        self._error_description = None
        self.discriminator = None

        if source is not None:
            self.source = source
        if error_code is not None:
            self.error_code = error_code
        if description is not None:
            self.description = description
        if reason_code is not None:
            self.reason_code = reason_code
        if error_description is not None:
            self.error_description = error_description

    @property
    def source(self):
        """Gets the source of this TransactError.  # noqa: E501

        An element used to indicate the source of the issue causing this error. Must be one of   * 'MDES'  * 'INPUT' <br> __Max Length: 32__   # noqa: E501

        :return: The source of this TransactError.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this TransactError.

        An element used to indicate the source of the issue causing this error. Must be one of   * 'MDES'  * 'INPUT' <br> __Max Length: 32__   # noqa: E501

        :param source: The source of this TransactError.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def error_code(self):
        """Gets the error_code of this TransactError.  # noqa: E501

        A reason code or information pertaining to the error that has occurred. This will contain the error reported by the platform (e.g. authentication errors) or service (e.g. invalid TUR)<br> __Max Length: 100__   # noqa: E501

        :return: The error_code of this TransactError.  # noqa: E501
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this TransactError.

        A reason code or information pertaining to the error that has occurred. This will contain the error reported by the platform (e.g. authentication errors) or service (e.g. invalid TUR)<br> __Max Length: 100__   # noqa: E501

        :param error_code: The error_code of this TransactError.  # noqa: E501
        :type: str
        """

        self._error_code = error_code

    @property
    def description(self):
        """Gets the description of this TransactError.  # noqa: E501

        Description of the reason why the operation failed. <br> __Max Length: 256__   # noqa: E501

        :return: The description of this TransactError.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TransactError.

        Description of the reason why the operation failed. <br> __Max Length: 256__   # noqa: E501

        :param description: The description of this TransactError.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def reason_code(self):
        """Gets the reason_code of this TransactError.  # noqa: E501

        A reason code or information pertaining to the error that has occurred from the service (e.g. invalid TUR). See API Response Errors<br> __Max Length: 100__           # noqa: E501

        :return: The reason_code of this TransactError.  # noqa: E501
        :rtype: str
        """
        return self._reason_code

    @reason_code.setter
    def reason_code(self, reason_code):
        """Sets the reason_code of this TransactError.

        A reason code or information pertaining to the error that has occurred from the service (e.g. invalid TUR). See API Response Errors<br> __Max Length: 100__           # noqa: E501

        :param reason_code: The reason_code of this TransactError.  # noqa: E501
        :type: str
        """

        self._reason_code = reason_code

    @property
    def error_description(self):
        """Gets the error_description of this TransactError.  # noqa: E501

        __DEPRECATED__<br> Use description instead.<br> __Max Length: 100__    # noqa: E501

        :return: The error_description of this TransactError.  # noqa: E501
        :rtype: str
        """
        return self._error_description

    @error_description.setter
    def error_description(self, error_description):
        """Sets the error_description of this TransactError.

        __DEPRECATED__<br> Use description instead.<br> __Max Length: 100__    # noqa: E501

        :param error_description: The error_description of this TransactError.  # noqa: E501
        :type: str
        """

        self._error_description = error_description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TransactError, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransactError):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
