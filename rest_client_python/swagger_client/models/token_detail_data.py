# coding: utf-8

"""
    MDES for Merchants

    The MDES APIs are designed as RPC style stateless web services where each API endpoint represents an operation to be performed.  All request and response payloads are sent in the JSON (JavaScript Object Notation) data-interchange format. Each endpoint in the API specifies the HTTP Method used to access it. All strings in request and response objects are to be UTF-8 encoded.  Each API URI includes the major and minor version of API that it conforms to.  This will allow multiple concurrent versions of the API to be deployed simultaneously.    # noqa: E501

    OpenAPI spec version: 1.2.7
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TokenDetailData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'token_number': 'str',
        'expiry_month': 'str',
        'expiry_year': 'str',
        'data_valid_until_timestamp': 'str',
        'payment_account_reference': 'str'
    }

    attribute_map = {
        'token_number': 'tokenNumber',
        'expiry_month': 'expiryMonth',
        'expiry_year': 'expiryYear',
        'data_valid_until_timestamp': 'dataValidUntilTimestamp',
        'payment_account_reference': 'paymentAccountReference'
    }

    def __init__(self, token_number=None, expiry_month=None, expiry_year=None, data_valid_until_timestamp=None, payment_account_reference=None):  # noqa: E501
        """TokenDetailData - a model defined in Swagger"""  # noqa: E501

        self._token_number = None
        self._expiry_month = None
        self._expiry_year = None
        self._data_valid_until_timestamp = None
        self._payment_account_reference = None
        self.discriminator = None

        if token_number is not None:
            self.token_number = token_number
        if expiry_month is not None:
            self.expiry_month = expiry_month
        if expiry_year is not None:
            self.expiry_year = expiry_year
        if data_valid_until_timestamp is not None:
            self.data_valid_until_timestamp = data_valid_until_timestamp
        if payment_account_reference is not None:
            self.payment_account_reference = payment_account_reference

    @property
    def token_number(self):
        """Gets the token_number of this TokenDetailData.  # noqa: E501

        Globally unique identifier for the Token, as assigned by MDES.     __Max Length:64__   # noqa: E501

        :return: The token_number of this TokenDetailData.  # noqa: E501
        :rtype: str
        """
        return self._token_number

    @token_number.setter
    def token_number(self, token_number):
        """Sets the token_number of this TokenDetailData.

        Globally unique identifier for the Token, as assigned by MDES.     __Max Length:64__   # noqa: E501

        :param token_number: The token_number of this TokenDetailData.  # noqa: E501
        :type: str
        """

        self._token_number = token_number

    @property
    def expiry_month(self):
        """Gets the expiry_month of this TokenDetailData.  # noqa: E501

        The expiry month for the account.   # noqa: E501

        :return: The expiry_month of this TokenDetailData.  # noqa: E501
        :rtype: str
        """
        return self._expiry_month

    @expiry_month.setter
    def expiry_month(self, expiry_month):
        """Sets the expiry_month of this TokenDetailData.

        The expiry month for the account.   # noqa: E501

        :param expiry_month: The expiry_month of this TokenDetailData.  # noqa: E501
        :type: str
        """

        self._expiry_month = expiry_month

    @property
    def expiry_year(self):
        """Gets the expiry_year of this TokenDetailData.  # noqa: E501

        The expiry year for the account.   # noqa: E501

        :return: The expiry_year of this TokenDetailData.  # noqa: E501
        :rtype: str
        """
        return self._expiry_year

    @expiry_year.setter
    def expiry_year(self, expiry_year):
        """Sets the expiry_year of this TokenDetailData.

        The expiry year for the account.   # noqa: E501

        :param expiry_year: The expiry_year of this TokenDetailData.  # noqa: E501
        :type: str
        """

        self._expiry_year = expiry_year

    @property
    def data_valid_until_timestamp(self):
        """Gets the data_valid_until_timestamp of this TokenDetailData.  # noqa: E501

        \"The date/time after which this CardInfoData object is considered invalid. If present, all systems must reject this CardInfoData object after this time and treat it as invalid data. Must be expressed in ISO 8601 extended format as one of the following: YYYY-MM-DDThh:mm:ss[.sss]Z YYYY-MM-DDThh:mm:ss[.sss]�hh:mm Where [.sss] is optional and can be 1 to 3 digits. Must be a value no more than 30 days in the future. MasterCard recommends using a value of (Current Time + 30 minutes).\"   # noqa: E501

        :return: The data_valid_until_timestamp of this TokenDetailData.  # noqa: E501
        :rtype: str
        """
        return self._data_valid_until_timestamp

    @data_valid_until_timestamp.setter
    def data_valid_until_timestamp(self, data_valid_until_timestamp):
        """Sets the data_valid_until_timestamp of this TokenDetailData.

        \"The date/time after which this CardInfoData object is considered invalid. If present, all systems must reject this CardInfoData object after this time and treat it as invalid data. Must be expressed in ISO 8601 extended format as one of the following: YYYY-MM-DDThh:mm:ss[.sss]Z YYYY-MM-DDThh:mm:ss[.sss]�hh:mm Where [.sss] is optional and can be 1 to 3 digits. Must be a value no more than 30 days in the future. MasterCard recommends using a value of (Current Time + 30 minutes).\"   # noqa: E501

        :param data_valid_until_timestamp: The data_valid_until_timestamp of this TokenDetailData.  # noqa: E501
        :type: str
        """

        self._data_valid_until_timestamp = data_valid_until_timestamp

    @property
    def payment_account_reference(self):
        """Gets the payment_account_reference of this TokenDetailData.  # noqa: E501

        \"The unique account reference assigned to the PAN. Conditionally returned if the Token Requestor has opted to receive PAR and providing PAR is assigned by Mastercard or the Issuer provides PAR in the authorization message response.    __Max Length:__ - 29\"   # noqa: E501

        :return: The payment_account_reference of this TokenDetailData.  # noqa: E501
        :rtype: str
        """
        return self._payment_account_reference

    @payment_account_reference.setter
    def payment_account_reference(self, payment_account_reference):
        """Sets the payment_account_reference of this TokenDetailData.

        \"The unique account reference assigned to the PAN. Conditionally returned if the Token Requestor has opted to receive PAR and providing PAR is assigned by Mastercard or the Issuer provides PAR in the authorization message response.    __Max Length:__ - 29\"   # noqa: E501

        :param payment_account_reference: The payment_account_reference of this TokenDetailData.  # noqa: E501
        :type: str
        """

        self._payment_account_reference = payment_account_reference

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TokenDetailData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TokenDetailData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
