# coding: utf-8

"""
    MDES for Merchants

    The MDES APIs are designed as RPC style stateless web services where each API endpoint represents an operation to be performed.  All request and response payloads are sent in the JSON (JavaScript Object Notation) data-interchange format. Each endpoint in the API specifies the HTTP Method used to access it. All strings in request and response objects are to be UTF-8 encoded.  Each API URI includes the major and minor version of API that it conforms to.  This will allow multiple concurrent versions of the API to be deployed simultaneously.    # noqa: E501

    The version of the OpenAPI document: 1.2.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class GetTaskStatusRequestSchema(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'response_host': 'str',
        'request_id': 'str',
        'token_requestor_id': 'str',
        'task_id': 'str'
    }

    attribute_map = {
        'response_host': 'responseHost',
        'request_id': 'requestId',
        'token_requestor_id': 'tokenRequestorId',
        'task_id': 'taskId'
    }

    def __init__(self, response_host=None, request_id=None, token_requestor_id=None, task_id=None):  # noqa: E501
        """GetTaskStatusRequestSchema - a model defined in OpenAPI"""  # noqa: E501

        self._response_host = None
        self._request_id = None
        self._token_requestor_id = None
        self._task_id = None
        self.discriminator = None

        if response_host is not None:
            self.response_host = response_host
        self.request_id = request_id
        if token_requestor_id is not None:
            self.token_requestor_id = token_requestor_id
        self.task_id = task_id

    @property
    def response_host(self):
        """Gets the response_host of this GetTaskStatusRequestSchema.  # noqa: E501

        The host that originated the request. Future calls in the same conversation may be routed to this host.   # noqa: E501

        :return: The response_host of this GetTaskStatusRequestSchema.  # noqa: E501
        :rtype: str
        """
        return self._response_host

    @response_host.setter
    def response_host(self, response_host):
        """Sets the response_host of this GetTaskStatusRequestSchema.

        The host that originated the request. Future calls in the same conversation may be routed to this host.   # noqa: E501

        :param response_host: The response_host of this GetTaskStatusRequestSchema.  # noqa: E501
        :type: str
        """

        self._response_host = response_host

    @property
    def request_id(self):
        """Gets the request_id of this GetTaskStatusRequestSchema.  # noqa: E501

        Unique identifier for the request.   # noqa: E501

        :return: The request_id of this GetTaskStatusRequestSchema.  # noqa: E501
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this GetTaskStatusRequestSchema.

        Unique identifier for the request.   # noqa: E501

        :param request_id: The request_id of this GetTaskStatusRequestSchema.  # noqa: E501
        :type: str
        """
        if request_id is None:
            raise ValueError("Invalid value for `request_id`, must not be `None`")  # noqa: E501

        self._request_id = request_id

    @property
    def token_requestor_id(self):
        """Gets the token_requestor_id of this GetTaskStatusRequestSchema.  # noqa: E501

        Identifies the Token Requestor.  __Length:11__   # noqa: E501

        :return: The token_requestor_id of this GetTaskStatusRequestSchema.  # noqa: E501
        :rtype: str
        """
        return self._token_requestor_id

    @token_requestor_id.setter
    def token_requestor_id(self, token_requestor_id):
        """Sets the token_requestor_id of this GetTaskStatusRequestSchema.

        Identifies the Token Requestor.  __Length:11__   # noqa: E501

        :param token_requestor_id: The token_requestor_id of this GetTaskStatusRequestSchema.  # noqa: E501
        :type: str
        """

        self._token_requestor_id = token_requestor_id

    @property
    def task_id(self):
        """Gets the task_id of this GetTaskStatusRequestSchema.  # noqa: E501

        Unique identifier for this task. Must be an identifier previously used when requesting a task.    __Max Length:64__   # noqa: E501

        :return: The task_id of this GetTaskStatusRequestSchema.  # noqa: E501
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this GetTaskStatusRequestSchema.

        Unique identifier for this task. Must be an identifier previously used when requesting a task.    __Max Length:64__   # noqa: E501

        :param task_id: The task_id of this GetTaskStatusRequestSchema.  # noqa: E501
        :type: str
        """
        if task_id is None:
            raise ValueError("Invalid value for `task_id`, must not be `None`")  # noqa: E501

        self._task_id = task_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetTaskStatusRequestSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
