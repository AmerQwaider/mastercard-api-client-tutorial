# coding: utf-8

"""
    MDES for Merchants

    The MDES APIs are designed as RPC style stateless web services where each API endpoint represents an operation to be performed.  All request and response payloads are sent in the JSON (JavaScript Object Notation) data-interchange format. Each endpoint in the API specifies the HTTP Method used to access it. All strings in request and response objects are to be UTF-8 encoded.  Each API URI includes the major and minor version of API that it conforms to.  This will allow multiple concurrent versions of the API to be deployed simultaneously.    # noqa: E501

    The version of the OpenAPI document: 1.2.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Token(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'token_unique_reference': 'str',
        'status': 'str',
        'suspended_by': 'list[str]',
        'status_timestamp': 'str',
        'product_config': 'ProductConfig',
        'token_info': 'TokenInfo'
    }

    attribute_map = {
        'token_unique_reference': 'tokenUniqueReference',
        'status': 'status',
        'suspended_by': 'suspendedBy',
        'status_timestamp': 'statusTimestamp',
        'product_config': 'productConfig',
        'token_info': 'tokenInfo'
    }

    def __init__(self, token_unique_reference=None, status=None, suspended_by=None, status_timestamp=None, product_config=None, token_info=None):  # noqa: E501
        """Token - a model defined in OpenAPI"""  # noqa: E501

        self._token_unique_reference = None
        self._status = None
        self._suspended_by = None
        self._status_timestamp = None
        self._product_config = None
        self._token_info = None
        self.discriminator = None

        if token_unique_reference is not None:
            self.token_unique_reference = token_unique_reference
        if status is not None:
            self.status = status
        if suspended_by is not None:
            self.suspended_by = suspended_by
        if status_timestamp is not None:
            self.status_timestamp = status_timestamp
        if product_config is not None:
            self.product_config = product_config
        if token_info is not None:
            self.token_info = token_info

    @property
    def token_unique_reference(self):
        """Gets the token_unique_reference of this Token.  # noqa: E501

        The unique reference allocated to the Token which is always present even if an error occurs. <br>      __Max Length:64__   # noqa: E501

        :return: The token_unique_reference of this Token.  # noqa: E501
        :rtype: str
        """
        return self._token_unique_reference

    @token_unique_reference.setter
    def token_unique_reference(self, token_unique_reference):
        """Sets the token_unique_reference of this Token.

        The unique reference allocated to the Token which is always present even if an error occurs. <br>      __Max Length:64__   # noqa: E501

        :param token_unique_reference: The token_unique_reference of this Token.  # noqa: E501
        :type: str
        """

        self._token_unique_reference = token_unique_reference

    @property
    def status(self):
        """Gets the status of this Token.  # noqa: E501

        The current status of Token. Must be either:    * 'INACTIVE' (Token has not yet been activated)  * 'ACTIVE' (Token is active and ready to transact)  * 'SUSPENDED' (Token is suspended and unable to transact)  * 'DEACTIVATED' (Token has been permanently deactivated).<br>      __Max Length:32__   # noqa: E501

        :return: The status of this Token.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Token.

        The current status of Token. Must be either:    * 'INACTIVE' (Token has not yet been activated)  * 'ACTIVE' (Token is active and ready to transact)  * 'SUSPENDED' (Token is suspended and unable to transact)  * 'DEACTIVATED' (Token has been permanently deactivated).<br>      __Max Length:32__   # noqa: E501

        :param status: The status of this Token.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def suspended_by(self):
        """Gets the suspended_by of this Token.  # noqa: E501

        (CONDITIONAL only supplied if status is SUSPENDED) Who or what caused the Token to be suspended One or more values of:     * ISSUER - Suspended by the Issuer.    * TOKEN_REQUESTOR - Suspended by the Token Requestor     * MOBILE_PIN_LOCKED - Suspended due to the Mobile PIN being locked    * CARDHOLDER - Suspended by the Cardholder <br>          __Max Length__: N/A       # noqa: E501

        :return: The suspended_by of this Token.  # noqa: E501
        :rtype: list[str]
        """
        return self._suspended_by

    @suspended_by.setter
    def suspended_by(self, suspended_by):
        """Sets the suspended_by of this Token.

        (CONDITIONAL only supplied if status is SUSPENDED) Who or what caused the Token to be suspended One or more values of:     * ISSUER - Suspended by the Issuer.    * TOKEN_REQUESTOR - Suspended by the Token Requestor     * MOBILE_PIN_LOCKED - Suspended due to the Mobile PIN being locked    * CARDHOLDER - Suspended by the Cardholder <br>          __Max Length__: N/A       # noqa: E501

        :param suspended_by: The suspended_by of this Token.  # noqa: E501
        :type: list[str]
        """

        self._suspended_by = suspended_by

    @property
    def status_timestamp(self):
        """Gets the status_timestamp of this Token.  # noqa: E501

        The date and time the token status was last updated. Expressed in ISO 8601 extended format as one of the following:     * YYYY-MM-DDThh:mm:ss[.sss]Z    * YYYY-MM-DDThh:mm:ss[.sss]�hh:mm    * Where [.sss] is optional and can be 1 to 3 digits. <br>  __Max Length:29__     # noqa: E501

        :return: The status_timestamp of this Token.  # noqa: E501
        :rtype: str
        """
        return self._status_timestamp

    @status_timestamp.setter
    def status_timestamp(self, status_timestamp):
        """Sets the status_timestamp of this Token.

        The date and time the token status was last updated. Expressed in ISO 8601 extended format as one of the following:     * YYYY-MM-DDThh:mm:ss[.sss]Z    * YYYY-MM-DDThh:mm:ss[.sss]�hh:mm    * Where [.sss] is optional and can be 1 to 3 digits. <br>  __Max Length:29__     # noqa: E501

        :param status_timestamp: The status_timestamp of this Token.  # noqa: E501
        :type: str
        """

        self._status_timestamp = status_timestamp

    @property
    def product_config(self):
        """Gets the product_config of this Token.  # noqa: E501


        :return: The product_config of this Token.  # noqa: E501
        :rtype: ProductConfig
        """
        return self._product_config

    @product_config.setter
    def product_config(self, product_config):
        """Sets the product_config of this Token.


        :param product_config: The product_config of this Token.  # noqa: E501
        :type: ProductConfig
        """

        self._product_config = product_config

    @property
    def token_info(self):
        """Gets the token_info of this Token.  # noqa: E501


        :return: The token_info of this Token.  # noqa: E501
        :rtype: TokenInfo
        """
        return self._token_info

    @token_info.setter
    def token_info(self, token_info):
        """Sets the token_info of this Token.


        :param token_info: The token_info of this Token.  # noqa: E501
        :type: TokenInfo
        """

        self._token_info = token_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Token):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
