# coding: utf-8

"""
    MDES for Merchants

    The MDES APIs are designed as RPC style stateless web services where each API endpoint represents an operation to be performed.  All request and response payloads are sent in the JSON (JavaScript Object Notation) data-interchange format. Each endpoint in the API specifies the HTTP Method used to access it. All strings in request and response objects are to be UTF-8 encoded.  Each API URI includes the major and minor version of API that it conforms to.  This will allow multiple concurrent versions of the API to be deployed simultaneously.    # noqa: E501

    The version of the OpenAPI document: 1.2.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class BillingAddress(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'line1': 'str',
        'line2': 'str',
        'city': 'str',
        'country_subdivision': 'str',
        'postal_code': 'str',
        'country': 'str'
    }

    attribute_map = {
        'line1': 'line1',
        'line2': 'line2',
        'city': 'city',
        'country_subdivision': 'countrySubdivision',
        'postal_code': 'postalCode',
        'country': 'country'
    }

    def __init__(self, line1=None, line2=None, city=None, country_subdivision=None, postal_code=None, country=None):  # noqa: E501
        """BillingAddress - a model defined in OpenAPI"""  # noqa: E501

        self._line1 = None
        self._line2 = None
        self._city = None
        self._country_subdivision = None
        self._postal_code = None
        self._country = None
        self.discriminator = None

        if line1 is not None:
            self.line1 = line1
        if line2 is not None:
            self.line2 = line2
        if city is not None:
            self.city = city
        if country_subdivision is not None:
            self.country_subdivision = country_subdivision
        if postal_code is not None:
            self.postal_code = postal_code
        if country is not None:
            self.country = country

    @property
    def line1(self):
        """Gets the line1 of this BillingAddress.  # noqa: E501

        __(OPTIONAL)__<br> The first line of the street address for the billing address.<br> __Max Length:64__   # noqa: E501

        :return: The line1 of this BillingAddress.  # noqa: E501
        :rtype: str
        """
        return self._line1

    @line1.setter
    def line1(self, line1):
        """Sets the line1 of this BillingAddress.

        __(OPTIONAL)__<br> The first line of the street address for the billing address.<br> __Max Length:64__   # noqa: E501

        :param line1: The line1 of this BillingAddress.  # noqa: E501
        :type: str
        """

        self._line1 = line1

    @property
    def line2(self):
        """Gets the line2 of this BillingAddress.  # noqa: E501

        __(OPTIONAL)__ The second line of the street address for the billing address.<br> __Max Length:64__   # noqa: E501

        :return: The line2 of this BillingAddress.  # noqa: E501
        :rtype: str
        """
        return self._line2

    @line2.setter
    def line2(self, line2):
        """Sets the line2 of this BillingAddress.

        __(OPTIONAL)__ The second line of the street address for the billing address.<br> __Max Length:64__   # noqa: E501

        :param line2: The line2 of this BillingAddress.  # noqa: E501
        :type: str
        """

        self._line2 = line2

    @property
    def city(self):
        """Gets the city of this BillingAddress.  # noqa: E501

        __(OPTIONAL)__<br> The city of the billing address.<br> __Max Length:32__   # noqa: E501

        :return: The city of this BillingAddress.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this BillingAddress.

        __(OPTIONAL)__<br> The city of the billing address.<br> __Max Length:32__   # noqa: E501

        :param city: The city of this BillingAddress.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def country_subdivision(self):
        """Gets the country_subdivision of this BillingAddress.  # noqa: E501

        __(OPTIONAL)__<br> The state or country subdivision of the billing address.<br> __Max Length:12__   # noqa: E501

        :return: The country_subdivision of this BillingAddress.  # noqa: E501
        :rtype: str
        """
        return self._country_subdivision

    @country_subdivision.setter
    def country_subdivision(self, country_subdivision):
        """Sets the country_subdivision of this BillingAddress.

        __(OPTIONAL)__<br> The state or country subdivision of the billing address.<br> __Max Length:12__   # noqa: E501

        :param country_subdivision: The country_subdivision of this BillingAddress.  # noqa: E501
        :type: str
        """

        self._country_subdivision = country_subdivision

    @property
    def postal_code(self):
        """Gets the postal_code of this BillingAddress.  # noqa: E501

        __(OPTIONAL)__<br> The postal of code of the billing address.<br> __Max Length:16__   # noqa: E501

        :return: The postal_code of this BillingAddress.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this BillingAddress.

        __(OPTIONAL)__<br> The postal of code of the billing address.<br> __Max Length:16__   # noqa: E501

        :param postal_code: The postal_code of this BillingAddress.  # noqa: E501
        :type: str
        """

        self._postal_code = postal_code

    @property
    def country(self):
        """Gets the country of this BillingAddress.  # noqa: E501

        __(OPTIONAL)__ The country of the billing address. <br> __Max Length:3__   # noqa: E501

        :return: The country of this BillingAddress.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this BillingAddress.

        __(OPTIONAL)__ The country of the billing address. <br> __Max Length:3__   # noqa: E501

        :param country: The country of this BillingAddress.  # noqa: E501
        :type: str
        """

        self._country = country

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BillingAddress):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
