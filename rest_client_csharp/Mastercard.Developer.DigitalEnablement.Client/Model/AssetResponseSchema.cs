/* 
 * MDES for Merchants
 *
 * The MDES APIs are designed as RPC style stateless web services where each API endpoint represents an operation to be performed.  All request and response payloads are sent in the JSON (JavaScript Object Notation) data-interchange format. Each endpoint in the API specifies the HTTP Method used to access it. All strings in request and response objects are to be UTF-8 encoded.  Each API URI includes the major and minor version of API that it conforms to.  This will allow multiple concurrent versions of the API to be deployed simultaneously.  
 *
 * OpenAPI spec version: 1.2.7
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Mastercard.Developer.DigitalEnablement.Client.Client.OpenAPIDateConverter;

namespace Mastercard.Developer.DigitalEnablement.Client.Model
{
    /// <summary>
    /// AssetResponseSchema
    /// </summary>
    [DataContract]
    public partial class AssetResponseSchema :  IEquatable<AssetResponseSchema>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AssetResponseSchema" /> class.
        /// </summary>
        /// <param name="mediaContents">mediaContents.</param>
        public AssetResponseSchema(List<MediaContent> mediaContents = default(List<MediaContent>))
        {
            this.MediaContents = mediaContents;
        }
        
        /// <summary>
        /// Gets or Sets MediaContents
        /// </summary>
        [DataMember(Name="mediaContents", EmitDefaultValue=false)]
        public List<MediaContent> MediaContents { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AssetResponseSchema {\n");
            sb.Append("  MediaContents: ").Append(MediaContents).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AssetResponseSchema);
        }

        /// <summary>
        /// Returns true if AssetResponseSchema instances are equal
        /// </summary>
        /// <param name="input">Instance of AssetResponseSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AssetResponseSchema input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MediaContents == input.MediaContents ||
                    this.MediaContents != null &&
                    this.MediaContents.SequenceEqual(input.MediaContents)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MediaContents != null)
                    hashCode = hashCode * 59 + this.MediaContents.GetHashCode();
                return hashCode;
            }
        }
    }

}
