/* 
 * MDES for Merchants
 *
 * The MDES APIs are designed as RPC style stateless web services where each API endpoint represents an operation to be performed.  All request and response payloads are sent in the JSON (JavaScript Object Notation) data-interchange format. Each endpoint in the API specifies the HTTP Method used to access it. All strings in request and response objects are to be UTF-8 encoded.  Each API URI includes the major and minor version of API that it conforms to.  This will allow multiple concurrent versions of the API to be deployed simultaneously.  
 *
 * OpenAPI spec version: 1.2.7
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Mastercard.Developer.DigitalEnablement.Client.Client.OpenAPIDateConverter;

namespace Mastercard.Developer.DigitalEnablement.Client.Model
{
    /// <summary>
    /// TokenizeRequestSchema
    /// </summary>
    [DataContract]
    public partial class TokenizeRequestSchema :  IEquatable<TokenizeRequestSchema>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TokenizeRequestSchema" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TokenizeRequestSchema() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TokenizeRequestSchema" /> class.
        /// </summary>
        /// <param name="responseHost">\&quot;The host that originated the request. Future calls in the same conversation may be routed to this host. Must be provided as: host[:port][/contextRoot] Where port and contextRoot are optional. If contextRoot is not provided, the default (per the URL Scheme) is assumed and must be used.\&quot; .</param>
        /// <param name="requestId">Unique identifier for the request. .</param>
        /// <param name="tokenType">The type of Token requested. Must be CLOUD       __Max Length:32__     (required).</param>
        /// <param name="tokenRequestorId">Identifies the Token Requestor       __Max Length:11__   (required).</param>
        /// <param name="taskId">Identifier for this task as assigned by the Token Requestor, unique across a given Token Requestor Identifier. May be used in the Get Task Status API to query the status of this task.      __Max Length:64__  (required).</param>
        /// <param name="cardInfo">cardInfo (required).</param>
        /// <param name="consumerLanguage">Language preference selected by the consumer. Formatted as an ISO- 639-1 two-letter language code.    __Max Length:2__ .</param>
        /// <param name="tokenizationAuthenticationValue">The Tokenization Authentication Value (TAV) as cryptographically signed by the Issuer to authorize this digitization request.      __Max Length:2048__ .</param>
        /// <param name="decisioningData">decisioningData.</param>
        public TokenizeRequestSchema(string responseHost = default(string), string requestId = default(string), string tokenType = default(string), string tokenRequestorId = default(string), string taskId = default(string), CardInfo cardInfo = default(CardInfo), string consumerLanguage = default(string), string tokenizationAuthenticationValue = default(string), DecisioningData decisioningData = default(DecisioningData))
        {
            // to ensure "tokenType" is required (not null)
            if (tokenType == null)
            {
                throw new InvalidDataException("tokenType is a required property for TokenizeRequestSchema and cannot be null");
            }
            else
            {
                this.TokenType = tokenType;
            }
            
            // to ensure "tokenRequestorId" is required (not null)
            if (tokenRequestorId == null)
            {
                throw new InvalidDataException("tokenRequestorId is a required property for TokenizeRequestSchema and cannot be null");
            }
            else
            {
                this.TokenRequestorId = tokenRequestorId;
            }
            
            // to ensure "taskId" is required (not null)
            if (taskId == null)
            {
                throw new InvalidDataException("taskId is a required property for TokenizeRequestSchema and cannot be null");
            }
            else
            {
                this.TaskId = taskId;
            }
            
            // to ensure "cardInfo" is required (not null)
            if (cardInfo == null)
            {
                throw new InvalidDataException("cardInfo is a required property for TokenizeRequestSchema and cannot be null");
            }
            else
            {
                this.CardInfo = cardInfo;
            }
            
            this.ResponseHost = responseHost;
            this.RequestId = requestId;
            this.ConsumerLanguage = consumerLanguage;
            this.TokenizationAuthenticationValue = tokenizationAuthenticationValue;
            this.DecisioningData = decisioningData;
        }
        
        /// <summary>
        /// \&quot;The host that originated the request. Future calls in the same conversation may be routed to this host. Must be provided as: host[:port][/contextRoot] Where port and contextRoot are optional. If contextRoot is not provided, the default (per the URL Scheme) is assumed and must be used.\&quot; 
        /// </summary>
        /// <value>\&quot;The host that originated the request. Future calls in the same conversation may be routed to this host. Must be provided as: host[:port][/contextRoot] Where port and contextRoot are optional. If contextRoot is not provided, the default (per the URL Scheme) is assumed and must be used.\&quot; </value>
        [DataMember(Name="responseHost", EmitDefaultValue=false)]
        public string ResponseHost { get; set; }

        /// <summary>
        /// Unique identifier for the request. 
        /// </summary>
        /// <value>Unique identifier for the request. </value>
        [DataMember(Name="requestId", EmitDefaultValue=false)]
        public string RequestId { get; set; }

        /// <summary>
        /// The type of Token requested. Must be CLOUD       __Max Length:32__    
        /// </summary>
        /// <value>The type of Token requested. Must be CLOUD       __Max Length:32__    </value>
        [DataMember(Name="tokenType", EmitDefaultValue=false)]
        public string TokenType { get; set; }

        /// <summary>
        /// Identifies the Token Requestor       __Max Length:11__  
        /// </summary>
        /// <value>Identifies the Token Requestor       __Max Length:11__  </value>
        [DataMember(Name="tokenRequestorId", EmitDefaultValue=false)]
        public string TokenRequestorId { get; set; }

        /// <summary>
        /// Identifier for this task as assigned by the Token Requestor, unique across a given Token Requestor Identifier. May be used in the Get Task Status API to query the status of this task.      __Max Length:64__ 
        /// </summary>
        /// <value>Identifier for this task as assigned by the Token Requestor, unique across a given Token Requestor Identifier. May be used in the Get Task Status API to query the status of this task.      __Max Length:64__ </value>
        [DataMember(Name="taskId", EmitDefaultValue=false)]
        public string TaskId { get; set; }

        /// <summary>
        /// Gets or Sets CardInfo
        /// </summary>
        [DataMember(Name="cardInfo", EmitDefaultValue=false)]
        public CardInfo CardInfo { get; set; }

        /// <summary>
        /// Language preference selected by the consumer. Formatted as an ISO- 639-1 two-letter language code.    __Max Length:2__ 
        /// </summary>
        /// <value>Language preference selected by the consumer. Formatted as an ISO- 639-1 two-letter language code.    __Max Length:2__ </value>
        [DataMember(Name="consumerLanguage", EmitDefaultValue=false)]
        public string ConsumerLanguage { get; set; }

        /// <summary>
        /// The Tokenization Authentication Value (TAV) as cryptographically signed by the Issuer to authorize this digitization request.      __Max Length:2048__ 
        /// </summary>
        /// <value>The Tokenization Authentication Value (TAV) as cryptographically signed by the Issuer to authorize this digitization request.      __Max Length:2048__ </value>
        [DataMember(Name="tokenizationAuthenticationValue", EmitDefaultValue=false)]
        public string TokenizationAuthenticationValue { get; set; }

        /// <summary>
        /// Gets or Sets DecisioningData
        /// </summary>
        [DataMember(Name="decisioningData", EmitDefaultValue=false)]
        public DecisioningData DecisioningData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TokenizeRequestSchema {\n");
            sb.Append("  ResponseHost: ").Append(ResponseHost).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  TokenType: ").Append(TokenType).Append("\n");
            sb.Append("  TokenRequestorId: ").Append(TokenRequestorId).Append("\n");
            sb.Append("  TaskId: ").Append(TaskId).Append("\n");
            sb.Append("  CardInfo: ").Append(CardInfo).Append("\n");
            sb.Append("  ConsumerLanguage: ").Append(ConsumerLanguage).Append("\n");
            sb.Append("  TokenizationAuthenticationValue: ").Append(TokenizationAuthenticationValue).Append("\n");
            sb.Append("  DecisioningData: ").Append(DecisioningData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TokenizeRequestSchema);
        }

        /// <summary>
        /// Returns true if TokenizeRequestSchema instances are equal
        /// </summary>
        /// <param name="input">Instance of TokenizeRequestSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TokenizeRequestSchema input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ResponseHost == input.ResponseHost ||
                    (this.ResponseHost != null &&
                    this.ResponseHost.Equals(input.ResponseHost))
                ) && 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                ) && 
                (
                    this.TokenType == input.TokenType ||
                    (this.TokenType != null &&
                    this.TokenType.Equals(input.TokenType))
                ) && 
                (
                    this.TokenRequestorId == input.TokenRequestorId ||
                    (this.TokenRequestorId != null &&
                    this.TokenRequestorId.Equals(input.TokenRequestorId))
                ) && 
                (
                    this.TaskId == input.TaskId ||
                    (this.TaskId != null &&
                    this.TaskId.Equals(input.TaskId))
                ) && 
                (
                    this.CardInfo == input.CardInfo ||
                    (this.CardInfo != null &&
                    this.CardInfo.Equals(input.CardInfo))
                ) && 
                (
                    this.ConsumerLanguage == input.ConsumerLanguage ||
                    (this.ConsumerLanguage != null &&
                    this.ConsumerLanguage.Equals(input.ConsumerLanguage))
                ) && 
                (
                    this.TokenizationAuthenticationValue == input.TokenizationAuthenticationValue ||
                    (this.TokenizationAuthenticationValue != null &&
                    this.TokenizationAuthenticationValue.Equals(input.TokenizationAuthenticationValue))
                ) && 
                (
                    this.DecisioningData == input.DecisioningData ||
                    (this.DecisioningData != null &&
                    this.DecisioningData.Equals(input.DecisioningData))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ResponseHost != null)
                    hashCode = hashCode * 59 + this.ResponseHost.GetHashCode();
                if (this.RequestId != null)
                    hashCode = hashCode * 59 + this.RequestId.GetHashCode();
                if (this.TokenType != null)
                    hashCode = hashCode * 59 + this.TokenType.GetHashCode();
                if (this.TokenRequestorId != null)
                    hashCode = hashCode * 59 + this.TokenRequestorId.GetHashCode();
                if (this.TaskId != null)
                    hashCode = hashCode * 59 + this.TaskId.GetHashCode();
                if (this.CardInfo != null)
                    hashCode = hashCode * 59 + this.CardInfo.GetHashCode();
                if (this.ConsumerLanguage != null)
                    hashCode = hashCode * 59 + this.ConsumerLanguage.GetHashCode();
                if (this.TokenizationAuthenticationValue != null)
                    hashCode = hashCode * 59 + this.TokenizationAuthenticationValue.GetHashCode();
                if (this.DecisioningData != null)
                    hashCode = hashCode * 59 + this.DecisioningData.GetHashCode();
                return hashCode;
            }
        }
    }

}
