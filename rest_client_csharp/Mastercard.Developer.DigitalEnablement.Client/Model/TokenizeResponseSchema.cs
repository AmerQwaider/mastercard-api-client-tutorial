/* 
 * MDES for Merchants
 *
 * The MDES APIs are designed as RPC style stateless web services where each API endpoint represents an operation to be performed.  All request and response payloads are sent in the JSON (JavaScript Object Notation) data-interchange format. Each endpoint in the API specifies the HTTP Method used to access it. All strings in request and response objects are to be UTF-8 encoded.  Each API URI includes the major and minor version of API that it conforms to.  This will allow multiple concurrent versions of the API to be deployed simultaneously.  
 *
 * OpenAPI spec version: 1.2.7
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Mastercard.Developer.DigitalEnablement.Client.Client.OpenAPIDateConverter;

namespace Mastercard.Developer.DigitalEnablement.Client.Model
{
    /// <summary>
    /// TokenizeResponseSchema
    /// </summary>
    [DataContract]
    public partial class TokenizeResponseSchema :  IEquatable<TokenizeResponseSchema>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TokenizeResponseSchema" /> class.
        /// </summary>
        /// <param name="responseHost">The MasterCard host that originated the request. Future calls in the same conversation may be routed to this host.  .</param>
        /// <param name="responseId">Unique identifier for the response. .</param>
        /// <param name="decision">The tokenization decision for this digitization request. Must be either APPROVED (Digitization request was approved), DECLINED (Digitization request was declined) OR REQUIRE_ADDITIONAL_AUTHENTICATION Digitization request was approved but optionally requires additional authentication. One or more Authentication methods may be provided). .</param>
        /// <param name="authenticationMethods">authenticationMethods.</param>
        /// <param name="tokenUniqueReference">The unique reference allocated to the new Token. Serves as a unique identifier for all subsequent queries or management functions relating to this Token. Provided if the decision was APPROVED or REQUIRE_ADDITIONAL_AUTHENTICATION.    __Max Length:64__ .</param>
        /// <param name="panUniqueReference">The unique reference allocated to the Account Primary Account Number. Provided if the decision was APPROVED or REQUIRE_ADDITIONAL_AUTHENTICATION.  __Max Length:64__ .</param>
        /// <param name="productConfig">productConfig.</param>
        /// <param name="tokenInfo">tokenInfo.</param>
        /// <param name="tokenDetail">tokenDetail.</param>
        /// <param name="errorCode">__CONDITIONAL__&lt;br&gt; Returned in the event of and error and contains the reason the operation failed. Only use if errors object is not present.&lt;br&gt; __Max Length: 32__ .</param>
        /// <param name="errorDescription">__CONDITIONAL__&lt;br&gt; Returned in the event of and error and contains a description of why the operation failed. Only use if errors object is not present.&lt;br&gt; __Max Length: 32__   .</param>
        /// <param name="errors">errors.</param>
        public TokenizeResponseSchema(string responseHost = default(string), string responseId = default(string), string decision = default(string), List<AuthenticationMethods> authenticationMethods = default(List<AuthenticationMethods>), string tokenUniqueReference = default(string), string panUniqueReference = default(string), ProductConfig productConfig = default(ProductConfig), TokenInfo tokenInfo = default(TokenInfo), TokenDetailTokenizeResponse tokenDetail = default(TokenDetailTokenizeResponse), string errorCode = default(string), string errorDescription = default(string), Error errors = default(Error))
        {
            this.ResponseHost = responseHost;
            this.ResponseId = responseId;
            this.Decision = decision;
            this.AuthenticationMethods = authenticationMethods;
            this.TokenUniqueReference = tokenUniqueReference;
            this.PanUniqueReference = panUniqueReference;
            this.ProductConfig = productConfig;
            this.TokenInfo = tokenInfo;
            this.TokenDetail = tokenDetail;
            this.ErrorCode = errorCode;
            this.ErrorDescription = errorDescription;
            this.Errors = errors;
        }
        
        /// <summary>
        /// The MasterCard host that originated the request. Future calls in the same conversation may be routed to this host.  
        /// </summary>
        /// <value>The MasterCard host that originated the request. Future calls in the same conversation may be routed to this host.  </value>
        [DataMember(Name="responseHost", EmitDefaultValue=false)]
        public string ResponseHost { get; set; }

        /// <summary>
        /// Unique identifier for the response. 
        /// </summary>
        /// <value>Unique identifier for the response. </value>
        [DataMember(Name="responseId", EmitDefaultValue=false)]
        public string ResponseId { get; set; }

        /// <summary>
        /// The tokenization decision for this digitization request. Must be either APPROVED (Digitization request was approved), DECLINED (Digitization request was declined) OR REQUIRE_ADDITIONAL_AUTHENTICATION Digitization request was approved but optionally requires additional authentication. One or more Authentication methods may be provided). 
        /// </summary>
        /// <value>The tokenization decision for this digitization request. Must be either APPROVED (Digitization request was approved), DECLINED (Digitization request was declined) OR REQUIRE_ADDITIONAL_AUTHENTICATION Digitization request was approved but optionally requires additional authentication. One or more Authentication methods may be provided). </value>
        [DataMember(Name="decision", EmitDefaultValue=false)]
        public string Decision { get; set; }

        /// <summary>
        /// Gets or Sets AuthenticationMethods
        /// </summary>
        [DataMember(Name="authenticationMethods", EmitDefaultValue=false)]
        public List<AuthenticationMethods> AuthenticationMethods { get; set; }

        /// <summary>
        /// The unique reference allocated to the new Token. Serves as a unique identifier for all subsequent queries or management functions relating to this Token. Provided if the decision was APPROVED or REQUIRE_ADDITIONAL_AUTHENTICATION.    __Max Length:64__ 
        /// </summary>
        /// <value>The unique reference allocated to the new Token. Serves as a unique identifier for all subsequent queries or management functions relating to this Token. Provided if the decision was APPROVED or REQUIRE_ADDITIONAL_AUTHENTICATION.    __Max Length:64__ </value>
        [DataMember(Name="tokenUniqueReference", EmitDefaultValue=false)]
        public string TokenUniqueReference { get; set; }

        /// <summary>
        /// The unique reference allocated to the Account Primary Account Number. Provided if the decision was APPROVED or REQUIRE_ADDITIONAL_AUTHENTICATION.  __Max Length:64__ 
        /// </summary>
        /// <value>The unique reference allocated to the Account Primary Account Number. Provided if the decision was APPROVED or REQUIRE_ADDITIONAL_AUTHENTICATION.  __Max Length:64__ </value>
        [DataMember(Name="panUniqueReference", EmitDefaultValue=false)]
        public string PanUniqueReference { get; set; }

        /// <summary>
        /// Gets or Sets ProductConfig
        /// </summary>
        [DataMember(Name="productConfig", EmitDefaultValue=false)]
        public ProductConfig ProductConfig { get; set; }

        /// <summary>
        /// Gets or Sets TokenInfo
        /// </summary>
        [DataMember(Name="tokenInfo", EmitDefaultValue=false)]
        public TokenInfo TokenInfo { get; set; }

        /// <summary>
        /// Gets or Sets TokenDetail
        /// </summary>
        [DataMember(Name="tokenDetail", EmitDefaultValue=false)]
        public TokenDetailTokenizeResponse TokenDetail { get; set; }

        /// <summary>
        /// __CONDITIONAL__&lt;br&gt; Returned in the event of and error and contains the reason the operation failed. Only use if errors object is not present.&lt;br&gt; __Max Length: 32__ 
        /// </summary>
        /// <value>__CONDITIONAL__&lt;br&gt; Returned in the event of and error and contains the reason the operation failed. Only use if errors object is not present.&lt;br&gt; __Max Length: 32__ </value>
        [DataMember(Name="errorCode", EmitDefaultValue=false)]
        public string ErrorCode { get; set; }

        /// <summary>
        /// __CONDITIONAL__&lt;br&gt; Returned in the event of and error and contains a description of why the operation failed. Only use if errors object is not present.&lt;br&gt; __Max Length: 32__   
        /// </summary>
        /// <value>__CONDITIONAL__&lt;br&gt; Returned in the event of and error and contains a description of why the operation failed. Only use if errors object is not present.&lt;br&gt; __Max Length: 32__   </value>
        [DataMember(Name="errorDescription", EmitDefaultValue=false)]
        public string ErrorDescription { get; set; }

        /// <summary>
        /// Gets or Sets Errors
        /// </summary>
        [DataMember(Name="errors", EmitDefaultValue=false)]
        public Error Errors { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TokenizeResponseSchema {\n");
            sb.Append("  ResponseHost: ").Append(ResponseHost).Append("\n");
            sb.Append("  ResponseId: ").Append(ResponseId).Append("\n");
            sb.Append("  Decision: ").Append(Decision).Append("\n");
            sb.Append("  AuthenticationMethods: ").Append(AuthenticationMethods).Append("\n");
            sb.Append("  TokenUniqueReference: ").Append(TokenUniqueReference).Append("\n");
            sb.Append("  PanUniqueReference: ").Append(PanUniqueReference).Append("\n");
            sb.Append("  ProductConfig: ").Append(ProductConfig).Append("\n");
            sb.Append("  TokenInfo: ").Append(TokenInfo).Append("\n");
            sb.Append("  TokenDetail: ").Append(TokenDetail).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  ErrorDescription: ").Append(ErrorDescription).Append("\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TokenizeResponseSchema);
        }

        /// <summary>
        /// Returns true if TokenizeResponseSchema instances are equal
        /// </summary>
        /// <param name="input">Instance of TokenizeResponseSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TokenizeResponseSchema input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ResponseHost == input.ResponseHost ||
                    (this.ResponseHost != null &&
                    this.ResponseHost.Equals(input.ResponseHost))
                ) && 
                (
                    this.ResponseId == input.ResponseId ||
                    (this.ResponseId != null &&
                    this.ResponseId.Equals(input.ResponseId))
                ) && 
                (
                    this.Decision == input.Decision ||
                    (this.Decision != null &&
                    this.Decision.Equals(input.Decision))
                ) && 
                (
                    this.AuthenticationMethods == input.AuthenticationMethods ||
                    this.AuthenticationMethods != null &&
                    this.AuthenticationMethods.SequenceEqual(input.AuthenticationMethods)
                ) && 
                (
                    this.TokenUniqueReference == input.TokenUniqueReference ||
                    (this.TokenUniqueReference != null &&
                    this.TokenUniqueReference.Equals(input.TokenUniqueReference))
                ) && 
                (
                    this.PanUniqueReference == input.PanUniqueReference ||
                    (this.PanUniqueReference != null &&
                    this.PanUniqueReference.Equals(input.PanUniqueReference))
                ) && 
                (
                    this.ProductConfig == input.ProductConfig ||
                    (this.ProductConfig != null &&
                    this.ProductConfig.Equals(input.ProductConfig))
                ) && 
                (
                    this.TokenInfo == input.TokenInfo ||
                    (this.TokenInfo != null &&
                    this.TokenInfo.Equals(input.TokenInfo))
                ) && 
                (
                    this.TokenDetail == input.TokenDetail ||
                    (this.TokenDetail != null &&
                    this.TokenDetail.Equals(input.TokenDetail))
                ) && 
                (
                    this.ErrorCode == input.ErrorCode ||
                    (this.ErrorCode != null &&
                    this.ErrorCode.Equals(input.ErrorCode))
                ) && 
                (
                    this.ErrorDescription == input.ErrorDescription ||
                    (this.ErrorDescription != null &&
                    this.ErrorDescription.Equals(input.ErrorDescription))
                ) && 
                (
                    this.Errors == input.Errors ||
                    (this.Errors != null &&
                    this.Errors.Equals(input.Errors))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ResponseHost != null)
                    hashCode = hashCode * 59 + this.ResponseHost.GetHashCode();
                if (this.ResponseId != null)
                    hashCode = hashCode * 59 + this.ResponseId.GetHashCode();
                if (this.Decision != null)
                    hashCode = hashCode * 59 + this.Decision.GetHashCode();
                if (this.AuthenticationMethods != null)
                    hashCode = hashCode * 59 + this.AuthenticationMethods.GetHashCode();
                if (this.TokenUniqueReference != null)
                    hashCode = hashCode * 59 + this.TokenUniqueReference.GetHashCode();
                if (this.PanUniqueReference != null)
                    hashCode = hashCode * 59 + this.PanUniqueReference.GetHashCode();
                if (this.ProductConfig != null)
                    hashCode = hashCode * 59 + this.ProductConfig.GetHashCode();
                if (this.TokenInfo != null)
                    hashCode = hashCode * 59 + this.TokenInfo.GetHashCode();
                if (this.TokenDetail != null)
                    hashCode = hashCode * 59 + this.TokenDetail.GetHashCode();
                if (this.ErrorCode != null)
                    hashCode = hashCode * 59 + this.ErrorCode.GetHashCode();
                if (this.ErrorDescription != null)
                    hashCode = hashCode * 59 + this.ErrorDescription.GetHashCode();
                if (this.Errors != null)
                    hashCode = hashCode * 59 + this.Errors.GetHashCode();
                return hashCode;
            }
        }
    }

}
